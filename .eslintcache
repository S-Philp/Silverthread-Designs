[{"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js":"1","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js":"2","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js":"3","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js":"4","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx":"5","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx":"6","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js":"7","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"8","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx":"9","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"10","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"11","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js":"12","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js":"13","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getProducts.js":"14","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteProduct.js":"15","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js":"16","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterial.js":"17","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"18","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx":"19","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx":"20","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx":"21","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditProduct.jsx":"22","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditMaterials.jsx":"23","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddMaterials.jsx":"24","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js":"25","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js":"26","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editMaterial.js":"27","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addProduct.js":"28","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addRetail.js":"29"},{"size":2877,"mtime":1609348481417,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1608663578970,"results":"32","hashOfConfig":"31"},{"size":3181,"mtime":1609361554641,"results":"33","hashOfConfig":"31"},{"size":432,"mtime":1608758589055,"results":"34","hashOfConfig":"31"},{"size":7650,"mtime":1609285701772,"results":"35","hashOfConfig":"31"},{"size":152,"mtime":1608758589064,"results":"36","hashOfConfig":"31"},{"size":3740,"mtime":1609276792636,"results":"37","hashOfConfig":"31"},{"size":6522,"mtime":1609276792639,"results":"38","hashOfConfig":"31"},{"size":6015,"mtime":1609276792639,"results":"39","hashOfConfig":"31"},{"size":8632,"mtime":1609276792640,"results":"40","hashOfConfig":"31"},{"size":817,"mtime":1608758589062,"results":"41","hashOfConfig":"31"},{"size":859,"mtime":1609276792636,"results":"42","hashOfConfig":"31"},{"size":763,"mtime":1609276792640,"results":"43","hashOfConfig":"31"},{"size":734,"mtime":1608758589063,"results":"44","hashOfConfig":"31"},{"size":803,"mtime":1608758589062,"results":"45","hashOfConfig":"31"},{"size":821,"mtime":1608758589061,"results":"46","hashOfConfig":"31"},{"size":1698,"mtime":1609276792640,"results":"47","hashOfConfig":"31"},{"size":743,"mtime":1608663578969,"results":"48","hashOfConfig":"31"},{"size":5594,"mtime":1609276792639,"results":"49","hashOfConfig":"31"},{"size":4613,"mtime":1609276792638,"results":"50","hashOfConfig":"31"},{"size":17381,"mtime":1609276792638,"results":"51","hashOfConfig":"31"},{"size":325,"mtime":1609276792638,"results":"52","hashOfConfig":"31"},{"size":3262,"mtime":1608758589058,"results":"53","hashOfConfig":"31"},{"size":3216,"mtime":1608758589056,"results":"54","hashOfConfig":"31"},{"size":777,"mtime":1608678547444,"results":"55","hashOfConfig":"31"},{"size":1419,"mtime":1609276792640,"results":"56","hashOfConfig":"31"},{"size":781,"mtime":1608758589062,"results":"57","hashOfConfig":"31"},{"size":766,"mtime":1609276792640,"results":"58","hashOfConfig":"31"},{"size":770,"mtime":1609276792640,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},"1hi2d1u",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"63"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"63"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"63"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"63"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"63"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js",["130"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\"\nimport store from \"./common/redux/store\"\nimport { BrowserRouter } from 'react-router-dom'\nimport { createMuiTheme, CssBaseline, ThemeProvider } from \"@material-ui/core\";\n// import Login from './login/ui/login';\nimport './index.css';\nimport LeagueSparatanBoldWoff2 from './fonts/leaguespartan-bold-webfont.woff2'\nimport Aileron from './fonts/aileron-regular-webfont.woff2'\n\nconst league_spartanbold = {\n  fontFamily: 'League Spartan',\n  fontStyle: 'bold',\n  fontDisplay: 'swap',\n  fontWeight: 400,\n  src: `\n    local('League-Spartan'),\n    local('League-Spartan-Bold'),\n    url(${LeagueSparatanBoldWoff2}) format('woff2')\n  `,\n  unicodeRange:\n    'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF',\n};\n\n\nconst aileron_regular = {\n  fontFamily: 'Aileron',\n  fontStyle: 'regular',\n  fontDisplay: 'swap',\n  fontWeight: 400,\n  src: `\n    local('Aileron'),\n    local('Aileron-Regular'),\n    url(${Aileron}) format('woff2')\n  `,\n  unicodeRange:\n    'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF',\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      paper: \"#eeeeee\"\n      // paper: \"#bdbdbd\"\n      // paper: \"#616161\" // gray\n    },\n     primary: {\n      //  main: \"#4db6ac\" //turquoise\n       main: \"#78bfb5\", //other turquoise\n       contrastText: \"#FFFFFF\"\n      //  main: \"#f06292\" //pink\n               },\n     secondary: {\n       main: \"#f06292\" //pink\n        // main: \"#01579b\" //blue\n        // main: \"#b71c1c\" //red\n        // main: \"#f50057\" //dark pink\n                },\n           },\n// fontFamily: font // as an aside, highly recommend importing roboto font for Material UI projects! Looks really nice\n        typography: {\n          fontFamily: 'League-Spartan, Bold',\n        },\n        overrides: {\n          MuiCssBaseline: {\n            '@global': {\n              '@font-face': [league_spartanbold],\n            },\n          },\n        },\n        // typography: {\n        //   fontFamily: 'Aileron, Regular',\n        // },\n        // overrides: {\n        //   MuiCssBaseline: {\n        //     '@global': {\n        //       '@font-face': [Aileron],\n        //     },\n        //   },\n        // },\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store = {store}>\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {/* <Login /> */}\n        <App className=\"App\" />\n      </ThemeProvider>\n    </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\nreportWebVitals();\n",["131","132"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js",["133","134"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\nimport products from \"../../data-tables/framework/reducers\"\n\n\nconst reducers = {\n    ...materials,\n    ...sales,\n    ...products\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx",["135","136","137","138","139"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { VictoryPie, VictoryChart, VictoryLegend, VictoryLabel } from 'victory';\n\nconst data = [\n    { x: 1, y: 2 },\n    { x: 2, y: 2 },\n    { x: 3, y: 3 }\n  ];\n  const legendData = [{ name: \"Necklaces\" }, { name: \"Bracelets\" }, { name: \"Rings\" }];\n\n\nconst Dashboard = () => {\n    return (\n      <div>\n        <h1>Silverthread Products Sold</h1>\n        <svg color={\"white\"} width={500} height={400} style={{ border: \"1px solid #ccc\", backgroundColor: \"white\" }}>\n        {/* <h1>Silverthread Prodcuts Sold</h1> */}\n        {/* <div> */}\n        {/* <p>Silverthread Prodcuts Sold</p> */}\n          <VictoryLegend\n            standalone={false}\n            colorScale={[\"#78bfb5\", \"#f06292\", \"#b71c1c\"]}\n            x={20}\n            y={40}\n            gutter={20}\n            title=\"Legend\"\n            centerTitle\n            style={{ border: { stroke: \"black\" } }}\n            data={legendData}\n          />\n          <VictoryPie\n        //   titleComponent={\"Silverthread Prodcuts Sold\"}\n            // title=\"Silverthread Prodcuts Sold\"\n            // name=\"Silverthread Prodcuts Sold\"\n            standalone={false}\n            width={400}\n            height={300}\n            padding={{\n              left: 200,\n              bottom: 20,\n              top: 100\n            }}\n            colorScale={[\"#78bfb5\", \"#f06292\", \"#b71c1c\"]}\n            data={data}\n            labels={() => null}\n          />\n          {/* </div> */}\n        </svg>\n        </div>\n      );\n//     return (\n//         <div>\n// <VictoryChart>\n// <VictoryPie\n//   data={[\n//     { x: \"Necklaces\", y: 35, yourAttribute: \"#78bfb5\" },\n//     { x: \"Bracelets\", y: 40, yourAttribute: \"#f06292\" },\n//     { x: \"Earrings\", y: 55, yourAttribute: \"#b71c1c\" }\n//   ]}\n//   style={{\n//     data: {\n//       fill: (d) => d.slice.data.yourAttribute\n//     }\n//   }}\n// />\n// </VictoryChart>\n            {/* <VictoryPie\n  colorScale={[\"#78bfb5\", \"#f06292\", \"#01579b\", \"#b71c1c\", \"navy\" ]}\n  data={[\n    { x: \"Earrings\", y: 20 },\n    { x: \"Necklaces\", y: 22 },\n    { x: \"Bracelets\", y: 15 },\n    { x: \"Rings\", y: 10 },\n    { x: \"Other\", y: 20 },\n    { x: \"Mezuzzahs\", y: 2 },\n    { x: \"Brooches\", y: 1 },\n    { x: \"Chains\", y: 10 }\n  ]}\n/> */}\n    //     </div>\n    // )\n}\n\nexport default Dashboard\n\n\n// import * as React from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import {\n//   Chart,\n//   PieSeries,\n// } from '@devexpress/dx-react-chart-material-ui';\n// import { withStyles } from '@material-ui/core/styles';\n// import Typography from '@material-ui/core/Typography';\n// import NativeSelect from '@material-ui/core/NativeSelect';\n// import FormControl from '@material-ui/core/FormControl';\n// import {\n//   schemeCategory10,\n//   schemeAccent,\n//   schemeDark2,\n//   schemePaired,\n//   schemePastel1,\n//   schemePastel2,\n//   schemeSet1,\n//   schemeSet2,\n//   schemeSet3,\n// } from 'd3-scale-chromatic';\n\n// import { Palette } from '@devexpress/dx-react-chart';\n\n// const schemeCollection = [\n//   schemeCategory10,\n//   schemeAccent,\n//   schemeDark2,\n//   schemePaired,\n//   schemePastel1,\n//   schemePastel2,\n//   schemeSet1,\n//   schemeSet2,\n//   schemeSet3,\n// ];\n\n// const demoStyles = theme => ({\n//   typography: {\n//     marginTop: 0,\n//     marginBottom: theme.spacing(1),\n//   },\n//   div: {\n//     width: '200px',\n//     marginLeft: '50px',\n//     paddingBottom: '30px',\n//   },\n//   item: {\n//     width: '40px',\n//     height: '40px',\n//   },\n//   schemeConteiner: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(1),\n//   },\n// });\n\n// const data = [];\n// for (let i = 0; i < 15; i += 1) {\n//   data.push({ category: `item${i}`, val: 1 });\n// }\n\n// class Demo extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       data,\n//       scheme: schemeCollection[0],\n//     };\n\n//     this.changeScheme = this.changeScheme.bind(this);\n//   }\n\n//   changeScheme(e) {\n//     this.setState({ scheme: schemeCollection[e.target.value] });\n//   }\n\n//   render() {\n//     const { data: chartData, scheme } = this.state;\n//     const { classes } = this.props;\n\n//     return (\n//       <Paper>\n//         <Chart\n//           data={chartData}\n//         >\n//           <Palette scheme={scheme} />\n//           <PieSeries\n//             valueField=\"val\"\n//             argumentField=\"category\"\n//           />\n//         </Chart>\n//         <div className={classes.schemeConteiner}>\n//           {scheme.map(color => (\n//             <div\n//               key={color}\n//               className={classes.item}\n//               style={{ backgroundColor: color }}\n//             />\n//           ))}\n//         </div>\n//         <div className={classes.div}>\n//           <Typography component=\"h5\" variant=\"h5\" className={classes.typography}>Scheme</Typography>\n//           <FormControl>\n//             <NativeSelect onChange={this.changeScheme} defaultValue={0}>\n//               <option value={0}>schemeCategory10</option>\n//               <option value={1}>schemeAccent</option>\n//               <option value={2}>schemeDark2</option>\n//               <option value={3}>schemePaired</option>\n//               <option value={4}>schemePastel1</option>\n//               <option value={5}>schemePastel2</option>\n//               <option value={6}>schemeSet1</option>\n//               <option value={7}>schemeSet2</option>\n//               <option value={8}>schemeSet3</option>\n//             </NativeSelect>\n//           </FormControl>\n//         </div>\n//       </Paper>\n//     );\n//   }\n// }\n\n// export default withStyles(demoStyles, { name: 'Demo' })(Demo);\n\n\n// import * as React from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import {\n//   Chart,\n//   PieSeries,\n// } from '@devexpress/dx-react-chart-material-ui';\n// import { Palette } from '@devexpress/dx-react-chart';\n// import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\n\n// const theme = createMuiTheme({\n//     palette: {\n//       background: {\n//         paper: \"#FFFFFF\"\n//         // paper: \"#bdbdbd\"\n//         // paper: \"#616161\" // gray\n//       },\n//        primary: {\n//         //  main: \"#4db6ac\" //turquoise\n//          main: \"#78bfb5\", //other turquoise\n//          contrastText: \"#FFFFFF\"\n//         //  main: \"#f06292\" //pink\n//                  },\n//        secondary: {\n//          main: \"#f06292\" //pink\n//           // main: \"#01579b\" //blue\n//           // main: \"#b71c1c\" //red\n//           // main: \"#f50057\" //dark pink\n//                   },\n//              },\n//   // fontFamily: font // as an aside, highly recommend importing roboto font for Material UI projects! Looks really nice\n//   });\n\n// const data = [\n//   { country: 'Necklaces', area: 12 },\n//   { country: 'Rings', area: 7 },\n//   { country: 'Earrings', area: 7 },\n//   { country: 'Bracelettes', area: 7 },\n//   { country: 'Brazil', area: 6 },\n//   { country: 'Australia', area: 5 },\n//   { country: 'India', area: 2 },\n//   { country: 'Others', area: 55 },\n// ];\n// export default class Demo extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       data,\n//     };\n//   }\n\n//   render() {\n//     const { data: chartData } = this.state;\n\n//     return (\n//         <ThemeProvider theme={theme}>\n//       <Paper>\n//         <Chart\n//           data={chartData}\n//         >\n//           <PieSeries\n//             valueField=\"area\"\n//             argumentField=\"country\"\n//           />\n//         </Chart>\n//       </Paper>\n//       </ThemeProvider>\n//     );\n//   }\n// }","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js",["140"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onGetMaterials,\n    onAddMaterial,\n    onDeleteMaterial,\n    onEditMaterial,\n    onGetSales,\n    onDeleteSale,\n    onAddSale,\n    onEditSale,\n    onGetProducts,\n    onDeleteProduct,\n    onAddProduct,\n    onAddRetail,\n   \n}from \"./actions\"\n\nexport const materials = createReducer(\n    {\n        materialsList: [],\n        materialID: '',\n        materialAdd: '',\n        materialEdit: '',\n    },\n    {\n        [onGetMaterials.type]: (state, {payload: material}) => {\n            if (material === null){\n                return state\n            }\n            state.materialsList = material\n        },\n\n        [onAddMaterial.type]: (state,{payload: material}) => {\n            if (material === null){\n                return state\n            } \n            state.materialsList = [...state.materialsList, material]\n        }, \n\n        [onDeleteMaterial.type]:(state, {payload: materialid}) => {\n            if (materialid === null) {\n                return state\n            }\n            state.materialID = materialid\n        },\n        [onAddMaterial.type]: (state, {payload: materialDetails }) => {\n            if (materialDetails === null) {\n                return state\n            }\n            state.materialAdd = materialDetails\n        },\n        [onEditMaterial.type]: (state, {payload: materialEdits}) => {\n            if (materialEdits ===  null) {\n                return state\n            }\n            state.materialEdit = materialEdits\n        }\n    }\n)\n\nexport const sales = createReducer(\n    {\n       salesList: [],\n       saleID: '',      \n       saleEdits: {} \n    }, \n    {\n        [onGetSales.type]: (state, {payload: salesList}) => {\n            if (sales === null) {\n                return state\n            } \n            /*    sales.forEach((sale) => {\n                state.byId[sale.id] = sale\n            })*/\n            return {...state.salesList, salesList}\n        },\n        [onDeleteSale.type]: (state, {payload: saleid}) => {            \n            if (saleid === null) {\n                console.log(null)\n                return state\n            }\n            console.log(saleid)\n            state.saleID = saleid   \n        },\n        [onAddSale.type]: (state, {payload:newSaleId}) => {\n            if(newSaleId === null){\n                return state\n            }\n            state.newSaleId = newSaleId\n        },          \n        [onEditSale.type]: (state, {payload: saleDetails}) => {\n            if (saleDetails === null) {\n                return state\n            }\n            state.saleEdits = saleDetails\n        }\n    }\n)\n\nexport const products = createReducer(\n    {\n        productsList: [],\n        productsDelete: '',\n        newProduct: {},\n        editedProduct: {},\n     }, \n     {\n        [onGetProducts.type]: (state, {payload: products}) => {\n            if (products === null){\n                return state\n            }            \n            state.productsList = products\n        },\n        [onDeleteProduct.type]: (state, {payload: productid}) => {\n            if (productid === null){\n                return state\n            }          \n            state.productsDelete = productid\n        },\n        [onAddProduct.type]:(state, {payload: newProduct}) => {\n            if (newProduct === null) {\n                return state\n            } else {\n                state.newProduct = newProduct\n            }\n\n        },\n        [onAddRetail.type]: (state, {payload: editedProduct}) => {\n            if (editedProduct === null) {\n                return state\n            } else {\n                state.editedProduct = editedProduct\n            }\n        }\n\n     }\n)    \n\nexport default {materials, sales, products}","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["141","142","143","144","145","146"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\"\nimport './MaterialsTable.css'\nimport AddMaterials from './AddMaterials'\nimport EditMaterials from './EditMaterials'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { DeleteMaterial } from \"../use-cases/deleteMaterial\"\nimport Popover from '@material-ui/core/Popover';\n\n// import Popover from '@material-ui/core/Popover';\n//import AddMaterialModal from './AddMaterialModal'\n\nimport \"./AddMaterialModal.css\"\n\nimport {AddMaterial} from \"../use-cases/addMaterial\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst AddMaterialModal = ({materials, onAddMaterial, closeModal }) => {\n    const [fields, setFields] = useState({})\n\n    const setField = (evt) => {\n        setFields({\n            ...fields,\n            [evt.target.name]: evt.target.value\n        })\n    }\n    console.log(fields)\n\n    return(\n        <div className = \"add-material-container\">\n        <Button variant = \"contained\" onClick = {() => closeModal()}>Close</Button>\n            <div>Add Material</div>\n                <div className=\"material-input\"><TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" name = \"materialName\" onChange = {setField}/></div> \n                <div className=\"material-input\"><TextField id=\"outlined-basic\" label=\"Vendor\" variant=\"outlined\" name = \"vendor\" onChange = {setField}/></div> \n                <div className=\"material-input\"><TextField id=\"outlined-basic\" label=\"Vendor Material Id\" variant=\"outlined\" name = \"vendorMaterialId\" onChange = {setField}/></div> \n                <div className=\"material-input\"><TextField id=\"outlined-basic\" label=\"Unit\" variant=\"outlined\" name = \"unit\" onChange = {setField}/></div> \n                <div className=\"material-input\"><TextField id=\"outlined-basic\" label=\"Unit Price\" variant=\"outlined\" name = \"unitPrice\" onChange = {setField}/></div> \n                <div className=\"material-input\"><TextField id=\"outlined-basic\" label=\"Category\" variant=\"outlined\" name = \"category\" onChange = {setField}/></div> \n            <Button variant = \"contained\" onClick = {()=> onAddMaterial(fields)}>Add</Button>\n        </div>\n     \n    )\n}\n\n\nconst MaterialsTable = ({ onGetMaterials, materials, onDeleteMaterial, onAddMaterial }) => {\n  const [open, setOpen] = useState(false)\n\n  const [openAdd, setOpenAdd] = useState(false)\n  const [openEdit, setOpenEdit] = useState(false)\n  const [rowData, setRowData] = useState()\n  \n\n  useEffect(() => {  \n    onGetMaterials()\n  }, [])\n\n  let tableData = materials.map(data => ({\n    ...data\n  }))\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Name', field: 'name' },\n    { title: 'Description', field: 'description' },\n    { title: 'Price per Unit', field: 'unit_price' },\n    { title: 'Category', field: 'category' },\n  ]\n\n  const [data, setData] = useState([\n    { id: '1', name: 'Jump Ring', description: 'small jump ring', unit_price: '.23', category: 'fasteners' },\n    { id: '2', name: 'Blue Bead', description: 'small blue bead', unit_price: '.84', category: 'bead' },\n    { id: '3', name: 'Leather Chain', description: 'Leather', unit_price: '.3.68', category: 'chain' },\n  ])\n\n  const closeModal = () => {\n    setOpen(false)\n  }\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <Popover\n        open={open}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <AddMaterialModal className = \"modal\" closeModal = {closeModal}/>\n      </Popover>\n\n      <Popover\n            open={openEdit}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <EditMaterials materialData={rowData} />\n        </Popover>\n        \n      <MaterialTable\n        style={{backgroundColor:'#FFFFFF'}}\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={tableData}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          addRowPosition: 'first',\n          exportButton: true,\n          //export csv is a function we can use to override the generic export and export to excel\n          // exportCsv\n          headerStyle: {\n            backgroundColor: '#01579b',\n            // backgroundColor: '#78bfb5',\n            color: '#FFFFFF'\n          }\n        }}\n\n        actions={[\n          {\n            icon: 'add',\n            tooltip: 'Add Material',\n            isFreeAction: true,\n            onClick: (event) => setOpen(true)\n          },\n          {\n            icon: 'edit',\n            tooltip: 'Edit Row',\n            onClick: (event, rowData) => {\n              console.log(rowData)\n            }\n          }\n        ]}\n\n        editable={{\n          onRowAdd: newData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                setData([...data, newData]);\n                resolve();\n              }, 1000)\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n                resolve();\n              }, 1000)\n            }),\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const id = oldData.id;\n                onDeleteMaterial(id)\n                resolve()\n              }, 1000)\n            }),\n        }}\n\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, {materials}) => ({\n  materials: state.materials.materialsList,\n  materialsDelete: state.materials.materialID,\n  materialsAdd: state.materials.materialAdd,\n  materialsEdit: state.materials.materialEdit\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch),\n  onAddMaterial: AddMaterial(dispatch),\n  onDeleteMaterial: DeleteMaterial(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx",["147","148","149","150"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport './ProductsTable.css'\n\nimport Popover from '@material-ui/core/Popover';\nimport EditProduct from './EditProduct'\nimport AddProducts from './AddProducts'\nimport { GetProducts } from '../use-cases/getProducts'\nimport { DeleteProduct } from '../use-cases/deleteProduct'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst AddProductModal = ({ closeModal }) => {\n    return (\n        <div className=\"addProductModal\">\n            <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeModal()}><HighlightOffIcon /></IconButton>\n            </div>\n            <AddProducts />\n        </div>\n    )\n}\n\nconst EditProductModal = ({ closeEditModal }) => {\n    return (\n        <div className=\"addProductModal\">\n            <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeEditModal()}><HighlightOffIcon /></IconButton>\n            </div>\n            <EditProduct />\n        </div>\n    )\n}\n\n\nconst ProductsTable = ({ onGetProducts, products, onDeleteProduct, productDelete, productAdd, productEdit }) => {\n\n    const [open, setOpen] = useState(false)\n    const [openEdit, setOpenEdit] = useState(false)\n    const [rowData, setRowData] = useState('')\n\n    var tableData\n\n    //get products from db\n    useEffect(() => {\n        onGetProducts()\n    }, [productDelete, productAdd, productEdit])\n\n    tableData = products.map(data => ({\n        ...data\n    }))\n\n\n    //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'labor', field: 'labor', hidden: true },\n        { title: 'Product Number', field: 'product_num' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Wholesale Price', field: 'wholesale', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n        { title: 'Retail Price', field: 'retail_price', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n        { title: 'Category', field: 'category' },\n        { title: 'Inventory', field: 'quantity' },\n    ]\n\n    const closeModal = () => {\n        setOpen(false)\n    }\n\n    const closeEditModal = () => {\n        setOpenEdit(false)\n    }\n\n    return (\n        <div className='productsContainer'>\n            <h1>Silverthread Products </h1>\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddProductModal className=\"modal\" closeModal={closeModal} />\n            </Popover>\n            <Popover\n                open={openEdit}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <EditProductModal className=\"modal\" closeEditModal={closeEditModal}  />\n            </Popover>\n\n            <div className='productsMaterialTable'>\n                <MaterialTable\n                    style={{ backgroundColor: '#FFFFFF' }}\n                    title=\"Silverthread Products\"\n                    columns={columns}\n                    data={tableData}\n\n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        addRowPosition: 'first',\n                        exportButton: true,\n                        //export csv is a function we can use to override the generic export and export to excel\n                        // exportCsv\n                        headerStyle: {\n                            backgroundColor: '#f06292',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Product',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {\n                                console.log(rowData)\n                                // setRowData(rowData.id)\n                                setOpenEdit(true)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;\n                                    onDeleteProduct(id)\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    products: state.products.productsList,\n    productDelete: state.products.productsDelete,\n    productAdd: state.products.newProduct,\n    productEdit: state.products.editedProduct\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetProducts: GetProducts(dispatch),\n    onDeleteProduct: DeleteProduct(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["151","152","153"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport { setAutoFreeze } from 'immer'\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Popover from '@material-ui/core/Popover';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, } from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './SalesTable.css'\nimport AddSales from './AddSales'\nimport EditSales from './EditSales'\nimport { GetSales } from '../use-cases/getSales';\nimport { DeleteSale } from '../use-cases/deleteSale';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst SalesTable = ({ onGetSales, sales, onDeleteSale, salesAdd, salesEdit, salesDelete, }) => {\n    const classes = useStyles();\n\n    //set date for date-pickers on load\n    const getStartDate = () => {\n        let d = new Date()\n        d.setDate(d.getDate() - 30)\n        return d\n    }\n    let end_date = new Date()    \n    let start_date = getStartDate()\n\n    const [selectedDate, setSelectedDate] = useState({ start: start_date, end: end_date });\n    const [open, setOpen] = useState(false)  \n    const [openEdit, setOpenEdit] = useState(false)\n    const [rowData, setRowData] = useState()\n\n    var tableData\n\n    //get sales from db\n    useEffect(() => {\n        onGetSales(selectedDate)\n    }, [salesAdd, salesEdit, salesDelete])\n\n    tableData = sales.map(data => ({\n        ...data\n    }))\n\n    //changes the start date of the reports\n    const handleStartDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            start: date\n        });\n    };\n\n    //changes the end date of the reports\n    const handleEndDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            end: date\n        });\n    };\n\n    //onclick function that runs new sales report based on input dates\n    const handleRunSalesReport = (dates) => {\n        if (dates.start === null || dates.end === null) {\n            alert('Please enter a start and end date for your report')\n        } else if (dates.start > dates.end) {\n            alert(\"The start date must be before the end date\")\n        } else {\n            onGetSales(dates)\n        }      \n    }\n\n    //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Product ID', field: 'product_id', hidden: true },\n        { title: 'Date', field: 'date_sold' },\n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Quantity', field: 'quantity' },\n        { title: 'Price per Unit', field: 'price_per_unit' },\n        { title: 'Total Sales Price', field: 'total_price' },\n        { title: 'Category', field: 'product_category' },\n        { title: 'Purchased By', field: 'sold_to' },\n    ]\n\n    return (\n        <div className='salesContainer'>\n            <h1>Silverthread Sales </h1>\n            <div className='datePickerContainer'>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    {/* <Grid container justify=\"space-around\" style={{backgroundColor:'#FFFFFF'}}> */}\n                    <Grid container justify=\"space-evenly\" alignItems=\"center\" style={{ backgroundColor: '#FFFFFF' }}>\n                        <KeyboardDatePicker\n                            style={{ backgroundColor: '#FFFFFF' }}\n                            margin=\"normal\"\n                            name=\"start\"\n                            id=\"date-picker-dialog\"\n                            label=\"Start Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.start}\n                            onChange={handleStartDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"end\"\n                            id=\"date-picker-dialog\"\n                            label=\"End Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.end}\n                            onChange={handleEndDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n\n                        <div className={classes.root} style={{ backgroundColor: '#FFFFFF' }}>\n                            <Button onClick={() => handleRunSalesReport(selectedDate)} variant=\"contained\" color=\"secondary\">\n                                Run Report\n                            </Button>\n                        </div>\n                    </Grid>\n                </MuiPickersUtilsProvider>\n\n            </div>\n\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddSales />\n            </Popover>\n\n            {sales === [] ?\n                <div>Loading Data....</div>\n                :\n                <div className='salesMaterialTable'>\n                    <MaterialTable\n                        style={{ backgroundColor: '#FFFFFF' }}\n                        title=\"Silverthread Sales\"\n                        columns={columns}\n                        data={tableData}\n\n                        options={{\n                            search: false,\n                            showTitle: false,\n                            filtering: true,\n                            addRowPosition: 'first',\n                            exportButton: true,\n                            //export csv is a function we can use to override the generic export and export to excel\n                            // exportCsv\n                            headerStyle: {\n                                backgroundColor: '#b71c1c',\n                                color: '#FFFFFF'\n                            },\n                        }}\n                        actions={[\n                            {\n                                icon: 'add',\n                                tooltip: 'Add Sale',\n                                isFreeAction: true,\n                                onClick: (event) => setOpen(true)\n                            },\n                            {\n                                icon: 'edit',\n                                tooltip: 'Edit Row',\n                                onClick: (event, rowData) => {\n                                    setRowData(rowData)\n                                    setOpenEdit(true)                                    \n                                }\n                            },\n                        ]}\n                        editable={{\n                            onRowDelete: oldData =>\n                                new Promise((resolve, reject) => {\n                                    setTimeout(() => {\n                                        const id = oldData.id;\n                                        onDeleteSale(id)\n                                        resolve()\n                                    }, 1000)\n                                }),\n                        }}\n                    />\n                </div>}\n            {/* </div> */}\n            <Popover\n                open={openEdit}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <EditSales saleData={rowData} />\n            </Popover>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    sales: state.sales.salesList,\n    salesAdd: state.sales.newSaleId,\n    salesEdit: state.sales.saleEdits,\n    salesDelete: state.sales.saleID,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetSales: GetSales(dispatch),\n    onDeleteSale: DeleteSale(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getProducts.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteProduct.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx",["154","155","156","157","158","159","160"],"import { useState } from 'react'\nimport { connect } from 'react-redux' \nimport { EditSale } from '../use-cases/editSale'\nimport './EditSales.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from \"@material-ui/icons/Save\"\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst EditSales = (props, {onEditSale}) => {\n    const classes = useStyles();\n\n    const [updatedSalesData, setUpdatedSalesData] = useState(props.saleData)\n\n    const handleOnChange = (e) => {\n        setUpdatedSalesData({\n            ...updatedSalesData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleDateChange = (date) => {\n        setUpdatedSalesData({\n            ...updatedSalesData,\n            createdAt: date\n        })\n    };\n\n    const handleOnClick = (data) => {        \n        //check to make sure quantity is a number\n        const quantity = +data.quantity\n\n        //check to make sure price_per_unit and total_price are x.xx\n        var regex = /^\\d+(?:\\.\\d{0,2})$/;\n        const price_per_unit = data.price_per_unit\n        const total_price = data.total_price\n\n        if (data.product_name == '') {\n            alert('Please enter the name of the product you sold')\n        } else if (data.product_number == '') {\n            alert('Please enter the number of the product you sold')\n        } else if (data.product_category == '') {\n            alert('Please enter the category of the product you sold')\n        } else if (quantity == '' || isNaN(quantity)) {\n            alert('Please enter the quantity sole')\n        } else if (price_per_unit == '' || (!regex.test(price_per_unit)) ) {\n            alert('Please enter the price per unit in the format X.XX')\n        } else if (total_price == '' || (!regex.test(total_price)) ) {\n            alert('Please enter the total price in the format X.XX')\n        } else if (data.sold_to == '') {\n            alert('Please enter the name of the buyer')\n        } else {\n            props.onEditSale(data)\n        }       \n    }\n \n    return (\n        <div className='editSalesContainer'>\n            <h2>Edit Sale</h2>\n            <div>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_number' value={updatedSalesData.product_number} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_name' value={updatedSalesData.product_name} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='quantity' value={updatedSalesData.quantity} onChange={handleOnChange} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='price_per_unit' value={updatedSalesData.price_per_unit} onChange={handleOnChange} id=\"outlined-basic\" label=\"Price Per Unit\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='total_price' value={updatedSalesData.total_price} onChange={handleOnChange} id=\"outlined-basic\" label=\"Total Sales Price\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_category' value={updatedSalesData.product_category} onChange={handleOnChange} id=\"outlined-basic\" label=\"Category\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='sold_to' value={updatedSalesData.sold_to} onChange={handleOnChange} id=\"outlined-basic\" label=\"Sold To\" variant=\"outlined\" />\n                </form>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        margin=\"normal\"\n                        name=\"createdAt\"\n                        id=\"date-picker-dialog\"\n                        label=\"Sales Date\"\n                        format=\"MM/dd/yyyy\"\n                        value={updatedSalesData.createdAt}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                        fullWidth\n                    />\n                </MuiPickersUtilsProvider>\n            </div>\n            <div>        \n                    <Button onClick={() => handleOnClick(updatedSalesData)} fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"secondary\">\n                    Save\n                </Button>\n                \n            </div>\n        </div>\n    )\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    onEditSale: EditSale(dispatch),\n    \n  })\nexport default connect(null, mapDispatchToProps)(EditSales)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx",["161","162","163","164","165","166","167","168"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport './AddProducts.css'\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from \"@material-ui/icons/Save\"\n// import { onAddProduct, onGetProducts, onEditProduct } from '../framework/actions';\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { AddProduct } from \"../use-cases/addProduct\"\nimport { AddRetail } from \"../use-cases/addRetail\"\n\n//for material ui components\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nconst AddProducts = ({ onGetMaterials, materials, newReturnedProduct, onAddProduct, onAddRetail, }) => {\n\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [newProduct, setNewProduct] = useState({ 'product_name': '', 'product_num': '', 'category': '', 'labor': '' })\n    const [returnedProduct, setReturnedProduct] = useState({})\n    const [materialToAdd, setMaterialToAdd] = useState({ 'material_unit_amount': '' })\n    const [addedMaterialsList, setAddedMaterialsList] = useState([])\n\n    const steps = getSteps();\n\n    //gets materials for selector in add materials step on load\n    useEffect(() => {\n        onGetMaterials()\n    }, [])\n\n    //updates returned product, resets new product, and moves stepper forward when returned product is received\n    useEffect(() => {    \n        setReturnedProduct(newReturnedProduct)              \n        if (activeStep > 0) {            \n            setNewProduct({ 'product_name': '', 'product_num': '', 'category': '', 'labor': '' })\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    }, [newReturnedProduct])\n\n    \n    //these are the steps shown at the top of the stepper\n    function getSteps() {\n        return ['Enter Product', 'Add Materials', 'Set Pricing'];\n    }\n\n    function getStepContent(step) {\n\n        switch (step) {\n            //Input product name, product number, categorgy, labor time\n            case 0:\n                //list of jewelry categories to choose from\n                const category = [{ title: 'Earrings' }, { title: 'Necklaces' }, { title: 'Bracelets' }, { title: 'Rings' }, { title: 'Mezuzzahs' }, { title: 'Brooches' }, { title: 'Chains' }, { title: 'Other' }]\n\n                //handles the input of the product name and number\n                const handleProductInput = (e) => {\n                    setNewProduct({\n                        ...newProduct,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return (\n                    <div className=\"productDetailContainer\">\n\n                        <h4>Enter Product Details</h4>\n                        <div className=\"textField\">\n                            <TextField name=\"product_name\" onChange={handleProductInput} value={newProduct.product_name} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className=\"textField\">\n                            <TextField name=\"product_num\" onChange={handleProductInput} value={newProduct.product_num} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className=\"textField\">\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo                                \n                                options={category.map((option) => option.title)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='category' onSelect={handleProductInput} value={newProduct.category} label=\"Category\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )} handleProductInput\n                            />\n                        </div>\n                        <div className=\"textField\">\n                            <TextField name=\"labor\" onChange={handleProductInput} value={newProduct.labor} id=\"outlined-basic\" label=\"Labor (minutes)\" variant=\"outlined\" fullWidth />\n                        </div>\n                    </div>\n                );\n\n            //Input materials and quantity into MaterialsList   \n            case 1:\n                //STEP 2 -handles selection on material from selection picker\n                const handleMaterialInput = (e) => {\n                    let materialItem = e.target.value\n\n                    let material = materials.find(item => {\n                        return item.material_name == materialItem\n                    })\n\n                    //sets into material to add array\n                    setMaterialToAdd({\n                        ...materialToAdd,\n                        material\n                    })\n                }\n\n                //inputs quantity of materials\n                const handleQuantityInput = (e) => {\n                    setMaterialToAdd({\n                        ...materialToAdd,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                //adds material in materialToAdd into the MaterialsArry\n                const addToMaterialList = (addMaterial) => {\n\n                    let quantity = +addMaterial.material_unit_amount\n\n                    if (!addMaterial.material) {\n                        alert('Please select a material')\n                    } else if (isNaN(quantity) || quantity == '') {\n                        alert('Please enter a quantity')\n                    } else {\n                        setAddedMaterialsList([...addedMaterialsList,\n                        {\n                            material_id: addMaterial.material.id,\n                            material_name: addMaterial.material.material_name,\n                            unit_price: addMaterial.material.unit_price,\n                            material_unit_amount: addMaterial.material_unit_amount\n                        }\n                        ])\n\n                        setMaterialToAdd({\n                            material: {},\n                            material_unit_amount: ''\n                        })\n                    }\n                }\n\n                //allows user to delete added materials before saving to db\n                const deleteMaterial = (id) => {\n                    let updatedMaterialList = addedMaterialsList.filter(item => item.material_id != id)\n                    setAddedMaterialsList(updatedMaterialList)\n                }\n\n                //map through materials in MaterialsList to show what has been added\n                const displayMaterialList = addedMaterialsList.map(item => {\n                    return <div key={item.material_id}>{item.material_name}: {item.material_unit_amount} @ ${item.unit_price} <IconButton onClick={() => deleteMaterial(item.material_id)} aria-label=\"delete\"><DeleteIcon /></IconButton></div>\n                })\n\n\n                return (\n                    <div>\n                        <div className='textField'>\n                            <b>Select Materials:</b>\n                        </div>\n                        <div className='textField'>\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={materials.map((option) => option.material_name)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='material' onSelect={handleMaterialInput} label=\"Select Material\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )}\n                            />\n                        </div>\n                        <div className='textField'>\n                            <TextField name=\"material_unit_amount\" value={materialToAdd.material_unit_amount} onChange={handleQuantityInput} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className='textField'>\n                            <Button onClick={() => addToMaterialList(materialToAdd)} variant=\"contained\" color=\"primary\" className={classes.button} >\n                                Add Material\n                            </Button>\n                        </div>\n                        {addedMaterialsList.length >= 1 ? <div className=\"addedMaterials\">\n                            <b>Added Materials: </b>\n                            {displayMaterialList}\n                        </div> : null}\n\n                    </div>\n                );\n\n\n            // list all product details and add retail price and inventory    \n            case 2:\n                const handleSetPricing = (e) => {\n                    setReturnedProduct({\n                        ...returnedProduct,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return <div className=\"pricingContainer\">\n                    <h4>Set Pricing and Inventory</h4>\n                    <label><b>Name:</b> {returnedProduct.product_name}</label>\n                    <label><b>Product number:</b> {returnedProduct.product_num}</label>\n                    <label><b>Category:</b> {returnedProduct.category}</label>\n                    <label><b>Wholesale Price:</b> ${returnedProduct.wholesale}</label>\n                    <div className='pricingInputs'>\n                        <b>Retail Price:</b> $<TextField name=\"retail_price\" onChange={handleSetPricing} id=\"standard-basic\" label=\"\" />\n                    </div>\n                    <div className='pricingInputs'>\n                        <b>Inventory:</b> <TextField name=\"quantity\" onChange={handleSetPricing} id=\"standard-basic\" label=\"\" />\n                    </div>\n                </div>\n            default:\n                return 'Unknown step';\n        }\n    }\n\n    // OnClick Functions For Stepper:\n\n    //handles adding newProduct and materials to db from on click\n    const addProductToDB = async (product, listMaterials) => {\n\n        const addProduct = {\n            product_name: product.product_name,\n            product_num: product.product_num,\n            product_id: product.product_id,\n            category: product.category,\n            labor: product.labor,\n            materials: listMaterials\n        }\n        //call function here pass in addProduct\n        onAddProduct(addProduct)\n      \n    }\n\n    //from onclick in last step add retail price and inventory to the db\n    const addRetailPriceToDB = async (finalProduct) => {\n\n        //check to make sure retail price is currency\n        var regex = /^\\d+(?:\\.\\d{0,2})$/;\n        let retail = finalProduct.retail_price\n\n        //check to make sure inventory is a number\n        let quantity = +finalProduct.quantity\n\n        if (!finalProduct.retail_price || (!regex.test(retail))) {\n            alert('The retail price must be entered in the format X.XX')\n\n        } else if (!finalProduct.quantity || isNaN(quantity)) {\n            alert('Inventory must be entered as a whole number')\n\n        } else {\n            onAddRetail(finalProduct) \n            setReturnedProduct({})\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);          \n        }\n    }\n\n\n    //handle back, next and close handle the nav buttons at the bottom of the screen\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    //takes user from entering details to enterin materials - check to make sure all fields are filled in\n    const handleNext = () => {\n        //check to make sure labor is a number\n        let labor = +newProduct.labor\n\n        if (newProduct.product_name == '') {\n            alert('Please enter a product name')\n        } else if (newProduct.product_num == '') {\n            alert('Please enter a product number')\n        } else if (newProduct.category == '') {\n            alert('Please enter a category')\n        } else if (isNaN(labor) || labor === '') {\n            alert('Please enter the number of minutes required')\n        } else {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    };\n\n   \n    return (\n        <div className=\"addProductsContainer\">\n            <h2>Add New Product</h2>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n\n                        );\n                    })}\n\n                </Stepper>\n                <div>\n                    {activeStep === steps.length ? (\n                        <div>\n                            <Typography className={classes.instructions}>\n                                All steps completed. Your product is now live.\n                            </Typography>\n                        </div>\n                    ) : (\n                            <div>\n                                <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                                <div>\n                                    <Button disabled={activeStep === 0 || activeStep === 2} onClick={handleBack} className={classes.button}>\n                                        Back\n                                </Button>\n\n                                    {/* this button shows on the first step and takes the input for the product details */}\n                                    {activeStep === 0 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                        : null}\n\n\n                                    {/* This button shows on the second step and sends all product info to the db */}\n                                    {activeStep === 1 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            //addProductsTODB - line 45\n                                            onClick={() => addProductToDB(newProduct, addedMaterialsList)}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                        : null}\n\n                                    {/* This button shows on the final step and handles taking the input for retail pricing and inventory and sends to the db */}\n                                    {activeStep === 2 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => addRetailPriceToDB(returnedProduct)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Save' : 'Next'}\n                                        </Button>\n                                        : null}\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, { materials }) => ({\n    materials: state.materials.materialsList,\n    newReturnedProduct: state.products.newProduct,\n       \n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetMaterials: GetMaterials(dispatch),\n    onAddProduct: AddProduct(dispatch),\n    onAddRetail: AddRetail(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProducts)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditProduct.jsx",["169"],"import './EditProduct.css'\nimport { connect } from 'react-redux'\nimport { useEffect } from 'react'\n\nconst EditProduct = (props) => {\n\n    useEffect(() =>{\n\n    }, [])\n\n    return(\n        <div className=\"editProductContainer\">\n            <h2> Edit Product</h2>\n           \n        </div>\n    )\n\n}\n\nexport default EditProduct","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditMaterials.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddMaterials.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js",["170"],"import { onAddSale } from \"../framework/actions\"\nimport { Popover } from '@material-ui/core';\n\n//This is a usecase for getting the list of sales\nexport const AddSale = (dispatch) => async (fields) => {\n   const newSale = {\n     /*  product_id: product_id \n     ^ gets product id from a fetch call to the products table route*/\n      product_number: fields.product_number,\n      product_name: fields.product_name,\n      product_category: fields.product_category,\n      price_per_unit: fields.price_per_unit,\n      quantity: fields.quantity,\n      total_price: fields.total_price,\n      sold_to: fields.sold_to,\n      date_sold: fields.date_sold\n   }\n   console.log(\"NEW SALE UNDER THIS\")\n   console.log(newSale)\n\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   try {\n      const response = await fetch(`http://localhost:8000/sales/addNewSale`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(newSale),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onAddSale(success))\n   } catch (e) {\n      console.log(\"CAUGHT ERROR IN PROMISE\")\n   }\n}\n\nexport default AddSale\n","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addProduct.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addRetail.js",[],{"ruleId":"171","severity":1,"message":"172","line":30,"column":7,"nodeType":"173","messageId":"174","endLine":30,"endColumn":22},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"171","severity":1,"message":"179","line":1,"column":10,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"180","line":1,"column":27,"nodeType":"173","messageId":"174","endLine":1,"endColumn":38},{"ruleId":"171","severity":1,"message":"181","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":16},{"ruleId":"171","severity":1,"message":"182","line":3,"column":22,"nodeType":"173","messageId":"174","endLine":3,"endColumn":34},{"ruleId":"171","severity":1,"message":"183","line":3,"column":51,"nodeType":"173","messageId":"174","endLine":3,"endColumn":63},{"ruleId":"184","severity":1,"message":"185","line":68,"column":13,"nodeType":"186","messageId":"187","endLine":80,"endColumn":7},{"ruleId":"188","severity":1,"message":"189","line":68,"column":13,"nodeType":"186","messageId":"190","endLine":80,"endColumn":7},{"ruleId":"191","severity":1,"message":"192","line":140,"column":1,"nodeType":"193","endLine":140,"endColumn":44},{"ruleId":"171","severity":1,"message":"194","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":20},{"ruleId":"171","severity":1,"message":"195","line":52,"column":10,"nodeType":"173","messageId":"174","endLine":52,"endColumn":17},{"ruleId":"171","severity":1,"message":"196","line":52,"column":19,"nodeType":"173","messageId":"174","endLine":52,"endColumn":29},{"ruleId":"171","severity":1,"message":"197","line":53,"column":20,"nodeType":"173","messageId":"174","endLine":53,"endColumn":31},{"ruleId":"171","severity":1,"message":"198","line":54,"column":19,"nodeType":"173","messageId":"174","endLine":54,"endColumn":29},{"ruleId":"199","severity":1,"message":"200","line":59,"column":6,"nodeType":"201","endLine":59,"endColumn":8,"suggestions":"202"},{"ruleId":"171","severity":1,"message":"203","line":41,"column":12,"nodeType":"173","messageId":"174","endLine":41,"endColumn":19},{"ruleId":"171","severity":1,"message":"198","line":41,"column":21,"nodeType":"173","messageId":"174","endLine":41,"endColumn":31},{"ruleId":"199","severity":1,"message":"204","line":48,"column":8,"nodeType":"201","endLine":48,"endColumn":48,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":158,"column":33,"nodeType":"208","messageId":"209","endLine":158,"endColumn":36},{"ruleId":"171","severity":1,"message":"210","line":4,"column":10,"nodeType":"173","messageId":"174","endLine":4,"endColumn":23},{"ruleId":"199","severity":1,"message":"211","line":50,"column":8,"nodeType":"201","endLine":50,"endColumn":42,"suggestions":"212"},{"ruleId":"206","severity":1,"message":"207","line":224,"column":33,"nodeType":"208","messageId":"209","endLine":224,"endColumn":36},{"ruleId":"213","severity":1,"message":"214","line":52,"column":31,"nodeType":"215","messageId":"209","endLine":52,"endColumn":33},{"ruleId":"213","severity":1,"message":"214","line":54,"column":40,"nodeType":"215","messageId":"209","endLine":54,"endColumn":42},{"ruleId":"213","severity":1,"message":"214","line":56,"column":42,"nodeType":"215","messageId":"209","endLine":56,"endColumn":44},{"ruleId":"213","severity":1,"message":"214","line":58,"column":29,"nodeType":"215","messageId":"209","endLine":58,"endColumn":31},{"ruleId":"213","severity":1,"message":"214","line":60,"column":35,"nodeType":"215","messageId":"209","endLine":60,"endColumn":37},{"ruleId":"213","severity":1,"message":"214","line":62,"column":32,"nodeType":"215","messageId":"209","endLine":62,"endColumn":34},{"ruleId":"213","severity":1,"message":"214","line":64,"column":33,"nodeType":"215","messageId":"209","endLine":64,"endColumn":35},{"ruleId":"199","severity":1,"message":"200","line":49,"column":8,"nodeType":"201","endLine":49,"endColumn":10,"suggestions":"216"},{"ruleId":"199","severity":1,"message":"217","line":58,"column":8,"nodeType":"201","endLine":58,"endColumn":28,"suggestions":"218"},{"ruleId":"213","severity":1,"message":"214","line":115,"column":51,"nodeType":"215","messageId":"209","endLine":115,"endColumn":53},{"ruleId":"213","severity":1,"message":"214","line":140,"column":60,"nodeType":"215","messageId":"209","endLine":140,"endColumn":62},{"ruleId":"213","severity":1,"message":"219","line":161,"column":98,"nodeType":"215","messageId":"209","endLine":161,"endColumn":100},{"ruleId":"213","severity":1,"message":"214","line":282,"column":37,"nodeType":"215","messageId":"209","endLine":282,"endColumn":39},{"ruleId":"213","severity":1,"message":"214","line":284,"column":43,"nodeType":"215","messageId":"209","endLine":284,"endColumn":45},{"ruleId":"213","severity":1,"message":"214","line":286,"column":40,"nodeType":"215","messageId":"209","endLine":286,"endColumn":42},{"ruleId":"171","severity":1,"message":"220","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},{"ruleId":"171","severity":1,"message":"221","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":17},"no-unused-vars","'aileron_regular' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["222"],"no-negated-in-lhs",["223"],"'combineReducers' is defined but never used.","'createStore' is defined but never used.","'ReactDOM' is defined but never used.","'VictoryChart' is defined but never used.","'VictoryLabel' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'AddMaterials' is defined but never used.","'openAdd' is assigned a value but never used.","'setOpenAdd' is assigned a value but never used.","'setOpenEdit' is assigned a value but never used.","'setRowData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["224"],"'rowData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetProducts'. Either include it or remove the dependency array. If 'onGetProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["225"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setAutoFreeze' is defined but never used.","React Hook useEffect has missing dependencies: 'onGetSales' and 'selectedDate'. Either include them or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["226"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["227"],"React Hook useEffect has a missing dependency: 'activeStep'. Either include it or remove the dependency array.",["228"],"Expected '!==' and instead saw '!='.","'connect' is defined but never used.","'Popover' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"229","fix":"235"},{"desc":"236","fix":"237"},"Update the dependencies array to be: [onGetMaterials]",{"range":"238","text":"239"},"Update the dependencies array to be: [productDelete, productAdd, productEdit, onGetProducts]",{"range":"240","text":"241"},"Update the dependencies array to be: [salesAdd, salesEdit, salesDelete, onGetSales, selectedDate]",{"range":"242","text":"243"},{"range":"244","text":"239"},"Update the dependencies array to be: [activeStep, newReturnedProduct]",{"range":"245","text":"246"},[2618,2620],"[onGetMaterials]",[1546,1586],"[productDelete, productAdd, productEdit, onGetProducts]",[1550,1584],"[salesAdd, salesEdit, salesDelete, onGetSales, selectedDate]",[1905,1907],[2333,2353],"[activeStep, newReturnedProduct]"]