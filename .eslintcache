[{"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/index.js":"1","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/App.js":"2","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/reportWebVitals.js":"3","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/common/redux/store.js":"4","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"5","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"6","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/reducers.js":"7","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"8","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getSales.js":"9","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"10","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/AddSales.jsx":"11","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/actions.js":"12","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/addSale.js":"13"},{"size":828,"mtime":1608673373993,"results":"14","hashOfConfig":"15"},{"size":137,"mtime":1608587676844,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1608587676850,"results":"17","hashOfConfig":"15"},{"size":355,"mtime":1608651310073,"results":"18","hashOfConfig":"15"},{"size":6811,"mtime":1608673373991,"results":"19","hashOfConfig":"15"},{"size":2840,"mtime":1608673373990,"results":"20","hashOfConfig":"15"},{"size":1152,"mtime":1608673373988,"results":"21","hashOfConfig":"15"},{"size":743,"mtime":1608587676849,"results":"22","hashOfConfig":"15"},{"size":722,"mtime":1608651310076,"results":"23","hashOfConfig":"15"},{"size":766,"mtime":1608651310076,"results":"24","hashOfConfig":"15"},{"size":3642,"mtime":1608673373989,"results":"25","hashOfConfig":"15"},{"size":268,"mtime":1608673373987,"results":"26","hashOfConfig":"15"},{"size":1385,"mtime":1608673814487,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n318rg",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/index.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/App.js",[],["59","60"],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/reportWebVitals.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/common/redux/store.js",["61","62"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\n\nconst reducers = {\n    ...materials,\n    ...sales,\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["63","64","65"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Popover from '@material-ui/core/Popover';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, } from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './SalesTable.css'\nimport AddSales from './AddSales'\nimport { GetSales } from '../use-cases/getSales';\nimport { DeleteSale } from '../use-cases/deleteSale';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst SalesTable = ({ onGetSales, sales, onDeleteSale }) => {\n    const classes = useStyles();\n\n    //set date for date-pickers\n    let end_date = new Date()\n    let start_date = new Date().setDate(end_date.getDate() - 30)\n\n    const [selectedDate, setSelectedDate] = useState({ start: start_date, end: end_date });\n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState(sales)\n\n    //get sales from db\n    useEffect(() => {\n        onGetSales()\n        // onGetSalesList()\n    }, [])\n\n    console.log(sales)\n\n    const onGetSalesList = async () => {\n        let response = await fetch('http://localhost:8000/sales/getAllSales')\n        let result = await response.json()\n        setData(result)\n    }\n\n    //changes the start date of the reports\n    const handleStartDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            start: date\n        });\n    };\n\n    //changes the end date of the reports\n    const handleEndDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            end: date\n        });\n    };\n\n    \n        //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Product ID', field: 'product_id', hidden: true },\n        { title: 'Date', field: 'createdAt' },\n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Quantity', field: 'quantity' },\n        { title: 'Price per Unit', field: 'price_per_unit' },\n        { title: 'Total Sales Price', field: 'total_price' },\n        { title: 'Category', field: 'product_category' },\n        { title: 'Purchased By', field: 'sold_to' },     \n    ]\n\n    return (\n        <div className='salesContainer'>\n            <h1>Silverthread Sales </h1>\n            <div className='datePickerContainer'>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify=\"space-around\">\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"start\"\n                            id=\"date-picker-dialog\"\n                            label=\"Start Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.start}\n                            onChange={handleStartDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"end\"\n                            id=\"date-picker-dialog\"\n                            label=\"End Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.end}\n                            onChange={handleEndDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n                <div className={classes.root}>\n                    <Button variant=\"contained\" color=\"secondary\">\n                        Submit\n                </Button>\n                </div>\n            </div>\n\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddSales />\n            </Popover>\n\n            <div className='salesMaterialTable'>\n                <MaterialTable\n                    title=\"Silverthread Sales\"\n                    columns={columns}\n                    data={data}\n                    \n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        addRowPosition: 'first',\n                        exportButton: true,\n                        //export csv is a function we can use to override the generic export and export to excel\n                        // exportCsv\n                        headerStyle: {\n                            backgroundColor: '#78bfb5',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Sale',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {\n                                console.log(rowData)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;                            \n                                    onDeleteSale(id)\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    sales: state.sales.salesList\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetSales: GetSales(dispatch),\n    onDeleteSale: DeleteSale(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["66","67"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport {connect} from \"react-redux\"\nimport './MaterialsTable.css'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\n\nconst MaterialsTable = ({onGetMaterials, materials}) => {\n\n  useEffect(() => {\n    //fetchMaterialsList()\n    onGetMaterials()\n  }, [])\n\n \n\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Name', field: 'name' },\n    { title: 'Description', field: 'description' },\n    { title: 'Price per Unit', field: 'unit_price' },\n    { title: 'Category', field: 'category' },\n  ]\n\n  const [data, setData] = useState([\n    { id: '1', name: 'Jump Ring', description: 'small jump ring', unit_price: '.23', category: 'fasteners' },\n    { id: '2', name: 'Blue Bead', description: 'small blue bead', unit_price: '.84', category: 'bead' },\n    { id: '3', name: 'Leather Chain', description: 'Leather', unit_price: '.3.68', category: 'chain' },\n  ])\n\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <MaterialTable\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={data}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          addRowPosition: 'first',\n          exportButton: true,\n          //export csv is a function we can use to override the generic export and export to excel\n          // exportCsv\n          headerStyle: {\n            backgroundColor: '#78bfb5',\n            color: '#FFFFFF'\n          }\n        }}\n        editable={{\n          onRowAdd: newData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                setData([...data, newData]);\n                resolve();\n              }, 1000)\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n                resolve();\n              }, 1000)\n            }),\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n\n                resolve()\n              }, 1000)\n            }),\n        }}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, { }) => ({\n  materials: state.materials\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/reducers.js",["68"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onGetMaterials,\n    onGetSales,\n    onDeleteSale,\n}from \"./actions\"\n\nexport const materials = createReducer(\n    {\n        materialsList: []\n    },\n    {\n        [onGetMaterials.type]: (state, {payload: material}) => {\n            if (material === null){\n                return state\n            }\n            state.materialsList = material\n        },\n    }\n)\n\nexport const sales = createReducer(\n    {\n       salesList: [],\n       saleID: '' \n    }, \n    {\n        [onGetSales.type]: (state, {payload: sales}) => {\n            if (sales === null) {\n                return state\n            } \n            state.salesList = sales\n        },\n        [onDeleteSale.type]: (state, {payload: saleid}) => {            \n            if (saleid === null) {\n                return state\n            }\n            state.saleID = saleid\n            \n        }\n    }\n)\n\nexport default {materials, sales}","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/AddSales.jsx",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/addSale.js",["69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":10,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"78","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":38},{"ruleId":"79","severity":1,"message":"80","line":41,"column":8,"nodeType":"81","endLine":41,"endColumn":10,"suggestions":"82"},{"ruleId":"74","severity":1,"message":"83","line":45,"column":11,"nodeType":"76","messageId":"77","endLine":45,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":186,"column":33,"nodeType":"86","messageId":"87","endLine":186,"endColumn":36},{"ruleId":"79","severity":1,"message":"88","line":12,"column":6,"nodeType":"81","endLine":12,"endColumn":8,"suggestions":"89"},{"ruleId":"84","severity":1,"message":"85","line":86,"column":33,"nodeType":"86","messageId":"87","endLine":86,"endColumn":36},{"ruleId":"90","severity":1,"message":"91","line":51,"column":1,"nodeType":"92","endLine":51,"endColumn":34},{"ruleId":"74","severity":1,"message":"93","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":17},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onGetSales'. Either include it or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["96"],"'onGetSalesList' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["97"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Popover' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [onGetSales]",{"range":"102","text":"103"},"Update the dependencies array to be: [onGetMaterials]",{"range":"104","text":"105"},[1281,1283],"[onGetSales]",[345,347],"[onGetMaterials]"]