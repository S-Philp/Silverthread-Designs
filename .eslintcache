[{"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js":"1","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js":"2","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js":"3","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js":"4","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx":"5","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx":"6","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx":"7","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js":"8","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"9","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"10","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx":"11","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"12","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js":"13","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"14","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js":"15","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddMaterials.jsx":"16","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditMaterials.jsx":"17","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editMaterial.js":"18","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterial.js":"19","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js":"20","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx":"21","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx":"22","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js":"23","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js":"24"},{"size":1383,"mtime":1608749594604,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1608663578970,"results":"27","hashOfConfig":"26"},{"size":2852,"mtime":1608740056380,"results":"28","hashOfConfig":"26"},{"size":355,"mtime":1608663578967,"results":"29","hashOfConfig":"26"},{"size":3673,"mtime":1608749594602,"results":"30","hashOfConfig":"26"},{"size":7440,"mtime":1608755946159,"results":"31","hashOfConfig":"26"},{"size":152,"mtime":1608739380700,"results":"32","hashOfConfig":"26"},{"size":2440,"mtime":1608749594601,"results":"33","hashOfConfig":"26"},{"size":7900,"mtime":1608749594602,"results":"34","hashOfConfig":"26"},{"size":3834,"mtime":1608749594602,"results":"35","hashOfConfig":"26"},{"size":167,"mtime":1608663578968,"results":"36","hashOfConfig":"26"},{"size":817,"mtime":1608749319126,"results":"37","hashOfConfig":"26"},{"size":502,"mtime":1608749594600,"results":"38","hashOfConfig":"26"},{"size":743,"mtime":1608663578969,"results":"39","hashOfConfig":"26"},{"size":821,"mtime":1608749594603,"results":"40","hashOfConfig":"26"},{"size":3216,"mtime":1608749705224,"results":"41","hashOfConfig":"26"},{"size":3262,"mtime":1608749769604,"results":"42","hashOfConfig":"26"},{"size":781,"mtime":1608749594603,"results":"43","hashOfConfig":"26"},{"size":836,"mtime":1608749594603,"results":"44","hashOfConfig":"26"},{"size":722,"mtime":1608663578969,"results":"45","hashOfConfig":"26"},{"size":4421,"mtime":1608749797533,"results":"46","hashOfConfig":"26"},{"size":3672,"mtime":1608749319124,"results":"47","hashOfConfig":"26"},{"size":777,"mtime":1608678547444,"results":"48","hashOfConfig":"26"},{"size":1385,"mtime":1608678547444,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1hi2d1u",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js",[],["105","106"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js",["107","108"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\n\nconst reducers = {\n    ...materials,\n    ...sales,\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx",["109","110","111","112"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\n\nimport Popover from '@material-ui/core/Popover';\nimport AddProducts from './AddProducts'\n\n\n\nconst ProductsTable = ({  }) => {\n      \n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState([])\n\n    //get products from db\n    useEffect(() => {\n \n    }, [])\n\n    \n        //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'labor', field: 'labor', hidden: true },       \n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Materials', field: '' },       \n        { title: 'Wholesale Price', field: 'wholesale' },\n        { title: 'Retail Price', field: 'retail_price' },\n        { title: 'Category', field: '' },\n        { title: 'Inventory', field: 'quantity' },    \n    ]\n\n    return (\n        <div className='productsContainer'>\n            <h1>Silverthread Products </h1>\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddProducts />\n            </Popover>\n\n            <div className='productsMaterialTable'>\n                <MaterialTable\n                style={{backgroundColor:'#FFFFFF'}}\n                    title=\"Silverthread Products\"\n                    columns={columns}\n                    data={data}\n                    \n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        addRowPosition: 'first',\n                        exportButton: true,\n                        //export csv is a function we can use to override the generic export and export to excel\n                        // exportCsv\n                        headerStyle: {\n                            backgroundColor: '#f06292',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Product',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {\n                                console.log(rowData)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;                            \n                                    // put delete fuction here\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  \n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx",["113","114","115","116","117"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js",["118"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onGetMaterials,\n    onAddMaterial,\n    onDeleteMaterial,\n    onEditMaterial,\n    onGetSales,\n    onDeleteSale,\n    onAddSale,\n    onEditSale,\n   \n}from \"./actions\"\n\nexport const materials = createReducer(\n    {\n        materialsList: [],\n        materialID: '',\n        materialAdd: '',\n        materialEdit: '',\n    },\n    {\n        [onGetMaterials.type]: (state, {payload: material}) => {\n            if (material === null){\n                return state\n            }\n            state.materialsList = material\n        },\n        [onDeleteMaterial.type]: (state, {payload: materialid}) => {\n            if (materialid === null) {\n                console.log('null')\n                return state\n            }\n            console.log(materialid)\n            state.materialID = materialid\n        },\n        [onAddMaterial.type]: (state, {payload: materialDetails }) => {\n            if (materialDetails === null) {\n                return state\n            }\n            state.materialAdd = materialDetails\n        },\n        [onEditMaterial.type]: (state, {payload: materialEdits}) => {\n            if (materialEdits ===  null) {\n                return state\n            }\n            state.materialEdit = materialEdits\n        }\n    }\n)\n\nexport const sales = createReducer(\n    {\n       salesList: [],\n       saleID: '',      \n       saleEdits: {} \n    }, \n    {\n        [onGetSales.type]: (state, {payload: salesList}) => {\n            if (sales === null) {\n                return state\n            } \n            /*    sales.forEach((sale) => {\n                state.byId[sale.id] = sale\n            })*/\n            return {...state.salesList, salesList}\n        },\n        [onDeleteSale.type]: (state, {payload: saleid}) => {            \n            if (saleid === null) {\n                console.log(null)\n                return state\n            }\n            console.log(saleid)\n            state.saleID = saleid   \n        },\n        [onAddSale.type]: (state, {payload:newSaleId}) => {\n            if(newSaleId === null){\n                return state\n            }\n            state.newSaleId = newSaleId\n        },          \n        [onEditSale.type]: (state, {payload: saleDetails}) => {\n            if (saleDetails === null) {\n                return state\n            }\n            state.saleEdits = saleDetails\n        }\n    }\n)\n\nexport default {materials, sales}","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["119","120","121","122","123"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport { setAutoFreeze } from 'immer'\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Popover from '@material-ui/core/Popover';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, } from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './SalesTable.css'\nimport AddSales from './AddSales'\nimport EditSales from './EditSales'\nimport { GetSales } from '../use-cases/getSales';\nimport { DeleteSale } from '../use-cases/deleteSale';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst SalesTable = ({ onGetSales, sales, onDeleteSale, salesAdd, salesEdit, salesDelete, }) => {\n    const classes = useStyles();\n \n    //set date for date-pickers\n    let end_date = new Date()\n    let start_date = new Date().setDate(end_date.getDate() - 30)\n\n    const [selectedDate, setSelectedDate] = useState({ start: start_date, end: end_date });\n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState(sales)\n    const [openEdit, setOpenEdit] = useState(false)\n    const [rowData, setRowData] = useState()\n\n    var tableData\n\n    //get sales from db\n    useEffect(() => {\n        console.log('fired')\n        onGetSales()       \n    }, [salesAdd, salesEdit, salesDelete])\n\n    tableData = sales.map(data => ({\n        ...data\n    }))\n\n    //changes the start date of the reports\n    const handleStartDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            start: date\n        });\n    };\n\n    //changes the end date of the reports\n    const handleEndDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            end: date\n        });\n    };\n\n\n    //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Product ID', field: 'product_id', hidden: true },\n        { title: 'Date', field: 'createdAt' },\n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Quantity', field: 'quantity' },\n        { title: 'Price per Unit', field: 'price_per_unit' },\n        { title: 'Total Sales Price', field: 'total_price' },\n        { title: 'Category', field: 'product_category' },\n        { title: 'Purchased By', field: 'sold_to' },\n    ]\n\n    return (\n        <div className='salesContainer'>\n            <h1>Silverthread Sales </h1>\n            <div className='datePickerContainer'>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify=\"space-around\" style={{backgroundColor:'#FFFFFF'}}>\n                        <KeyboardDatePicker\n                            style={{backgroundColor:'#FFFFFF'}}\n                            margin=\"normal\"\n                            name=\"start\"\n                            id=\"date-picker-dialog\"\n                            label=\"Start Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.start}\n                            onChange={handleStartDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"end\"\n                            id=\"date-picker-dialog\"\n                            label=\"End Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.end}\n                            onChange={handleEndDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n                <div className={classes.root} style={{backgroundColor:'#FFFFFF'}}>\n                    <Button variant=\"contained\" color=\"secondary\">\n                        Submit\n                </Button>\n                </div>\n            </div>\n\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddSales />\n            </Popover>\n\n            {sales === [] ?\n                <div>Loading Data....</div>\n                :\n                <div className='salesMaterialTable'>\n                    <MaterialTable\n                        style={{backgroundColor:'#FFFFFF'}}\n                        title=\"Silverthread Sales\"\n                        columns={columns}\n                        data={tableData}\n\n                        options={{\n                            search: false,\n                            showTitle: false,\n                            filtering: true,\n                            addRowPosition: 'first',\n                            exportButton: true,\n                            //export csv is a function we can use to override the generic export and export to excel\n                            // exportCsv\n                            headerStyle: {\n                                backgroundColor: '#b71c1c',\n                                color: '#FFFFFF'\n                            },\n                        }}\n                        actions={[\n                            {\n                                icon: 'add',\n                                tooltip: 'Add Sale',\n                                isFreeAction: true,\n                                onClick: (event) => setOpen(true)\n                            },\n                            {\n                                icon: 'edit',\n                                tooltip: 'Edit Row',\n                                onClick: (event, rowData) => {\n                                    setRowData(rowData)\n                                    setOpenEdit(true)\n                                    console.log(rowData)\n                                }\n                            },\n                        ]}\n                        editable={{\n                            onRowDelete: oldData =>\n                                new Promise((resolve, reject) => {\n                                    setTimeout(() => {\n                                        const id = oldData.id;\n                                        onDeleteSale(id)\n                                        resolve()\n                                    }, 1000)\n                                }),\n                        }}\n                    />\n                </div>}\n        {/* </div> */}\n        <Popover\n            open={openEdit}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <EditSales saleData={rowData} />\n        </Popover>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    sales: state.sales.salesList,\n    salesAdd: state.sales.newSaleId,\n    salesEdit: state.sales.saleEdits,\n    salesDelete: state.sales.saleID,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetSales: GetSales(dispatch),\n    onDeleteSale: DeleteSale(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["124"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\"\nimport './MaterialsTable.css'\nimport AddMaterials from './AddMaterials'\nimport EditMaterials from './EditMaterials'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { DeleteMaterial } from \"../use-cases/deleteMaterial\"\nimport Popover from '@material-ui/core/Popover';\n\nconst MaterialsTable = ({ onGetMaterials, materials, onDeleteMaterial,  materialsDelete, materialsAdd, materialsEdit }) => {\n\n  const [openAdd, setOpenAdd] = useState(false)\n  const [openEdit, setOpenEdit] = useState(false)\n  const [rowData, setRowData] = useState()\n  \n\n  useEffect(() => {  \n    onGetMaterials()\n  }, [materialsDelete, materialsAdd, materialsEdit])\n\n  let tableData = materials.map(data => ({\n    ...data\n}))\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Name', field: 'material_name' },\n    { title: 'Unit', field: 'unit' },\n    { title: 'Price per Unit', field: 'unit_price' },\n    { title: 'Category', field: 'category' },\n    { title: 'Vendor', field: 'vendor' },\n    { title: 'Product Number', field: 'vendor_material_id' },\n  ]\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <Popover\n                open={openAdd}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddMaterials />\n            </Popover>\n\n            <Popover\n            open={openEdit}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <EditMaterials materialData={rowData} />\n        </Popover>\n\n      <MaterialTable\n        style={{backgroundColor:'#FFFFFF'}}\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={tableData}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          addRowPosition: 'first',\n          exportButton: true,\n          //export csv is a function we can use to override the generic export and export to excel\n          // exportCsv\n          headerStyle: {\n            backgroundColor: '#01579b',\n            // backgroundColor: '#78bfb5',\n            color: '#FFFFFF'\n          }\n        }}\n        actions={[\n          {\n              icon: 'add',\n              tooltip: 'Add Sale',\n              isFreeAction: true,\n              onClick: (event) => setOpenAdd(true)\n          },\n          {\n              icon: 'edit',\n              tooltip: 'Edit Row',\n              onClick: (event, rowData) => {\n                  setRowData(rowData)\n                  setOpenEdit(true)\n              }\n          },\n      ]}\n        editable={{        \n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const id = oldData.id;\n                onDeleteMaterial(id)\n                resolve()\n              }, 1000)\n            }),\n        }}\n\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, {materials}) => ({\n  materials: state.materials.materialsList,\n  materialsDelete: state.materials.materialID,\n  materialsAdd: state.materials.materialAdd,\n  materialsEdit: state.materials.materialEdit\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch),\n  onDeleteMaterial: DeleteMaterial(dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddMaterials.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditMaterials.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js",["125"],"import { onAddSale } from \"../framework/actions\"\nimport { Popover } from '@material-ui/core';\n\n//This is a usecase for getting the list of sales\nexport const AddSale = (dispatch) => async (fields) => {\n   const newSale = {\n     /*  product_id: product_id \n     ^ gets product id from a fetch call to the products table route*/\n      product_number: fields.product_number,\n      product_name: fields.product_name,\n      product_category: fields.product_category,\n      price_per_unit: fields.price_per_unit,\n      quantity: fields.quantity,\n      total_price: fields.total_price,\n      sold_to: fields.sold_to,\n   }\n   console.log(\"NEW SALE UNDER THIS\")\n   console.log(newSale)\n\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   try {\n      const response = await fetch(`http://localhost:8000/sales/addNewSale`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(newSale),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onAddSale(success))\n   } catch (e) {\n      console.log(\"CAUGHT ERROR IN PROMISE\")\n   }\n}\n\nexport default AddSale\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":10,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"134","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":38},{"ruleId":"135","severity":1,"message":"136","line":10,"column":24,"nodeType":"137","messageId":"138","endLine":10,"endColumn":28},{"ruleId":"130","severity":1,"message":"139","line":13,"column":18,"nodeType":"132","messageId":"133","endLine":13,"endColumn":25},{"ruleId":"130","severity":1,"message":"140","line":90,"column":43,"nodeType":"132","messageId":"133","endLine":90,"endColumn":45},{"ruleId":"135","severity":1,"message":"136","line":102,"column":33,"nodeType":"137","messageId":"138","endLine":102,"endColumn":36},{"ruleId":"130","severity":1,"message":"141","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"142","line":3,"column":22,"nodeType":"132","messageId":"133","endLine":3,"endColumn":34},{"ruleId":"130","severity":1,"message":"143","line":3,"column":51,"nodeType":"132","messageId":"133","endLine":3,"endColumn":63},{"ruleId":"144","severity":1,"message":"145","line":62,"column":13,"nodeType":"146","messageId":"147","endLine":74,"endColumn":7},{"ruleId":"148","severity":1,"message":"149","line":62,"column":13,"nodeType":"146","messageId":"150","endLine":74,"endColumn":7},{"ruleId":"151","severity":1,"message":"152","line":91,"column":1,"nodeType":"153","endLine":91,"endColumn":34},{"ruleId":"130","severity":1,"message":"154","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":23},{"ruleId":"130","severity":1,"message":"155","line":37,"column":12,"nodeType":"132","messageId":"133","endLine":37,"endColumn":16},{"ruleId":"130","severity":1,"message":"139","line":37,"column":18,"nodeType":"132","messageId":"133","endLine":37,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":47,"column":8,"nodeType":"158","endLine":47,"endColumn":42,"suggestions":"159"},{"ruleId":"135","severity":1,"message":"136","line":209,"column":33,"nodeType":"137","messageId":"138","endLine":209,"endColumn":36},{"ruleId":"156","severity":1,"message":"160","line":20,"column":6,"nodeType":"158","endLine":20,"endColumn":52,"suggestions":"161"},{"ruleId":"130","severity":1,"message":"162","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":17},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setData' is assigned a value but never used.","'id' is assigned a value but never used.","'ReactDOM' is defined but never used.","'VictoryChart' is defined but never used.","'VictoryLabel' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'setAutoFreeze' is defined but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onGetSales'. Either include it or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["165"],"React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["166"],"'Popover' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [salesAdd, salesEdit, salesDelete, onGetSales]",{"range":"171","text":"172"},"Update the dependencies array to be: [materialsDelete, materialsAdd, materialsEdit, onGetMaterials]",{"range":"173","text":"174"},[1515,1549],"[salesAdd, salesEdit, salesDelete, onGetSales]",[730,776],"[materialsDelete, materialsAdd, materialsEdit, onGetMaterials]"]