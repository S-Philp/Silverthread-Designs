[{"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/index.js":"1","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/App.js":"2","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/reportWebVitals.js":"3","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/common/redux/store.js":"4","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"5","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"6","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/reducers.js":"7","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"8","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getSales.js":"9","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"10","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/AddSales.jsx":"11","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/actions.js":"12","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/ProductsTable.jsx":"13","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/login/ui/login.jsx":"14","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js":"15","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/AddProducts.jsx":"16","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/addSale.js":"17"},{"size":935,"mtime":1608674261699,"results":"18","hashOfConfig":"19"},{"size":3619,"mtime":1608674261695,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1608587676850,"results":"21","hashOfConfig":"19"},{"size":355,"mtime":1608651310073,"results":"22","hashOfConfig":"19"},{"size":7269,"mtime":1608674261697,"results":"23","hashOfConfig":"19"},{"size":2925,"mtime":1608674261696,"results":"24","hashOfConfig":"19"},{"size":1533,"mtime":1608674307754,"results":"25","hashOfConfig":"19"},{"size":743,"mtime":1608587676849,"results":"26","hashOfConfig":"19"},{"size":722,"mtime":1608651310076,"results":"27","hashOfConfig":"19"},{"size":766,"mtime":1608651310076,"results":"28","hashOfConfig":"19"},{"size":3642,"mtime":1608674307756,"results":"29","hashOfConfig":"19"},{"size":331,"mtime":1608674307753,"results":"30","hashOfConfig":"19"},{"size":3621,"mtime":1608674261696,"results":"31","hashOfConfig":"19"},{"size":1496,"mtime":1608674261700,"results":"32","hashOfConfig":"19"},{"size":796,"mtime":1608674261698,"results":"33","hashOfConfig":"19"},{"size":167,"mtime":1608674261695,"results":"34","hashOfConfig":"19"},{"size":1385,"mtime":1608674307758,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n318rg",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/index.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/App.js",[],["77","78"],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/reportWebVitals.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/common/redux/store.js",["79","80"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\n\nconst reducers = {\n    ...materials,\n    ...sales,\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["81","82","83"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Popover from '@material-ui/core/Popover';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, } from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './SalesTable.css'\nimport AddSales from './AddSales'\nimport { GetSales } from '../use-cases/getSales';\nimport { DeleteSale } from '../use-cases/deleteSale';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst SalesTable = ({ onGetSales, sales, onDeleteSale }) => {\n    const classes = useStyles();\n\n    //set date for date-pickers\n    let end_date = new Date()\n    let start_date = new Date().setDate(end_date.getDate() - 30)\n\n    const [selectedDate, setSelectedDate] = useState({ start: start_date, end: end_date });\n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState(sales)\n\n    //get sales from db\n    useEffect(() => {\n        onGetSales()\n        // onGetSalesList()\n    }, [])\n\n    console.log(sales)\n\n    const onGetSalesList = async () => {\n        let response = await fetch('http://localhost:8000/sales/getAllSales')\n        let result = await response.json()\n        setData(result)\n    }\n\n    //changes the start date of the reports\n    const handleStartDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            start: date\n        });\n    };\n\n    //changes the end date of the reports\n    const handleEndDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            end: date\n        });\n    };\n\n    \n        //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Product ID', field: 'product_id', hidden: true },\n        { title: 'Date', field: 'createdAt' },\n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Quantity', field: 'quantity' },\n        { title: 'Price per Unit', field: 'price_per_unit' },\n        { title: 'Total Sales Price', field: 'total_price' },\n        { title: 'Category', field: 'product_category' },\n        { title: 'Purchased By', field: 'sold_to' },     \n    ]\n\n    return (\n        <div className='salesContainer'>\n            <h1>Silverthread Sales </h1>\n            <div className='datePickerContainer'>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify=\"space-around\">\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"start\"\n                            id=\"date-picker-dialog\"\n                            label=\"Start Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.start}\n                            onChange={handleStartDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"end\"\n                            id=\"date-picker-dialog\"\n                            label=\"End Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.end}\n                            onChange={handleEndDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n                <div className={classes.root}>\n                    <Button variant=\"contained\" color=\"secondary\">\n                        Submit\n                </Button>\n                </div>\n            </div>\n\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddSales />\n            </Popover>\n\n            <div className='salesMaterialTable'>\n                <MaterialTable\n                    title=\"Silverthread Sales\"\n                    columns={columns}\n                    data={data}\n                    \n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        addRowPosition: 'first',\n                        exportButton: true,\n                        //export csv is a function we can use to override the generic export and export to excel\n                        // exportCsv\n                        headerStyle: {\n                            backgroundColor: '#78bfb5',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Sale',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {\n                                console.log(rowData)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;                            \n                                    onDeleteSale(id)\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    sales: state.sales.salesList\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetSales: GetSales(dispatch),\n    onDeleteSale: DeleteSale(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["84","85"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport {connect} from \"react-redux\"\nimport './MaterialsTable.css'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\n\nconst MaterialsTable = ({onGetMaterials, materials}) => {\n\n  useEffect(() => {\n    //fetchMaterialsList()\n    onGetMaterials()\n  }, [])\n\n \n\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Name', field: 'name' },\n    { title: 'Description', field: 'description' },\n    { title: 'Price per Unit', field: 'unit_price' },\n    { title: 'Category', field: 'category' },\n  ]\n\n  const [data, setData] = useState([\n    { id: '1', name: 'Jump Ring', description: 'small jump ring', unit_price: '.23', category: 'fasteners' },\n    { id: '2', name: 'Blue Bead', description: 'small blue bead', unit_price: '.84', category: 'bead' },\n    { id: '3', name: 'Leather Chain', description: 'Leather', unit_price: '.3.68', category: 'chain' },\n  ])\n\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <MaterialTable\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={data}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          addRowPosition: 'first',\n          exportButton: true,\n          //export csv is a function we can use to override the generic export and export to excel\n          // exportCsv\n          headerStyle: {\n            backgroundColor: '#78bfb5',\n            color: '#FFFFFF'\n          }\n        }}\n        editable={{\n          onRowAdd: newData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                setData([...data, newData]);\n                resolve();\n              }, 1000)\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n                resolve();\n              }, 1000)\n            }),\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n\n                resolve()\n              }, 1000)\n            }),\n        }}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, { }) => ({\n  materials: state.materials\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/reducers.js",["86"],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/AddSales.jsx",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/ProductsTable.jsx",["87","88","89","90"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\n\nimport Popover from '@material-ui/core/Popover';\nimport AddProducts from './AddProducts'\n\n\n\nconst ProductsTable = ({  }) => {\n      \n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState([])\n\n    //get products from db\n    useEffect(() => {\n \n    }, [])\n\n    \n        //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'labor', field: 'labor', hidden: true },       \n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Materials', field: '' },       \n        { title: 'Wholesale Price', field: 'wholesale' },\n        { title: 'Retail Price', field: 'retail_price' },\n        { title: 'Category', field: '' },\n        { title: 'Inventory', field: 'quantity' },    \n    ]\n\n    return (\n        <div className='productsContainer'>\n            <h1>Silverthread Products </h1>\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddProducts />\n            </Popover>\n\n            <div className='productsMaterialTable'>\n                <MaterialTable\n                    title=\"Silverthread Products\"\n                    columns={columns}\n                    data={data}\n                    \n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        addRowPosition: 'first',\n                        exportButton: true,\n                        //export csv is a function we can use to override the generic export and export to excel\n                        // exportCsv\n                        headerStyle: {\n                            backgroundColor: '#78bfb5',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Product',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {\n                                console.log(rowData)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;                            \n                                    // put delete fuction here\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  \n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsTable)","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/login/ui/login.jsx",["91"],"import React, { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\n\nimport \"./login.css\"\n\nconst Login = () => {\n\n    const [fields, setFields] = useState({})\n\n    const setField = (evt) => {\n        setFields({\n            ...fields,\n            [evt.target.name]: evt.target.value\n        })\n    }\n    console.log(fields)\n    return (\n        <div className=\"login-component\">\n            <div className=\"left-container\">\n                <h2 className=\"blurb\">A Data Managment User Interface for Silver Thread Designs</h2>\n                <h2 className=\"blurb\">Handle your business logic via linked tables and graphical interfaces</h2>\n            </div>\n\n            <div className=\"login-container\">\n                <h2 className = \"login-blurb\">See Your Business Data Now</h2>\n                <div className=\"login-box\">\n                    <div className=\"login-input\"><TextField id=\"outlined-basic\" label=\"Username\" variant=\"outlined\" name = \"name\" onChange = {setField}/></div>\n                    <div className=\"login-input\"><TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" name = \"password\" onChange = {setField}/></div>\n                    <div className = \"button-container\">\n                        <Button className =\"login-button\"variant=\"outlined\">Login</Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login","/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/ui/AddProducts.jsx",[],"/Users/chapmanchappelle/Desktop/repos/silverthread/silver-thread-client/src/data-tables/use-cases/addSale.js",["92"],"import { onAddSale } from \"../framework/actions\"\nimport { Popover } from '@material-ui/core';\n\n//This is a usecase for getting the list of sales\nexport const AddSale = (dispatch) => async (fields) => {\n   const newSale = {\n     /*  product_id: product_id \n     ^ gets product id from a fetch call to the products table route*/\n      product_number: fields.product_number,\n      product_name: fields.product_name,\n      product_category: fields.product_category,\n      price_per_unit: fields.price_per_unit,\n      quantity: fields.quantity,\n      total_price: fields.total_price,\n      sold_to: fields.sold_to,\n   }\n   console.log(\"NEW SALE UNDER THIS\")\n   console.log(newSale)\n\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   try {\n      const response = await fetch(`http://localhost:8000/sales/addNewSale`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(newSale),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onAddSale(success))\n   } catch (e) {\n      console.log(\"CAUGHT ERROR IN PROMISE\")\n   }\n}\n\nexport default AddSale\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":10,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"101","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":38},{"ruleId":"102","severity":1,"message":"103","line":41,"column":8,"nodeType":"104","endLine":41,"endColumn":10,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"106","line":45,"column":11,"nodeType":"99","messageId":"100","endLine":45,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":186,"column":33,"nodeType":"109","messageId":"110","endLine":186,"endColumn":36},{"ruleId":"102","severity":1,"message":"111","line":12,"column":6,"nodeType":"104","endLine":12,"endColumn":8,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"108","line":86,"column":33,"nodeType":"109","messageId":"110","endLine":86,"endColumn":36},{"ruleId":"113","severity":1,"message":"114","line":62,"column":1,"nodeType":"115","endLine":62,"endColumn":34},{"ruleId":"107","severity":1,"message":"108","line":10,"column":24,"nodeType":"109","messageId":"110","endLine":10,"endColumn":28},{"ruleId":"97","severity":1,"message":"116","line":13,"column":18,"nodeType":"99","messageId":"100","endLine":13,"endColumn":25},{"ruleId":"97","severity":1,"message":"117","line":89,"column":43,"nodeType":"99","messageId":"100","endLine":89,"endColumn":45},{"ruleId":"107","severity":1,"message":"108","line":101,"column":33,"nodeType":"109","messageId":"110","endLine":101,"endColumn":36},{"ruleId":"97","severity":1,"message":"118","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"119","line":2,"column":10,"nodeType":"99","messageId":"100","endLine":2,"endColumn":17},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onGetSales'. Either include it or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["122"],"'onGetSalesList' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["123"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'setData' is assigned a value but never used.","'id' is assigned a value but never used.","'useEffect' is defined but never used.","'Popover' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [onGetSales]",{"range":"128","text":"129"},"Update the dependencies array to be: [onGetMaterials]",{"range":"130","text":"131"},[1281,1283],"[onGetSales]",[345,347],"[onGetMaterials]"]