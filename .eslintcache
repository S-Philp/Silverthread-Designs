[{"/Users/luigisiopongco/silver-thread-client/src/index.js":"1","/Users/luigisiopongco/silver-thread-client/src/reportWebVitals.js":"2","/Users/luigisiopongco/silver-thread-client/src/common/redux/store.js":"3","/Users/luigisiopongco/silver-thread-client/src/App.js":"4","/Users/luigisiopongco/silver-thread-client/src/login/ui/register.jsx":"5","/Users/luigisiopongco/silver-thread-client/src/login/ui/login.jsx":"6","/Users/luigisiopongco/silver-thread-client/src/login/frameworks/reducers.js":"7","/Users/luigisiopongco/silver-thread-client/src/login/use-cases/UserSignOut.js":"8","/Users/luigisiopongco/silver-thread-client/src/login/use-cases/UserRegister.js":"9","/Users/luigisiopongco/silver-thread-client/src/login/use-cases/UserLogin.js":"10","/Users/luigisiopongco/silver-thread-client/src/login/frameworks/actions.js":"11","/Users/luigisiopongco/silver-thread-client/src/data-tables/framework/reducers.js":"12","/Users/luigisiopongco/silver-thread-client/src/login/use-cases/CheckUser.js":"13","/Users/luigisiopongco/silver-thread-client/src/login/ui/logout.jsx":"14","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"15","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/ProductsTable.jsx":"16","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"17","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/Dashboard.jsx":"18","/Users/luigisiopongco/silver-thread-client/src/data-tables/framework/actions.js":"19","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addMaterial.js":"20","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"21","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/exelSalesReports.js":"22","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getSales.js":"23","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/EditSales.jsx":"24","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/AddSales.jsx":"25","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/PieChart2.jsx":"26","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/LineGraph.jsx":"27","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/BarChart2.jsx":"28","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addSale.js":"29","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getProducts.js":"30","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editSale.js":"31","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/excelProductsReports.js":"32","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteProduct.js":"33","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js":"34","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"35","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/excelMaterialsReports.js":"36","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/BarChart.jsx":"37","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/PieChart.jsx":"38","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/EditProduct.jsx":"39","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/AddProducts.jsx":"40","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/EditMaterials.jsx":"41","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/AddMaterials.jsx":"42","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editProduct.js":"43","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editMaterial.js":"44","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addProduct.js":"45","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteMaterialItem.js":"46","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editWholesale.js":"47","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getProductByID.js":"48","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addMaterialItem.js":"49"},{"size":2287,"mtime":1609856275210,"results":"50","hashOfConfig":"51"},{"size":362,"mtime":1608219268287,"results":"52","hashOfConfig":"51"},{"size":498,"mtime":1609856275179,"results":"53","hashOfConfig":"51"},{"size":3155,"mtime":1609859226037,"results":"54","hashOfConfig":"51"},{"size":2480,"mtime":1609856275212,"results":"55","hashOfConfig":"51"},{"size":2554,"mtime":1609859226054,"results":"56","hashOfConfig":"51"},{"size":693,"mtime":1609856275211,"results":"57","hashOfConfig":"51"},{"size":437,"mtime":1609856275215,"results":"58","hashOfConfig":"51"},{"size":740,"mtime":1609856275214,"results":"59","hashOfConfig":"51"},{"size":1044,"mtime":1609856275213,"results":"60","hashOfConfig":"51"},{"size":265,"mtime":1609856275211,"results":"61","hashOfConfig":"51"},{"size":5423,"mtime":1609859226053,"results":"62","hashOfConfig":"51"},{"size":815,"mtime":1609856275213,"results":"63","hashOfConfig":"51"},{"size":152,"mtime":1609039925495,"results":"64","hashOfConfig":"51"},{"size":5070,"mtime":1609856275198,"results":"65","hashOfConfig":"51"},{"size":6182,"mtime":1609856275199,"results":"66","hashOfConfig":"51"},{"size":10546,"mtime":1609856275200,"results":"67","hashOfConfig":"51"},{"size":1947,"mtime":1609859226042,"results":"68","hashOfConfig":"51"},{"size":1131,"mtime":1609856275179,"results":"69","hashOfConfig":"51"},{"size":815,"mtime":1609856275201,"results":"70","hashOfConfig":"51"},{"size":817,"mtime":1609039925494,"results":"71","hashOfConfig":"51"},{"size":1298,"mtime":1609856275204,"results":"72","hashOfConfig":"51"},{"size":763,"mtime":1609856275205,"results":"73","hashOfConfig":"51"},{"size":6204,"mtime":1609856275197,"results":"74","hashOfConfig":"51"},{"size":7197,"mtime":1609856275194,"results":"75","hashOfConfig":"51"},{"size":2741,"mtime":1609861339181,"results":"76","hashOfConfig":"51"},{"size":1767,"mtime":1609859226044,"results":"77","hashOfConfig":"51"},{"size":3162,"mtime":1609859226040,"results":"78","hashOfConfig":"51"},{"size":1526,"mtime":1609856275202,"results":"79","hashOfConfig":"51"},{"size":734,"mtime":1609856275204,"results":"80","hashOfConfig":"51"},{"size":777,"mtime":1609039925494,"results":"81","hashOfConfig":"51"},{"size":1103,"mtime":1609856275203,"results":"82","hashOfConfig":"51"},{"size":803,"mtime":1609856275203,"results":"83","hashOfConfig":"51"},{"size":798,"mtime":1609856275202,"results":"84","hashOfConfig":"51"},{"size":743,"mtime":1608582738333,"results":"85","hashOfConfig":"51"},{"size":983,"mtime":1609856275203,"results":"86","hashOfConfig":"51"},{"size":1568,"mtime":1609859226039,"results":"87","hashOfConfig":"51"},{"size":8589,"mtime":1609859226048,"results":"88","hashOfConfig":"51"},{"size":13186,"mtime":1609856275196,"results":"89","hashOfConfig":"51"},{"size":18207,"mtime":1609856275192,"results":"90","hashOfConfig":"51"},{"size":3355,"mtime":1609856275195,"results":"91","hashOfConfig":"51"},{"size":4325,"mtime":1609856275191,"results":"92","hashOfConfig":"51"},{"size":792,"mtime":1609856275203,"results":"93","hashOfConfig":"51"},{"size":781,"mtime":1609856275203,"results":"94","hashOfConfig":"51"},{"size":767,"mtime":1609856275202,"results":"95","hashOfConfig":"51"},{"size":496,"mtime":1609856275202,"results":"96","hashOfConfig":"51"},{"size":798,"mtime":1609856275203,"results":"97","hashOfConfig":"51"},{"size":718,"mtime":1609856275204,"results":"98","hashOfConfig":"51"},{"size":524,"mtime":1609856275201,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"10v85pm",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"/Users/luigisiopongco/silver-thread-client/src/index.js",[],["211","212"],"/Users/luigisiopongco/silver-thread-client/src/reportWebVitals.js",[],"/Users/luigisiopongco/silver-thread-client/src/common/redux/store.js",["213","214"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\nimport products from \"../../data-tables/framework/reducers\"\nimport login from \"../../login/frameworks/reducers\"\n\nconst reducers = {\n    ...materials,\n    ...sales,\n    ...products,\n    ...login,\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/luigisiopongco/silver-thread-client/src/App.js",["215","216"],"/Users/luigisiopongco/silver-thread-client/src/login/ui/register.jsx",["217","218","219"],"import React, { useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\"\nimport { NavLink } from \"react-router-dom\"\n\n\n\nimport \"./login.css\"\nimport { onLogin } from '../frameworks/actions';\nimport { UserLogin } from '../use-cases/UserLogin'\nimport { UserRegister } from '../use-cases/UserRegister'\n\nconst Register = ({onRegister}) => {\n\n    const [fields, setFields] = useState({})\n\n    const setField = (evt) => {\n        setFields({\n            ...fields,\n            [evt.target.name]: evt.target.value\n        })\n    }\n    console.log(fields)\n    return (\n        <div className=\"login-component\">\n            <div className=\"left-container\">\n                <h2 className=\"blurb\">A Data Managment User Interface for Silver Thread Designs</h2>\n                <h2 className=\"blurb\">Handle your business logic via linked tables and graphical interfaces</h2>\n            </div>\n\n            <div className=\"login-container\">\n                <h2 className = \"login-blurb\">Register Here</h2>\n                <div className=\"login-box\">\n                    <div className=\"login-input\"><TextField id=\"outlined-basic\" label=\"First Name\" variant=\"outlined\" name = \"firstname\" onChange = {setField}/></div>\n                    <div className=\"login-input\"><TextField id=\"outlined-basic\" label=\"Last Name\" variant=\"outlined\" name = \"lastname\" onChange = {setField}/></div>\n                    <div className=\"login-input\"><TextField id=\"outlined-basic\" label=\"Username\" variant=\"outlined\" name = \"username\" onChange = {setField}/></div>\n                    <div className=\"login-input\"><TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" name = \"password\" type = \"password\" onChange = {setField}/></div>\n                    <div className = \"button-container\">\n                        <NavLink to= \"/login\">\n                            <Button className =\"login-button\" variant=\"outlined\" onClick = {() => {onRegister(fields)}}>Login</Button>\n                        </NavLink>\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, {materials}) => ({\n    user: state.login.currentUser,\n  })\n  \n  const mapDispatchToProps = (dispatch) => ({\n    onRegister: UserRegister(dispatch)\n  })\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(Register)\n\n","/Users/luigisiopongco/silver-thread-client/src/login/ui/login.jsx",["220","221"],"/Users/luigisiopongco/silver-thread-client/src/login/frameworks/reducers.js",["222"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onLogin,\n    getLoggedUser,\n    onUserSignout\n} from \"./actions\"\n\nexport const login = createReducer (\n    {\n        currentUser: {}\n    },\n    {\n        [onLogin.type]: (state, {payload: user}) => {\n            if (user === null) {\n                return state\n            }\n            state.currentUser = user\n        },\n\n        [getLoggedUser.type]: (state, {payload: user}) => {\n            if (user === null) {\n                return state\n            }\n            state.currentUser = user\n        },\n\n        [onUserSignout.type]: (state) => {\n            state.currentUser = {}\n        },\n    }\n)\n\nexport default {login}","/Users/luigisiopongco/silver-thread-client/src/login/use-cases/UserSignOut.js",[],"/Users/luigisiopongco/silver-thread-client/src/login/use-cases/UserRegister.js",[],"/Users/luigisiopongco/silver-thread-client/src/login/use-cases/UserLogin.js",["223"],"import { onLogin } from \"../frameworks/actions\"\n\nexport const UserLogin = (dispatch) => async(\n    user\n) => {\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   \n      const response = await fetch(`http://localhost:8000/login`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(user),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      const localUser = {\n          auth: success.auth, \n          token: success.token, \n          userId: success.user.id, \n          username: success.user.username, \n          firstname: success.user.first_name, \n          lastname: success.user.last_name}\n\n      localStorage.setItem(\"token\", success.token)\n      console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onLogin(success))\n}\n\nexport default UserLogin","/Users/luigisiopongco/silver-thread-client/src/login/frameworks/actions.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/framework/reducers.js",["224"],"/Users/luigisiopongco/silver-thread-client/src/login/use-cases/CheckUser.js",[],"/Users/luigisiopongco/silver-thread-client/src/login/ui/logout.jsx",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["225"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\"\nimport './MaterialsTable.css'\nimport \"./AddMaterialModal.css\"\nimport AddMaterials from './AddMaterials'\nimport EditMaterials from './EditMaterials'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { DeleteMaterial } from \"../use-cases/deleteMaterial\"\nimport {AddMaterial} from \"../use-cases/addMaterial\";\nimport Popover from '@material-ui/core/Popover';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport {exportCsv } from '../use-cases/excelMaterialsReports'\n\nconst AddMaterialModal = ({closeModal }) => {\n\n    return(\n        <div className = \"add-material-container\">\n           <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeModal()} ><HighlightOffIcon /></IconButton>\n            </div>\n            <AddMaterials closeModal = {closeModal}/>      \n        </div>\n     \n    )\n}\n\nconst EditMaterialModal = ({closeEditModal, rowData }) => {\n     \n  return(\n      <div className = \"edit-material-container\">\n         <div className='closeIconButton'>\n              <IconButton variant=\"contained\" onClick={() => closeEditModal()} ><HighlightOffIcon /></IconButton>\n          </div>\n          <EditMaterials materialData={rowData} closeEditModal = {closeEditModal}/>      \n      </div>\n   \n  )\n}\n\n\nconst MaterialsTable = ({ onGetMaterials, materials, onDeleteMaterial, materialsEdit, materialsDelete, materialsAdd}) => {\n  const [open, setOpen] = useState(false)\n  const [openEdit, setOpenEdit] = useState(false)\n  const [rowData, setRowData] = useState()\n  \n  const closeModal = () => {\n    setOpen(false)\n  }\n\n  const closeEditModal = () => {\n    setOpenEdit(false)\n  }\n\n  useEffect(() => {  \n    onGetMaterials()\n  }, [materialsEdit, materialsDelete, materialsAdd])\n\n  let tableData = materials.map(data => ({\n    ...data\n  }))\n\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Material', field: 'material_name', align: 'left' }, \n    { title: 'Unit of Measure', field: 'unit', align: 'left'  }, \n    { title: 'Price per Unit', field: 'unit_price', align: 'left', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n    { title: 'Vendor', field: 'vendor', align: 'left'  },\n    { title: 'Product Number', field: 'vendor_material_id', align: 'left' },\n    { title: 'Category', field: 'category', align: 'left' },\n  ]\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <Popover\n        open={open}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <AddMaterialModal className = \"modal\" closeModal = {closeModal}/>\n      </Popover>\n\n      <Popover\n            open={openEdit}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n          <EditMaterialModal rowData={rowData} closeEditModal = {closeEditModal} />\n          </Popover>\n        \n      <MaterialTable\n        style={{backgroundColor:'#FFFFFF'}}\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={tableData}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          exportButton: true,        \n          exportCsv,\n          headerStyle: {\n            backgroundColor: '#01579b',          \n            color: '#FFFFFF'\n          }\n        }}\n\n        actions={[\n          {\n            icon: 'add',\n            tooltip: 'Add Material',\n            isFreeAction: true,\n            onClick: (event) => setOpen(true)\n          },\n          {\n            icon: 'edit',\n            tooltip: 'Edit Row',\n            onClick: (event, rowData) => {           \n              setRowData(rowData)\n              setOpenEdit(true)\n            }\n          }\n        ]}\n\n        editable={{\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const id = oldData.id;              \n                onDeleteMaterial(id)\n                resolve()\n              }, 1500)\n            }),\n        }}\n\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, {materials}) => ({\n  materials: state.materials.materialsList,\n  materialsDelete: state.materials.materialID,\n  materialsAdd: state.materials.materialAdd,\n  materialsEdit: state.materials.materialEdit\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch),\n  onAddMaterial: AddMaterial(dispatch),\n  onDeleteMaterial: DeleteMaterial(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/ProductsTable.jsx",["226","227"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport './ProductsTable.css'\n\nimport Popover from '@material-ui/core/Popover';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport EditProduct from './EditProduct'\nimport AddProducts from './AddProducts'\nimport { GetProducts } from '../use-cases/getProducts'\nimport { DeleteProduct } from '../use-cases/deleteProduct'\nimport { exportCsv} from '../use-cases/excelProductsReports'\n\n\nconst AddProductModal = ({ closeModal }) => {\n    return (\n        <div className=\"addProductModal\">\n            <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeModal()}><HighlightOffIcon /></IconButton>\n            </div>\n            <AddProducts />\n        </div>\n    )\n}\n\nconst EditProductModal = ({ closeEditModal, rowData }) => {\n    return (\n        <div className=\"addProductModal\">\n            <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeEditModal()}><HighlightOffIcon /></IconButton>\n            </div>\n            <EditProduct productData={rowData} closeEditModal={closeEditModal}/>\n        </div>\n    )\n}\n\n\nconst ProductsTable = ({ onGetProducts, products, onDeleteProduct, productDelete, productAdd, productEdit }) => {\n\n    const [open, setOpen] = useState(false)\n    const [openEdit, setOpenEdit] = useState(false)\n    const [rowData, setRowData] = useState('')\n\n    var tableData\n\n    //get products from db\n    useEffect(() => {\n        onGetProducts()\n    }, [productDelete, productAdd, productEdit])\n\n    tableData = products.map(data => ({\n        ...data\n    }))\n\n\n    //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'labor', field: 'labor', hidden: true, align: 'left' },\n        { title: 'Product Number', field: 'product_num', align: 'left' },\n        { title: 'Product Name', field: 'product_name', align: 'left' },\n        { title: 'Wholesale Price', field: 'wholesale', align: 'left', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n        { title: 'Retail Price', field: 'retail_price', align: 'left', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n        { title: 'Category', field: 'category', align: 'left' },\n        { title: 'Inventory - Onsite', field: 'quantity', align: 'left' },\n        { title: 'Inventory - PTM', field: 'quantity_painted_tree', align: 'left' },\n    ]\n\n    const closeModal = () => {\n        setOpen(false)\n    }\n\n    const closeEditModal = () => {\n        setOpenEdit(false)\n    }\n\n    return (\n        <div className='productsContainer'>\n            <h1>Silverthread Products </h1>\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddProductModal className=\"modal\" closeModal={closeModal} />\n            </Popover>\n\n            <Popover\n                open={openEdit}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <EditProductModal className=\"modal\" closeEditModal={closeEditModal} rowData={rowData} />\n            </Popover>\n\n            <div className='productsMaterialTable'>\n                <MaterialTable\n                    style={{ backgroundColor: '#FFFFFF' }}\n                    title=\"Silverthread Products\"\n                    columns={columns}\n                    data={tableData}\n\n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        exportButton: true,                        \n                        exportCsv,\n                        headerStyle: {\n                            backgroundColor: '#f06292',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Product',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {                        \n                                setRowData(rowData)\n                                setOpenEdit(true)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;\n                                    onDeleteProduct(id)\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    products: state.products.productsList,\n    productDelete: state.products.productsDelete,\n    productAdd: state.products.newProduct,\n    productEdit: state.products.editedProduct\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetProducts: GetProducts(dispatch),\n    onDeleteProduct: DeleteProduct(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsTable)","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["228","229","230","231"],"import MaterialTable from \"material-table\"\nimport { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { setAutoFreeze } from \"immer\"\n\nimport \"date-fns\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport Popover from \"@material-ui/core/Popover\"\nimport {\n   MuiPickersUtilsProvider,\n   KeyboardDatePicker,\n} from \"@material-ui/pickers\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\nimport \"./SalesTable.css\"\nimport AddSales from \"./AddSales\"\nimport EditSales from \"./EditSales\"\nimport { GetSales } from \"../use-cases/getSales\"\nimport { DeleteSale } from \"../use-cases/deleteSale\"\nimport { exportCsv } from \"../use-cases/exelSalesReports\"\nimport AddMaterial from \"../use-cases/addMaterial\"\n\nconst useStyles = makeStyles((theme) => ({\n   root: {\n      \"& > *\": {\n         margin: theme.spacing(1),\n      },\n   },\n}))\n\nconst SalesTable = ({\n   onGetSales,\n   sales,\n   onDeleteSale,\n   salesAdd,\n   salesEdit,\n   salesDelete,\n}) => {\n   const classes = useStyles()\n\n   //set date for date-pickers on load\n   const getStartDate = () => {\n      let d = new Date()\n      d.setDate(d.getDate() - 30)\n      return d\n   }\n   let end_date = new Date()\n   let start_date = getStartDate()\n\n   const [selectedDate, setSelectedDate] = useState({\n      start: start_date,\n      end: end_date,\n   })\n   const [open, setOpen] = useState(false)\n   const [openEdit, setOpenEdit] = useState(false)\n   const [openAdd, setOpenAdd] = useState(false)\n   const [rowData, setRowData] = useState()\n\n   var tableData\n\n   //get sales from db\n   useEffect(() => {\n      onGetSales(selectedDate)\n   }, [salesAdd, salesEdit, salesDelete])\n\n   tableData = sales.map((data) => ({\n      ...data,\n   }))\n\n   //changes the start date of the reports\n   const handleStartDateChange = (date) => {\n      setSelectedDate({\n         ...selectedDate,\n         start: date,\n      })\n   }\n\n   //changes the end date of the reports\n   const handleEndDateChange = (date) => {\n      setSelectedDate({\n         ...selectedDate,\n         end: date,\n      })\n   }\n\n   //onclick function that runs new sales report based on input dates\n   const handleRunSalesReport = (dates) => {\n      if (dates.start === null || dates.end === null) {\n         alert(\"Please enter a start and end date for your report\")\n      } else if (dates.start > dates.end) {\n         alert(\"The start date must be before the end date\")\n      } else {\n         onGetSales(dates)\n      }\n   }\n\n   const EditSalesModal = ({ closeEditModal }) => {\n      return (\n         <div className=\"editSalesModal\">\n            <div className=\"closeIconButton\">\n               <IconButton variant=\"contained\" onClick={() => closeEditModal()}>\n                  <HighlightOffIcon />\n               </IconButton>\n            </div>\n            <EditSales saleData={rowData} closeEditModal={closeEditModal} />\n         </div>\n      )\n   }\n\n   const AddSalesModal = ({ closeAddModal }) => {\n      return (\n         <div className=\"editSalesModal\">\n            <div className=\"closeIconButton\">\n               <IconButton variant=\"contained\" onClick={() => closeAddModal()}>\n                  <HighlightOffIcon />\n               </IconButton>\n            </div>\n            <AddSales saleData={rowData} closeAddModal={closeAddModal} />\n         </div>\n      )\n   }\n\n   const closeEditModal = () => {\n      setOpenEdit(false)\n   }\n\n   const closeAddModal = () => {\n      setOpenAdd(false)\n   }\n\n   //sets column headers\n   const columns = [\n      { title: \"id\", field: \"id\", hidden: true },\n      { title: \"Product ID\", field: \"product_id\", hidden: true },\n      { title: \"Date\", field: \"date_sold\", defaultSort: \"desc\", align: \"left\" },\n      {\n         title: \"Product Number\",\n         field: \"product_number\",\n         align: \"left\",\n         hidden: true,\n      },\n      { title: \"Product Name\", field: \"product_name\", align: \"left\" },\n      { title: \"Quantity\", field: \"quantity\", align: \"left\" },\n      {\n         title: \"Price per Unit\",\n         field: \"price_per_unit\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      { title: \"Discount\", field: \"discount\", align: \"left\" },\n      {\n         title: \"Total Sales Price\",\n         field: \"total_price\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      {\n         title: \"Tax\",\n         field: \"tax\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      {\n         title: \"Shipping\",\n         field: \"shipping\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      {\n         title: \"Category\",\n         field: \"product_category\",\n         align: \"left\",\n         hidden: true,\n      },\n      { title: \"Purchased By\", field: \"sold_to\", align: \"left\" },\n   ]\n\n   return (\n      <div className=\"salesContainer\">\n         <h1>Silverthread Sales </h1>\n         <div className=\"datePickerContainer\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n               {/* <Grid container justify=\"space-around\" style={{backgroundColor:'#FFFFFF'}}> */}\n               <Grid\n                  container\n                  justify=\"space-evenly\"\n                  alignItems=\"center\"\n                  style={{ backgroundColor: \"#FFFFFF\" }}\n               >\n                  <KeyboardDatePicker\n                     style={{ backgroundColor: \"#FFFFFF\" }}\n                     margin=\"normal\"\n                     name=\"start\"\n                     id=\"date-picker-dialog\"\n                     label=\"Start Date\"\n                     format=\"MM/dd/yyyy\"\n                     value={selectedDate.start}\n                     onChange={handleStartDateChange}\n                     KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                     }}\n                  />\n\n                  <KeyboardDatePicker\n                     margin=\"normal\"\n                     name=\"end\"\n                     id=\"date-picker-dialog\"\n                     label=\"End Date\"\n                     format=\"MM/dd/yyyy\"\n                     value={selectedDate.end}\n                     onChange={handleEndDateChange}\n                     KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                     }}\n                  />\n\n                  <div\n                     className={classes.root}\n                     style={{ backgroundColor: \"#FFFFFF\" }}\n                  >\n                     <Button\n                        onClick={() => handleRunSalesReport(selectedDate)}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                     >\n                        Run Report\n                     </Button>\n                  </div>\n               </Grid>\n            </MuiPickersUtilsProvider>\n         </div>\n\n         <Popover\n            open={openAdd}\n            anchorOrigin={{\n               vertical: \"center\",\n               horizontal: \"center\",\n            }}\n            transformOrigin={{\n               vertical: \"top\",\n               horizontal: \"center\",\n            }}\n         >\n            <AddSalesModal className=\"modal\" closeAddModal={closeAddModal} />\n         </Popover>\n\n         <Popover\n            open={openEdit}\n            anchorOrigin={{\n               vertical: \"center\",\n               horizontal: \"center\",\n            }}\n            transformOrigin={{\n               vertical: \"top\",\n               horizontal: \"center\",\n            }}\n         >\n            <EditSalesModal className=\"modal\" closeEditModal={closeEditModal} />\n         </Popover>\n\n         {sales === [] ? (\n            <div>Loading Data....</div>\n         ) : (\n            <div className=\"salesMaterialTable\">\n               <MaterialTable\n                  style={{ backgroundColor: \"#FFFFFF\" }}\n                  title=\"Silverthread Sales\"\n                  columns={columns}\n                  data={tableData}\n                  options={{\n                     search: false,\n                     showTitle: false,\n                     filtering: true,\n                     exportButton: true,\n                     exportCsv,\n                     headerStyle: {\n                        backgroundColor: \"#b71c1c\",\n                        color: \"#FFFFFF\",\n                     },\n                  }}\n                  actions={[\n                     {\n                        icon: \"add\",\n                        tooltip: \"Add Sale\",\n                        isFreeAction: true,\n                        onClick: (event) => setOpenAdd(true),\n                     },\n                     {\n                        icon: \"edit\",\n                        tooltip: \"Edit Row\",\n                        onClick: (event, rowData) => {\n                           setRowData(rowData)\n                           setOpenEdit(true)\n                        },\n                     },\n                  ]}\n                  editable={{\n                     onRowDelete: (oldData) =>\n                        new Promise((resolve, reject) => {\n                           setTimeout(() => {\n                              const id = oldData.id\n                              onDeleteSale(id)\n                              resolve()\n                           }, 1000)\n                        }),\n                  }}\n               />\n            </div>\n         )}\n      </div>\n   )\n}\n\nconst mapStateToProps = (state, {sales}) => ({\n   sales: state.sales.salesList,\n   salesAdd: state.sales.newSaleId,\n   salesEdit: state.sales.saleEdits,\n   salesDelete: state.sales.saleID,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n   onGetSales: GetSales(dispatch),\n   onDeleteSale: DeleteSale(dispatch),\n   onAddMaterial: AddMaterial(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)\n","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/Dashboard.jsx",["232","233","234","235","236","237","238"],"/Users/luigisiopongco/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addMaterial.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/exelSalesReports.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/EditSales.jsx",["239","240","241","242","243","244"],"import { useState } from 'react'\nimport { connect } from 'react-redux' \nimport { EditSale } from '../use-cases/editSale'\nimport './EditSales.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from \"@material-ui/icons/Save\"\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst EditSales = (props, {onEditSale}) => {\n    const classes = useStyles();\n\n    const [updatedSalesData, setUpdatedSalesData] = useState(props.saleData)\n\n    const handleOnChange = (e) => {\n        setUpdatedSalesData({\n            ...updatedSalesData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleDateChange = (date) => {\n        setUpdatedSalesData({\n            ...updatedSalesData,\n            createdAt: date\n        })\n    };\n\n    const handleOnClick = (data) => {        \n        //check to make sure quantity is a number\n        const quantity = +data.quantity\n        const price_per_unit = +data.price_per_unit\n        const total_price = +data.total_price\n\n        if (data.product_name == '') {\n            alert('Please enter the name of the product you sold')\n        } else if (data.product_category == '') {\n            alert('Please enter the category of the product you sold')\n        } else if (quantity == '' || isNaN(quantity)) {\n            alert('Please enter the quantity sold')\n        } else if (price_per_unit == '' || isNaN(price_per_unit) ) {\n            alert('Please enter the price per unit in the format X.XX')\n        } else if (total_price == '' || isNaN(total_price) ) {\n            alert('Please enter the total price in the format X.XX')\n        } else if (data.sold_to == '') {\n            alert('Please enter the name of the buyer')\n        } else {\n            props.onEditSale(data)\n            props.closeEditModal()   \n        }\n            \n    }\n \n    return (\n        <div className='editSalesContainer'>\n            <h2>Edit Sale</h2>\n            <div>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_number' value={updatedSalesData.product_number} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_name' value={updatedSalesData.product_name} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='quantity' value={updatedSalesData.quantity} onChange={handleOnChange} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='price_per_unit' value={updatedSalesData.price_per_unit} onChange={handleOnChange} id=\"outlined-basic\" label=\"Price Per Unit\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='discount' value={updatedSalesData.discount} onChange={handleOnChange} id=\"outlined-basic\" label=\"Discount\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='tax' value={updatedSalesData.tax} onChange={handleOnChange} id=\"outlined-basic\" label=\"Total Tax Amount\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='shipping' value={updatedSalesData.shipping} onChange={handleOnChange} id=\"outlined-basic\" label=\"Shipping Amount\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='total_price' value={updatedSalesData.total_price} onChange={handleOnChange} id=\"outlined-basic\" label=\"Total Sales Price\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_category' value={updatedSalesData.product_category} onChange={handleOnChange} id=\"outlined-basic\" label=\"Category\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='sold_to' value={updatedSalesData.sold_to} onChange={handleOnChange} id=\"outlined-basic\" label=\"Sold To\" variant=\"outlined\" />\n                </form>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        margin=\"normal\"\n                        name=\"createdAt\"\n                        id=\"date-picker-dialog\"\n                        label=\"Sales Date\"\n                        format=\"MM/dd/yyyy\"\n                        value={updatedSalesData.createdAt}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                        fullWidth\n                    />\n                </MuiPickersUtilsProvider>\n            </div>\n            <div>        \n                    <Button onClick={() => handleOnClick(updatedSalesData)} fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"secondary\">\n                    Save\n                </Button>\n                \n            </div>\n        </div>\n    )\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    onEditSale: EditSale(dispatch),\n    \n  })\nexport default connect(null, mapDispatchToProps)(EditSales)","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/AddSales.jsx",["245","246"],"import TextField from \"@material-ui/core/TextField\"\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport Button from \"@material-ui/core/Button\"\nimport { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { AddSale } from \"../use-cases/addSale\"\nimport { GetProducts } from '../use-cases/getProducts'\nimport \"./AddMaterialModal.css\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport {\n   MuiPickersUtilsProvider,\n   KeyboardDatePicker,\n} from \"@material-ui/pickers\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst AddSales = ({ addSale, onGetProducts, products, closeAddModal }) => {\n   // putting empty fields object into local state\n   useEffect(() => {\n      onGetProducts()\n   }, [])\n\n   const [fields, setFields] = useState({ 'tax': 8.25, date_sold: new Date(), shipping: 0, quantity: 0, discount: 0 })\n\n   const setField = (evt) =>\n      setFields({\n         ...fields,\n         [evt.target.name]: evt.target.value,\n      })\n\n   const handleDateChange = (date) => {\n      setFields({\n         ...fields,\n         date_sold: date\n      })\n   };\n\n   const getProductDetails = (e) => {\n      let selected_product = e.target.value\n\n      let productDetails = products.find(item => {\n         return item.product_name == selected_product\n      })\n\n      setFields({\n         ...fields,\n         productDetails\n      })\n   }\n\n   return (\n      <div className=\"addMaterialTBContainer\">\n         <h2>Add Sale</h2>\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Product Number\"\n               name=\"product_number\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}\n\n         <div className=\"inputContainer\">\n            {/* <TextField\n               className=\"outlined\"\n               label=\"Product Name\"\n               name=\"product_name\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            /> */}\n\n            {/* Selector for products */}\n            <Autocomplete\n               id=\"free-solo-demo\"\n               freeSolo\n               options={products.map((option) => option.product_name)}\n               renderInput={(params) => (\n                  <TextField {...params} name='product_name' onSelect={getProductDetails} value=\"\" label=\"Product\" margin=\"normal\" variant=\"outlined\" fullWidth />\n               )} handleProductInput\n            />\n         </div>\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Quantity\"\n               name=\"quantity\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Price per Unit\"\n               name=\"price_per_unit\"               \n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Discount\"\n               name=\"discount\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Total Sales Price\"\n               name=\"total_price\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Tax\"\n               name=\"tax\"\n               value={fields.tax}\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Shipping\"\n               name=\"shipping\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Category\"\n               name=\"product_category\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}        \n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Purchased By\"\n               name=\"sold_to\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         <div className=\"inputContainer\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n               <KeyboardDatePicker\n                  margin=\"normal\"\n                  name=\"date_sold\"\n                  id=\"date-picker-dialog\"\n                  label=\"Date Sold\"\n                  format=\"MM/dd/yyyy\"\n                  value={fields.date_sold}\n                  onChange={handleDateChange}\n                  KeyboardButtonProps={{\n                     'aria-label': 'change date',\n                  }}\n                  fullWidth\n               />\n            </MuiPickersUtilsProvider>\n         </div>\n\n         <div>\n            <Button\n               onClick={() => {\n                  console.log(fields)\n                  addSale(fields)\n                  closeAddModal()\n               }}\n               variant=\"contained\"\n               color=\"secondary\"\n               size=\"large\"\n               className=\"addSalesBtn\"\n               startIcon={<SaveIcon />}\n               fullWidth\n            >\n               Save\n            </Button>\n         </div>\n      </div>\n   )\n}\n\nconst mapStateToProps = (state) => ({\n   products: state.products.productsList,\n})\n\n// CRUD operation\nconst mapDispatchToProps = (dispatch) => ({\n   addSale: AddSale(dispatch),\n   onGetProducts: GetProducts(dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSales)\n","/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/PieChart2.jsx",["247","248","249","250","251","252","253","254","255","256","257","258"],"/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/LineGraph.jsx",[],"/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/BarChart2.jsx",["259","260","261","262","263"],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addSale.js",["264"],"import { onAddSale } from \"../framework/actions\"\nimport { Popover } from '@material-ui/core';\n\n//This is a usecase for getting the list of sales\nexport const AddSale = (dispatch) => async (fields) => {\n   \n   // const newSale = {\n   //    product_id: fields.productDetails.id,      \n   //    product_number: fields.productDetails.product_num,\n   //    product_name: fields.productDetails.product_name,\n   //    product_category: fields.productDetails.category,\n   //    price_per_unit: fields.productDetails.retail_price,\n   //    quantity: fields.quantity,\n   //    total_price: fields.total_price,\n   //    sold_to: fields.sold_to,\n   //    date_sold: fields.date_sold,\n   //    shipping: fields.shipping,\n   //    tax: fields.tax,\n   //    discount_rate: fields.discount\n   // }\n   \n\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   try {\n      // console.log(newSale)\n      const response = await fetch(`http://localhost:8000/sales/addNewSale`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(fields),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      // console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onAddSale(success))\n   } catch (e) {\n      console.log(\"CAUGHT ERROR IN PROMISE\")\n   }\n}\n\nexport default AddSale\n","/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getProducts.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editSale.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/excelProductsReports.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteProduct.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/excelMaterialsReports.js",[],"/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/BarChart.jsx",["265","266"],"/Users/luigisiopongco/silver-thread-client/src/dashboard/ui/PieChart.jsx",["267","268","269","270","271","272"],"/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/EditProduct.jsx",["273","274","275","276"],"import './EditProduct.css'\nimport { connect } from 'react-redux'\nimport { useEffect, useState } from 'react'\nimport { GetProductByID } from '../use-cases/getProductByID'\nimport { GetMaterials } from '../use-cases/getMaterials'\nimport { EditProductDetails } from '../use-cases/editProduct'\nimport { DeleteMaterialItem } from '../use-cases/deleteMaterialItem'\nimport { AddNewMaterial } from '../use-cases/addMaterialItem'\nimport { UpdateWholesale } from '../use-cases/editWholesale'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button'\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Typography from '@material-ui/core/Typography';\n\n\n\n//for material ui components\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\nconst EditProduct = ({ productData, onGetProductByID, productListing, onGetMaterials, materials, onEditProduct, onDeleteMaterialItem, materialDelete, onAddNewMaterial, newMaterialItem, onUpdateWholesale, closeEditModal, editProduct }) => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n\n    const [productDetails, setProductDetails] = useState({})\n    const [newMaterial, setNewMaterial] = useState({ product_id: productData.id, material_unit_amount: '', })\n    const [itemMaterialsList, setItemMaterialsList] = useState([])\n\n    const steps = getSteps();\n\n    useEffect(() => {\n        let id = productData.id\n        onGetProductByID(id)\n        onGetMaterials()\n    }, [materialDelete, newMaterialItem, editProduct])\n\n    useEffect(() => {\n        setProductDetails(productListing)\n\n        if (productListing.MaterialByProdNums) {\n            setItemMaterialsList(productListing.MaterialByProdNums)\n        } else {\n            setItemMaterialsList([])\n        }\n    }, [productListing])\n\n    //handles changes to product listing from textboxes\n    const handleOnChange = (e) => {\n        setProductDetails({\n            ...productDetails,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    let materialItem = itemMaterialsList.map(item => {\n        return <div className='materialItem' key={item.id}> {item.material_name}: {item.material_unit_amount} @ ${item.material_cost.toFixed(2)} each <IconButton onClick={() => onDeleteMaterialItem(item.id)} aria-label=\"delete\"><DeleteIcon /></IconButton></div>\n    })\n\n    //these are the steps shown at the top of the stepper\n    function getSteps() {\n        return ['Edit Product Details', 'Edit Wholesale Price'];\n    }\n\n    function getStepContent(step) {\n\n        switch (step) {\n            case 0:\n                return (\n                    <div className=\"editProductContainer\">\n                        <div className='textInput'>\n                            <TextField name='product_name' value={productDetails.product_name} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='product_num' value={productDetails.product_num} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='wholesale' value={productDetails.wholesale} onChange={handleOnChange} id=\"outlined-basic\" label=\"Wholesale Price\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='retail_price' value={productDetails.retail_price} onChange={handleOnChange} id=\"outlined-basic\" label=\"Retail Price\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='quantity' value={productDetails.quantity} onChange={handleOnChange} id=\"outlined-basic\" label=\"Inventory (Home)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='quantity_painted_tree' value={productDetails.quantity_painted_tree} onChange={handleOnChange} id=\"outlined-basic\" label=\"Inventory (PTM)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                    </div>\n                );\n\n            //Input materials and quantity into MaterialsList   \n            case 1:\n                //STEP 2 -handles selection on material from selection picker\n                const handleMaterialInput = (e) => {\n                    let materialItem = e.target.value\n\n                    let material = materials.find(item => {\n                        return item.material_name == materialItem\n                    })\n\n                    setNewMaterial({\n                        ...newMaterial,\n                        material\n                    })\n                }\n\n                //inputs quantity of materials\n                const handleQuantityInput = (e) => {\n                    setNewMaterial({\n                        ...newMaterial,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return (\n                    <div>\n                        <div className='textInput'>\n                            <div><h2>Edit Materials</h2>\n                                <b>Current Materials List:</b>\n                                {materialItem}\n                            </div>\n                            <b>Add New Material:</b>\n                        </div>\n                        <div className='textInput'>\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={materials.map((option) => option.material_name)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='material' onSelect={handleMaterialInput} label=\"Select Material\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )}\n                            />\n                        </div>\n                        <div className='textField'>\n                            <TextField name=\"material_unit_amount\" value={newMaterial.material_unit_amount} onChange={handleQuantityInput} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => onAddNewMaterial(newMaterial)} className={classes.button} fullWidth >\n                                Add Material\n                            </Button>\n                        </div>\n                        <div className='laborContainer'>\n                            <h2>Edit Labor</h2>\n                            <form className={classes.root} noValidate autoComplete=\"off\">\n                                <TextField name='labor' value={productDetails.labor} onChange={handleOnChange} id=\"outlined-basic\" label=\"Labor (Minutes)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                            </form>\n                        </div>\n                    </div>\n                );\n        }\n    }\n    // OnClick Functions For Stepper:\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleNext = (product) => {\n        onEditProduct(product)\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleComplete = (product) => {\n        onEditProduct(product)\n        closeEditModal()\n    };\n\n    const handleWholesaleUpdate = (product) => {\n        onUpdateWholesale(product)\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    }\n\n    return (\n        <div className=\"addProductsContainer\">\n            <h2>Edit Product</h2>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                    })}\n\n                </Stepper>\n                <div>\n                    {activeStep === steps.length ? (\n                        <div>\n                            <Typography className={classes.instructions}>\n                                All steps completed. Your product is now live.\n                                </Typography>\n                        </div>\n                    ) : (\n                            <div>\n                                <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                                <div>\n                                    <Button disabled={activeStep === 0 || activeStep === 2} onClick={handleBack} className={classes.button}>\n                                        Back\n                                    </Button>\n\n                                    {/* this button shows on the first step and takes the input for the product details */}\n                                    {activeStep === 0 ? <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => handleNext(productDetails)}\n                                        className={classes.button}\n                                    >\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                    </Button>\n                                        : null}\n\n                                    {activeStep === 0 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => handleComplete(productDetails)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Save'}\n                                        </Button>\n\n                                        : null}\n\n                                    {/* This button shows on the wholesale pricing step */}\n                                    {activeStep === 1 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => handleWholesaleUpdate(productDetails)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Save' : 'Save'}\n                                        </Button>\n                                        : null}\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nconst mapStateToProps = (state, { }) => ({\n    productListing: state.products.productListing,\n    materials: state.materials.materialsList,\n    materialDelete: state.materialByProduct.materialItem,\n    newMaterialItem: state.materialByProduct.newMaterial,\n    editProduct: state.products.editedProduct\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetProductByID: GetProductByID(dispatch),\n    onGetMaterials: GetMaterials(dispatch),\n    onEditProduct: EditProductDetails(dispatch),\n    onDeleteMaterialItem: DeleteMaterialItem(dispatch),\n    onAddNewMaterial: AddNewMaterial(dispatch),\n    onUpdateWholesale: UpdateWholesale(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProduct)","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/AddProducts.jsx",["277","278","279","280","281","282","283"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport './AddProducts.css'\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { AddProduct } from \"../use-cases/addProduct\"\nimport EditProductDetails from '../use-cases/editProduct';\n\n//for material ui components\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nconst AddProducts = ({ onGetMaterials, materials, newReturnedProduct, onAddProduct, onAddRetail, }) => {\n\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [newProduct, setNewProduct] = useState({ 'product_name': '', 'product_num': '', 'category': '', 'labor': '' })\n    const [returnedProduct, setReturnedProduct] = useState({})\n    const [materialToAdd, setMaterialToAdd] = useState({ 'material_unit_amount': '' })\n    const [addedMaterialsList, setAddedMaterialsList] = useState([])\n\n    const steps = getSteps();\n\n    //gets materials for selector in add materials step on load\n    useEffect(() => {\n        onGetMaterials()\n    }, [])\n\n    //updates returned product, resets new product, and moves stepper forward when returned product is received\n    useEffect(() => {\n        setReturnedProduct(newReturnedProduct)\n        if (activeStep > 0) {\n            setNewProduct({ 'product_name': '', 'product_num': '', 'category': '', 'labor': '' })\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    }, [newReturnedProduct])\n\n\n    //these are the steps shown at the top of the stepper\n    function getSteps() {\n        return ['Enter Product', 'Add Materials', 'Set Pricing'];\n    }\n\n    function getStepContent(step) {\n\n        switch (step) {\n            //Input product name, product number, categorgy, labor time\n            case 0:\n                //list of jewelry categories to choose from\n                const category = [{ title: 'Earrings' }, { title: 'Necklaces' }, { title: 'Bracelets' }, { title: 'Rings' }, { title: 'Mezuzzahs' }, { title: 'Brooches' }, { title: 'Chains' }, { title: 'Other' }]\n\n                //handles the input of the product name and number\n                const handleProductInput = (e) => {\n                    setNewProduct({\n                        ...newProduct,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return (\n                    <div className=\"productDetailContainer\">\n\n                        <h4>Enter Product Details</h4>\n                        <div className=\"textField\">\n                            <TextField name=\"product_name\" onChange={handleProductInput} value={newProduct.product_name} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className=\"textField\">\n                            <TextField name=\"product_num\" onChange={handleProductInput} value={newProduct.product_num} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className=\"textField\">\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={category.map((option) => option.title)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='category' onSelect={handleProductInput} value={newProduct.category} label=\"Category\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )} handleProductInput\n                            />\n                        </div>\n                        <div className=\"textField\">\n                            <TextField name=\"labor\" onChange={handleProductInput} value={newProduct.labor} id=\"outlined-basic\" label=\"Labor (minutes)\" variant=\"outlined\" fullWidth />\n                        </div>\n                    </div>\n                );\n\n            //Input materials and quantity into MaterialsList   \n            case 1:\n                //STEP 2 -handles selection on material from selection picker\n                const handleMaterialInput = (e) => {\n                    let materialItem = e.target.value\n\n                    let material = materials.find(item => {\n                        return item.material_name == materialItem\n                    })\n\n                    //sets into material to add array\n                    setMaterialToAdd({\n                        ...materialToAdd,\n                        material\n                    })\n                }\n\n                //inputs quantity of materials\n                const handleQuantityInput = (e) => {\n                    setMaterialToAdd({\n                        ...materialToAdd,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                //adds material in materialToAdd into the MaterialsArry\n                const addToMaterialList = (addMaterial) => {\n\n                    let quantity = +addMaterial.material_unit_amount\n\n                    if (!addMaterial.material) {\n                        alert('Please select a material')\n                    } else if (isNaN(quantity) || quantity == '') {\n                        alert('Please enter a quantity')\n                    } else {\n                        setAddedMaterialsList([...addedMaterialsList,\n                        {\n                            material_id: addMaterial.material.id,\n                            material_name: addMaterial.material.material_name,\n                            unit_price: addMaterial.material.unit_price.toFixed(2),\n                            material_unit_amount: addMaterial.material_unit_amount,                            \n                        }\n                        ])\n\n                        setMaterialToAdd({\n                            material: {},\n                            material_unit_amount: ''\n                        })\n                    }\n                }\n\n                //allows user to delete added materials before saving to db\n                const deleteMaterial = (id) => {\n                    let updatedMaterialList = addedMaterialsList.filter(item => item.material_id != id)\n                    setAddedMaterialsList(updatedMaterialList)\n                }\n\n                //map through materials in MaterialsList to show what has been added\n                const displayMaterialList = addedMaterialsList.map(item => {                   \n                    return <div key={item.material_id}>{item.material_name}: {item.material_unit_amount} @ ${item.unit_price} each <IconButton onClick={() => deleteMaterial(item.material_id)} aria-label=\"delete\"><DeleteIcon /></IconButton></div>\n                })\n\n\n                return (\n                    <div>\n                        <div className='textField'>\n                            <b>Select Materials:</b>\n                        </div>\n                        <div className='textField'>\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={materials.map((option) => option.material_name)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='material' onSelect={handleMaterialInput} label=\"Select Material\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )}\n                            />\n                        </div>\n                        <div className='textField'>\n                            <TextField name=\"material_unit_amount\" value={materialToAdd.material_unit_amount} onChange={handleQuantityInput} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className='textField'>\n                            <Button onClick={() => addToMaterialList(materialToAdd)} variant=\"contained\" color=\"primary\" className={classes.button} >\n                                Add Material\n                            </Button>\n                        </div>\n                        {addedMaterialsList.length >= 1 ? <div className=\"addedMaterials\">\n                            <b>Added Materials: </b>\n                            {displayMaterialList}\n                        </div> : null}\n\n                    </div>\n                );\n\n\n            // list all product details and add retail price and inventory    \n            case 2:\n                const handleSetPricing = (e) => {\n                    setReturnedProduct({\n                        ...returnedProduct,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return <div className=\"pricingContainer\">\n                    <h4>Set Pricing and Inventory</h4>\n                    <label><b>Name:</b> {returnedProduct.product_name}</label>\n                    <label><b>Product number:</b> {returnedProduct.product_num}</label>\n                    <label><b>Category:</b> {returnedProduct.category}</label>\n                    <label><b>Wholesale Price:</b> ${returnedProduct.wholesale.toFixed(2)}</label>\n                    \n                    <div className='pricingInputs'>\n                        <h3>Add Retail Price:</h3>\n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                            <TextField name='retail_price' onChange={handleSetPricing} id=\"outlined-basic\" label=\"Retai Price\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </form>\n                    </div>\n                    <div className='pricingInputs'>\n                        <h3>Add Inventory - Onsite:</h3>                    \n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                            <TextField name='quantity' onChange={handleSetPricing} id=\"outlined-basic\" label=\"Inventory (Onsite)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </form>\n                    </div>\n                    <div className='pricingInputs'>\n                    <h3>Add Inventory - Painted Tree:</h3>                      \n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                            <TextField name='quantity_painted_tree' onChange={handleSetPricing} id=\"outlined-basic\" label=\"Inventory (PTM)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </form>\n                    \n                    </div>\n                </div>\n            default:\n                return 'Unknown step';\n        }\n    }\n\n    // OnClick Functions For Stepper:\n\n    //handles adding newProduct and materials to db from on click\n    const addProductToDB = async (product, listMaterials) => {\n\n        const addProduct = {\n            product_name: product.product_name,\n            product_num: product.product_num,\n            product_id: product.product_id,\n            category: product.category,\n            labor: product.labor,\n            materials: listMaterials\n        }\n        //call function here pass in addProduct\n        onAddProduct(addProduct)\n    }\n\n    //from onclick in last step add retail price and inventory to the db\n    const addRetailPriceToDB = async (finalProduct) => {\n\n        //check to make sure retail price is currency\n        var regex = /^\\d+(?:\\.\\d{0,2})$/;\n        let retail = finalProduct.retail_price\n\n        //check to make sure inventory is a number\n        let quantity = +finalProduct.quantity\n\n        if (!finalProduct.retail_price || (!regex.test(retail))) {\n            alert('The retail price must be entered in the format X.XX')\n\n        } else if (!finalProduct.quantity || isNaN(quantity)) {\n            alert('Inventory must be entered as a whole number')\n\n        } else {\n            onAddRetail(finalProduct)\n            setReturnedProduct({})\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    }\n\n\n    //handle back, next and close handle the nav buttons at the bottom of the screen\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    //takes user from entering details to enterin materials - check to make sure all fields are filled in\n    const handleNext = () => {\n        //check to make sure labor is a number\n        let labor = +newProduct.labor\n\n        if (newProduct.product_name == '') {\n            alert('Please enter a product name')\n        } else if (newProduct.category == '') {\n            alert('Please enter a category')\n        } else if (isNaN(labor) || labor === '') {\n            alert('Please enter the number of minutes required')\n        } else {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    };\n\n    return (\n        <div className=\"addProductsContainer\">\n            <h2>Add New Product</h2>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n\n                        );\n                    })}\n\n                </Stepper>\n                <div>\n                    {activeStep === steps.length ? (\n                        <div>\n                            <Typography className={classes.instructions}>\n                                All steps completed. Your product is now live.\n                            </Typography>\n                        </div>\n                    ) : (\n                            <div>\n                                <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                                <div>\n                                    <Button disabled={activeStep === 0 || activeStep === 2} onClick={handleBack} className={classes.button}>\n                                        Back\n                                </Button>\n\n                                    {/* this button shows on the first step and takes the input for the product details */}\n                                    {activeStep === 0 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                        : null}\n\n\n                                    {/* This button shows on the second step and sends all product info to the db */}\n                                    {activeStep === 1 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            //addProductsTODB - line 45\n                                            onClick={() => addProductToDB(newProduct, addedMaterialsList)}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                        : null}\n\n                                    {/* This button shows on the final step and handles taking the input for retail pricing and inventory and sends to the db */}\n                                    {activeStep === 2 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => addRetailPriceToDB(returnedProduct)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Save' : 'Next'}\n                                        </Button>\n                                        : null}\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, { materials }) => ({\n    materials: state.materials.materialsList,\n    newReturnedProduct: state.products.newProduct,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetMaterials: GetMaterials(dispatch),\n    onAddProduct: AddProduct(dispatch),\n    onAddRetail: EditProductDetails(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProducts)\n","/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/EditMaterials.jsx",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/ui/AddMaterials.jsx",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editProduct.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editMaterial.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addProduct.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/deleteMaterialItem.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/editWholesale.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/getProductByID.js",[],"/Users/luigisiopongco/silver-thread-client/src/data-tables/use-cases/addMaterialItem.js",[],{"ruleId":"284","replacedBy":"285"},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","severity":1,"message":"289","line":1,"column":10,"nodeType":"290","messageId":"291","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"292","line":1,"column":27,"nodeType":"290","messageId":"291","endLine":1,"endColumn":38},{"ruleId":"288","severity":1,"message":"293","line":18,"column":8,"nodeType":"290","messageId":"291","endLine":18,"endColumn":13},{"ruleId":"288","severity":1,"message":"294","line":19,"column":8,"nodeType":"290","messageId":"291","endLine":19,"endColumn":14},{"ruleId":"288","severity":1,"message":"295","line":1,"column":17,"nodeType":"290","messageId":"291","endLine":1,"endColumn":26},{"ruleId":"288","severity":1,"message":"296","line":10,"column":10,"nodeType":"290","messageId":"291","endLine":10,"endColumn":17},{"ruleId":"288","severity":1,"message":"297","line":11,"column":10,"nodeType":"290","messageId":"291","endLine":11,"endColumn":19},{"ruleId":"288","severity":1,"message":"296","line":8,"column":10,"nodeType":"290","messageId":"291","endLine":8,"endColumn":17},{"ruleId":"298","severity":1,"message":"299","line":24,"column":6,"nodeType":"300","endLine":24,"endColumn":8,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":34,"column":1,"nodeType":"304","endLine":34,"endColumn":23},{"ruleId":"288","severity":1,"message":"305","line":18,"column":13,"nodeType":"290","messageId":"291","endLine":18,"endColumn":22},{"ruleId":"302","severity":1,"message":"303","line":211,"column":1,"nodeType":"304","endLine":211,"endColumn":66},{"ruleId":"298","severity":1,"message":"306","line":58,"column":6,"nodeType":"300","endLine":58,"endColumn":52,"suggestions":"307"},{"ruleId":"298","severity":1,"message":"308","line":51,"column":8,"nodeType":"300","endLine":51,"endColumn":48,"suggestions":"309"},{"ruleId":"310","severity":1,"message":"311","line":160,"column":33,"nodeType":"312","messageId":"313","endLine":160,"endColumn":36},{"ruleId":"288","severity":1,"message":"314","line":4,"column":10,"nodeType":"290","messageId":"291","endLine":4,"endColumn":23},{"ruleId":"288","severity":1,"message":"315","line":58,"column":11,"nodeType":"290","messageId":"291","endLine":58,"endColumn":15},{"ruleId":"288","severity":1,"message":"316","line":58,"column":17,"nodeType":"290","messageId":"291","endLine":58,"endColumn":24},{"ruleId":"298","severity":1,"message":"317","line":68,"column":7,"nodeType":"300","endLine":68,"endColumn":41,"suggestions":"318"},{"ruleId":"288","severity":1,"message":"319","line":3,"column":21,"nodeType":"290","messageId":"291","endLine":3,"endColumn":27},{"ruleId":"288","severity":1,"message":"320","line":3,"column":29,"nodeType":"290","messageId":"291","endLine":3,"endColumn":39},{"ruleId":"288","severity":1,"message":"321","line":3,"column":41,"nodeType":"290","messageId":"291","endLine":3,"endColumn":45},{"ruleId":"288","severity":1,"message":"322","line":3,"column":53,"nodeType":"290","messageId":"291","endLine":3,"endColumn":61},{"ruleId":"288","severity":1,"message":"323","line":8,"column":8,"nodeType":"290","messageId":"291","endLine":8,"endColumn":16},{"ruleId":"288","severity":1,"message":"324","line":9,"column":8,"nodeType":"290","messageId":"291","endLine":9,"endColumn":16},{"ruleId":"288","severity":1,"message":"325","line":55,"column":11,"nodeType":"290","messageId":"291","endLine":55,"endColumn":16},{"ruleId":"326","severity":1,"message":"327","line":49,"column":31,"nodeType":"328","messageId":"313","endLine":49,"endColumn":33},{"ruleId":"326","severity":1,"message":"327","line":51,"column":42,"nodeType":"328","messageId":"313","endLine":51,"endColumn":44},{"ruleId":"326","severity":1,"message":"327","line":53,"column":29,"nodeType":"328","messageId":"313","endLine":53,"endColumn":31},{"ruleId":"326","severity":1,"message":"327","line":55,"column":35,"nodeType":"328","messageId":"313","endLine":55,"endColumn":37},{"ruleId":"326","severity":1,"message":"327","line":57,"column":32,"nodeType":"328","messageId":"313","endLine":57,"endColumn":34},{"ruleId":"326","severity":1,"message":"327","line":59,"column":33,"nodeType":"328","messageId":"313","endLine":59,"endColumn":35},{"ruleId":"298","severity":1,"message":"308","line":20,"column":7,"nodeType":"300","endLine":20,"endColumn":9,"suggestions":"329"},{"ruleId":"326","severity":1,"message":"327","line":41,"column":35,"nodeType":"328","messageId":"313","endLine":41,"endColumn":37},{"ruleId":"288","severity":1,"message":"330","line":3,"column":22,"nodeType":"290","messageId":"291","endLine":3,"endColumn":34},{"ruleId":"288","severity":1,"message":"331","line":3,"column":36,"nodeType":"290","messageId":"291","endLine":3,"endColumn":49},{"ruleId":"288","severity":1,"message":"332","line":3,"column":51,"nodeType":"290","messageId":"291","endLine":3,"endColumn":63},{"ruleId":"288","severity":1,"message":"333","line":3,"column":66,"nodeType":"290","messageId":"291","endLine":3,"endColumn":82},{"ruleId":"288","severity":1,"message":"334","line":3,"column":84,"nodeType":"290","messageId":"291","endLine":3,"endColumn":96},{"ruleId":"288","severity":1,"message":"335","line":4,"column":16,"nodeType":"290","messageId":"291","endLine":4,"endColumn":27},{"ruleId":"288","severity":1,"message":"336","line":4,"column":42,"nodeType":"290","messageId":"291","endLine":4,"endColumn":51},{"ruleId":"288","severity":1,"message":"337","line":4,"column":53,"nodeType":"290","messageId":"291","endLine":4,"endColumn":59},{"ruleId":"288","severity":1,"message":"338","line":6,"column":10,"nodeType":"290","messageId":"291","endLine":6,"endColumn":22},{"ruleId":"288","severity":1,"message":"339","line":54,"column":10,"nodeType":"290","messageId":"291","endLine":54,"endColumn":16},{"ruleId":"288","severity":1,"message":"340","line":54,"column":18,"nodeType":"290","messageId":"291","endLine":54,"endColumn":27},{"ruleId":"298","severity":1,"message":"341","line":61,"column":8,"nodeType":"300","endLine":61,"endColumn":10,"suggestions":"342"},{"ruleId":"288","severity":1,"message":"295","line":1,"column":16,"nodeType":"290","messageId":"291","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"335","line":3,"column":16,"nodeType":"290","messageId":"291","endLine":3,"endColumn":27},{"ruleId":"288","severity":1,"message":"336","line":3,"column":42,"nodeType":"290","messageId":"291","endLine":3,"endColumn":51},{"ruleId":"288","severity":1,"message":"337","line":3,"column":53,"nodeType":"290","messageId":"291","endLine":3,"endColumn":59},{"ruleId":"288","severity":1,"message":"343","line":30,"column":9,"nodeType":"290","messageId":"291","endLine":30,"endColumn":13},{"ruleId":"288","severity":1,"message":"344","line":2,"column":10,"nodeType":"290","messageId":"291","endLine":2,"endColumn":17},{"ruleId":"288","severity":1,"message":"345","line":2,"column":8,"nodeType":"290","messageId":"291","endLine":2,"endColumn":16},{"ruleId":"288","severity":1,"message":"343","line":7,"column":7,"nodeType":"290","messageId":"291","endLine":7,"endColumn":11},{"ruleId":"288","severity":1,"message":"345","line":2,"column":8,"nodeType":"290","messageId":"291","endLine":2,"endColumn":16},{"ruleId":"288","severity":1,"message":"330","line":3,"column":22,"nodeType":"290","messageId":"291","endLine":3,"endColumn":34},{"ruleId":"288","severity":1,"message":"332","line":3,"column":51,"nodeType":"290","messageId":"291","endLine":3,"endColumn":63},{"ruleId":"288","severity":1,"message":"333","line":3,"column":66,"nodeType":"290","messageId":"291","endLine":3,"endColumn":82},{"ruleId":"346","severity":1,"message":"347","line":95,"column":13,"nodeType":"348","messageId":"349","endLine":107,"endColumn":7},{"ruleId":"350","severity":1,"message":"351","line":95,"column":13,"nodeType":"348","messageId":"352","endLine":107,"endColumn":7},{"ruleId":"298","severity":1,"message":"353","line":55,"column":8,"nodeType":"300","endLine":55,"endColumn":54,"suggestions":"354"},{"ruleId":"355","severity":1,"message":"356","line":86,"column":9,"nodeType":"357","messageId":"358","endLine":170,"endColumn":10},{"ruleId":"326","severity":1,"message":"327","line":118,"column":51,"nodeType":"328","messageId":"313","endLine":118,"endColumn":53},{"ruleId":"310","severity":1,"message":"311","line":271,"column":33,"nodeType":"312","messageId":"313","endLine":271,"endColumn":36},{"ruleId":"298","severity":1,"message":"306","line":48,"column":8,"nodeType":"300","endLine":48,"endColumn":10,"suggestions":"359"},{"ruleId":"298","severity":1,"message":"360","line":57,"column":8,"nodeType":"300","endLine":57,"endColumn":28,"suggestions":"361"},{"ruleId":"326","severity":1,"message":"327","line":114,"column":51,"nodeType":"328","messageId":"313","endLine":114,"endColumn":53},{"ruleId":"326","severity":1,"message":"327","line":139,"column":60,"nodeType":"328","messageId":"313","endLine":139,"endColumn":62},{"ruleId":"326","severity":1,"message":"362","line":160,"column":98,"nodeType":"328","messageId":"313","endLine":160,"endColumn":100},{"ruleId":"326","severity":1,"message":"327","line":294,"column":37,"nodeType":"328","messageId":"313","endLine":294,"endColumn":39},{"ruleId":"326","severity":1,"message":"327","line":296,"column":40,"nodeType":"328","messageId":"313","endLine":296,"endColumn":42},"no-native-reassign",["363"],"no-negated-in-lhs",["364"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","'Login' is defined but never used.","'Logout' is defined but never used.","'useEffect' is defined but never used.","'onLogin' is defined but never used.","'UserLogin' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLoggedUser'. Either include it or remove the dependency array. If 'getLoggedUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["365"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'localUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["366"],"React Hook useEffect has a missing dependency: 'onGetProducts'. Either include it or remove the dependency array. If 'onGetProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["367"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setAutoFreeze' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onGetSales' and 'selectedDate'. Either include them or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["368"],"'AppBar' is defined but never used.","'Typography' is defined but never used.","'Grow' is defined but never used.","'GridList' is defined but never used.","'PieChart' is defined but never used.","'BarChart' is defined but never used.","'theme' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",["369"],"'VictoryChart' is defined but never used.","'VictoryLegend' is defined but never used.","'VictoryLabel' is defined but never used.","'VictoryContainer' is defined but never used.","'VictoryGroup' is defined but never used.","'CardActions' is defined but never used.","'CardMedia' is defined but never used.","'Button' is defined but never used.","'Autocomplete' is defined but never used.","'loaded' is assigned a value but never used.","'setLoaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProducts'. Either include it or remove the dependency array. If 'getProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["370"],"'data' is assigned a value but never used.","'Popover' is defined but never used.","'ReactDOM' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","React Hook useEffect has missing dependencies: 'onGetMaterials', 'onGetProductByID', and 'productData.id'. Either include them or remove the dependency array. If 'onGetProductByID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["371"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["372"],"React Hook useEffect has a missing dependency: 'activeStep'. Either include it or remove the dependency array.",["373"],"Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},"Update the dependencies array to be: [getLoggedUser]",{"range":"392","text":"393"},"Update the dependencies array to be: [materialsEdit, materialsDelete, materialsAdd, onGetMaterials]",{"range":"394","text":"395"},"Update the dependencies array to be: [productDelete, productAdd, productEdit, onGetProducts]",{"range":"396","text":"397"},"Update the dependencies array to be: [salesAdd, salesEdit, salesDelete, onGetSales, selectedDate]",{"range":"398","text":"399"},"Update the dependencies array to be: [onGetProducts]",{"range":"400","text":"401"},"Update the dependencies array to be: [getProducts]",{"range":"402","text":"403"},"Update the dependencies array to be: [materialDelete, newMaterialItem, editProduct, productData.id, onGetProductByID, onGetMaterials]",{"range":"404","text":"405"},"Update the dependencies array to be: [onGetMaterials]",{"range":"406","text":"407"},"Update the dependencies array to be: [activeStep, newReturnedProduct]",{"range":"408","text":"409"},[687,689],"[getLoggedUser]",[1892,1938],"[materialsEdit, materialsDelete, materialsAdd, onGetMaterials]",[1671,1711],"[productDelete, productAdd, productEdit, onGetProducts]",[1814,1848],"[salesAdd, salesEdit, salesDelete, onGetSales, selectedDate]",[731,733],"[onGetProducts]",[1553,1555],"[getProducts]",[2049,2095],"[materialDelete, newMaterialItem, editProduct, productData.id, onGetProductByID, onGetMaterials]",[1827,1829],"[onGetMaterials]",[2225,2245],"[activeStep, newReturnedProduct]"]