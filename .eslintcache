[{"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js":"1","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js":"2","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js":"3","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js":"4","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js":"5","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"6","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx":"7","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx":"8","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx":"9","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"10","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js":"11","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"12","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js":"13","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js":"14","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx":"15","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx":"16","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"17","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js":"18","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx":"19","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js":"20"},{"size":1383,"mtime":1608744084375,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1608663578970,"results":"23","hashOfConfig":"22"},{"size":2852,"mtime":1608740056380,"results":"24","hashOfConfig":"22"},{"size":355,"mtime":1608663578967,"results":"25","hashOfConfig":"22"},{"size":1778,"mtime":1608678547441,"results":"26","hashOfConfig":"22"},{"size":7722,"mtime":1608744300360,"results":"27","hashOfConfig":"22"},{"size":3673,"mtime":1608744370855,"results":"28","hashOfConfig":"22"},{"size":160,"mtime":1608739380697,"results":"29","hashOfConfig":"22"},{"size":152,"mtime":1608739380700,"results":"30","hashOfConfig":"22"},{"size":3111,"mtime":1608743826036,"results":"31","hashOfConfig":"22"},{"size":384,"mtime":1608678547441,"results":"32","hashOfConfig":"22"},{"size":766,"mtime":1608663578969,"results":"33","hashOfConfig":"22"},{"size":722,"mtime":1608663578969,"results":"34","hashOfConfig":"22"},{"size":796,"mtime":1608663578969,"results":"35","hashOfConfig":"22"},{"size":167,"mtime":1608663578968,"results":"36","hashOfConfig":"22"},{"size":4242,"mtime":1608678547443,"results":"37","hashOfConfig":"22"},{"size":743,"mtime":1608663578969,"results":"38","hashOfConfig":"22"},{"size":777,"mtime":1608678547444,"results":"39","hashOfConfig":"22"},{"size":3648,"mtime":1608739380697,"results":"40","hashOfConfig":"22"},{"size":1385,"mtime":1608678547444,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1hi2d1u",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js",[],["89","90"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js",["91","92"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\n\nconst reducers = {\n    ...materials,\n    ...sales,\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js",["93"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onGetMaterials,\n    onGetSales,\n    onDeleteSale,\n    onAddSale,\n    onEditSale,\n}from \"./actions\"\n\nexport const materials = createReducer(\n    {\n        materialsList: [],\n        materialID: ''\n    },\n    {\n        [onGetMaterials.type]: (state, {payload: material}) => {\n            if (material === null){\n                return state\n            }\n            state.materialsList = material\n        },\n        [onDeleteSale.type]:(state, {payload: materialid}) => {\n            if (materialid === null) {\n                return state\n            }\n            console.log(materialid)\n            state.materialID = materialid\n        }\n    }\n)\n\nexport const sales = createReducer(\n    {\n       salesList: [],\n       saleID: '',\n       saleEdits: {} \n    }, \n    {\n        [onGetSales.type]: (state, {payload: salesList}) => {\n            if (sales === null) {\n                return state\n            } \n            /*    sales.forEach((sale) => {\n                state.byId[sale.id] = sale\n            })*/\n            return {...state.salesList, salesList}\n        },\n        [onDeleteSale.type]: (state, {payload: saleid}) => {            \n            if (saleid === null) {\n                return state\n            }\n            state.saleID = saleid   \n        },\n        [onAddSale.type]: (state, {payload:newSaleId}) => {\n            if(newSaleId === null){\n                return state\n            }\n            state.newSaleId = newSaleId\n        },          \n        [onEditSale.type]: (state, {payload: saleDetails}) => {\n            if (saleDetails === null) {\n                return state\n            }\n            state.saleEdits = saleDetails\n        }\n    }\n)\n\nexport default {materials, sales}","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["94","95","96","97","98"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport { setAutoFreeze } from 'immer'\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Popover from '@material-ui/core/Popover';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, } from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './SalesTable.css'\nimport AddSales from './AddSales'\nimport EditSales from './EditSales'\nimport { GetSales } from '../use-cases/getSales';\nimport { DeleteSale } from '../use-cases/deleteSale';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst SalesTable = ({ onGetSales, sales, onDeleteSale }) => {\n    const classes = useStyles();\n    console.log(sales.salesList)\n\n    //set date for date-pickers\n    let end_date = new Date()\n    let start_date = new Date().setDate(end_date.getDate() - 30)\n\n    const [selectedDate, setSelectedDate] = useState({ start: start_date, end: end_date });\n    const [open, setOpen] = useState(false)\n    const [data, setData] = useState(sales)\n    const [openEdit, setOpenEdit] = useState(false)\n    const [rowData, setRowData] = useState()\n\n    var tableData\n\n    //get sales from db\n    useEffect(() => {\n        onGetSales()       \n    }, [])\n\n    tableData = sales.map(data => ({\n        ...data\n    }))\n\n    //changes the start date of the reports\n    const handleStartDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            start: date\n        });\n    };\n\n    //changes the end date of the reports\n    const handleEndDateChange = (date) => {\n        setSelectedDate({\n            ...selectedDate,\n            end: date\n        });\n    };\n\n\n    //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'Product ID', field: 'product_id', hidden: true },\n        { title: 'Date', field: 'createdAt' },\n        { title: 'Product Number', field: 'product_number' },\n        { title: 'Product Name', field: 'product_name' },\n        { title: 'Quantity', field: 'quantity' },\n        { title: 'Price per Unit', field: 'price_per_unit' },\n        { title: 'Total Sales Price', field: 'total_price' },\n        { title: 'Category', field: 'product_category' },\n        { title: 'Purchased By', field: 'sold_to' },\n    ]\n\n    return (\n        <div className='salesContainer'>\n            <h1>Silverthread Sales </h1>\n            <div className='datePickerContainer'>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <Grid container justify=\"space-around\" style={{backgroundColor:'#FFFFFF'}}>\n                        <KeyboardDatePicker\n                            style={{backgroundColor:'#FFFFFF'}}\n                            margin=\"normal\"\n                            name=\"start\"\n                            id=\"date-picker-dialog\"\n                            label=\"Start Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.start}\n                            onChange={handleStartDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            name=\"end\"\n                            id=\"date-picker-dialog\"\n                            label=\"End Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={selectedDate.end}\n                            onChange={handleEndDateChange}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                    </Grid>\n                </MuiPickersUtilsProvider>\n                <div className={classes.root} style={{backgroundColor:'#FFFFFF'}}>\n                    <Button variant=\"contained\" color=\"secondary\">\n                        Submit\n                </Button>\n                </div>\n            </div>\n\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddSales />\n            </Popover>\n\n            {sales === [] ?\n                <div>Loading Data....</div>\n                :\n                <div className='salesMaterialTable'>\n                    <MaterialTable\n                        style={{backgroundColor:'#FFFFFF'}}\n                        title=\"Silverthread Sales\"\n                        columns={columns}\n                        data={tableData}\n\n                        options={{\n                            search: false,\n                            showTitle: false,\n                            filtering: true,\n                            addRowPosition: 'first',\n                            exportButton: true,\n                            //export csv is a function we can use to override the generic export and export to excel\n                            // exportCsv\n                            headerStyle: {\n                                backgroundColor: '#b71c1c',\n                                color: '#FFFFFF'\n                            },\n                        }}\n                        actions={[\n                            {\n                                icon: 'add',\n                                tooltip: 'Add Sale',\n                                isFreeAction: true,\n                                onClick: (event) => setOpen(true)\n                            },\n                            {\n                                icon: 'edit',\n                                tooltip: 'Edit Row',\n                                onClick: (event, rowData) => {\n                                    setRowData(rowData)\n                                    setOpenEdit(true)\n                                    console.log(rowData)\n                                }\n                            }\n                        ]}\n                        editable={{\n                            onRowDelete: oldData =>\n                                new Promise((resolve, reject) => {\n                                    setTimeout(() => {\n                                        const id = oldData.id;\n                                        onDeleteSale(id)\n                                        resolve()\n                                    }, 1000)\n                                }),\n                        }}\n                    />\n                </div>}\n        {/* </div> */}\n        <Popover\n            open={openEdit}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n            <EditSales saleData={rowData} />\n        </Popover>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    sales: state.sales.salesList\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetSales: GetSales(dispatch),\n    onDeleteSale: DeleteSale(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx",["99","100","101","102"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["103"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\"\nimport './MaterialsTable.css'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { DeleteMaterial } from \"../use-cases/deleteMaterial\"\n\nconst MaterialsTable = ({ onGetMaterials, materials, onDeleteMaterial }) => {\n\n  useEffect(() => {\n    onGetMaterials()\n  }, [materials])\n\n  let tableData = materials.map(data => ({\n    ...data\n}))\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Name', field: 'material_name' },\n    { title: 'Unit', field: 'unit' },\n    { title: 'Price per Unit', field: 'unit_price' },\n    { title: 'Category', field: 'category' },\n    { title: 'Vendor', field: 'vendor' },\n    { title: 'Product Number', field: 'vendor_material_id' },\n  ]\n\n  const [data, setData] = useState([\n    { id: '1', name: 'Jump Ring', description: 'small jump ring', unit_price: '.23', category: 'fasteners' },\n    { id: '2', name: 'Blue Bead', description: 'small blue bead', unit_price: '.84', category: 'bead' },\n    { id: '3', name: 'Leather Chain', description: 'Leather', unit_price: '.3.68', category: 'chain' },\n  ])\n\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <MaterialTable\n        style={{backgroundColor:'#FFFFFF'}}\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={tableData}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          addRowPosition: 'first',\n          exportButton: true,\n          //export csv is a function we can use to override the generic export and export to excel\n          // exportCsv\n          headerStyle: {\n            backgroundColor: '#01579b',\n            // backgroundColor: '#78bfb5',\n            color: '#FFFFFF'\n          }\n        }}\n        editable={{\n          onRowAdd: newData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                setData([...data, newData]);\n                resolve();\n              }, 1000)\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n                resolve();\n              }, 1000)\n            }),\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const id = oldData.id;\n                onDeleteMaterial(id)\n                resolve()\n              }, 1000)\n            }),\n        }}\n\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, {materials}) => ({\n  materials: state.materials.materialsList\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch),\n  onDeleteMaterial: DeleteMaterial(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js",["104"],"import { onAddSale } from \"../framework/actions\"\nimport { Popover } from '@material-ui/core';\n\n//This is a usecase for getting the list of sales\nexport const AddSale = (dispatch) => async (fields) => {\n   const newSale = {\n     /*  product_id: product_id \n     ^ gets product id from a fetch call to the products table route*/\n      product_number: fields.product_number,\n      product_name: fields.product_name,\n      product_category: fields.product_category,\n      price_per_unit: fields.price_per_unit,\n      quantity: fields.quantity,\n      total_price: fields.total_price,\n      sold_to: fields.sold_to,\n   }\n   console.log(\"NEW SALE UNDER THIS\")\n   console.log(newSale)\n\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   try {\n      const response = await fetch(`http://localhost:8000/sales/addNewSale`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(newSale),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onAddSale(success))\n   } catch (e) {\n      console.log(\"CAUGHT ERROR IN PROMISE\")\n   }\n}\n\nexport default AddSale\n",["105","106"],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":10,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"115","line":1,"column":27,"nodeType":"113","messageId":"114","endLine":1,"endColumn":38},{"ruleId":"116","severity":1,"message":"117","line":70,"column":1,"nodeType":"118","endLine":70,"endColumn":34},{"ruleId":"111","severity":1,"message":"119","line":4,"column":10,"nodeType":"113","messageId":"114","endLine":4,"endColumn":23},{"ruleId":"111","severity":1,"message":"120","line":38,"column":12,"nodeType":"113","messageId":"114","endLine":38,"endColumn":16},{"ruleId":"111","severity":1,"message":"121","line":38,"column":18,"nodeType":"113","messageId":"114","endLine":38,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":47,"column":8,"nodeType":"124","endLine":47,"endColumn":10,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":209,"column":33,"nodeType":"128","messageId":"129","endLine":209,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":10,"column":24,"nodeType":"128","messageId":"129","endLine":10,"endColumn":28},{"ruleId":"111","severity":1,"message":"121","line":13,"column":18,"nodeType":"113","messageId":"114","endLine":13,"endColumn":25},{"ruleId":"111","severity":1,"message":"130","line":90,"column":43,"nodeType":"113","messageId":"114","endLine":90,"endColumn":45},{"ruleId":"126","severity":1,"message":"127","line":102,"column":33,"nodeType":"128","messageId":"129","endLine":102,"endColumn":36},{"ruleId":"122","severity":1,"message":"131","line":12,"column":6,"nodeType":"124","endLine":12,"endColumn":17,"suggestions":"132"},{"ruleId":"111","severity":1,"message":"133","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":17},{"ruleId":"107","replacedBy":"134"},{"ruleId":"109","replacedBy":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'setAutoFreeze' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onGetSales'. Either include it or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["138"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["139"],"'Popover' is defined but never used.",["136"],["137"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [onGetSales]",{"range":"144","text":"145"},"Update the dependencies array to be: [materials, onGetMaterials]",{"range":"146","text":"147"},[1483,1485],"[onGetSales]",[401,412],"[materials, onGetMaterials]"]