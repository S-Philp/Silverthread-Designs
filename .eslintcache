[{"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js":"1","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js":"2","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js":"3","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js":"4","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/register.jsx":"5","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/login.jsx":"6","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/UserSignOut.js":"7","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx":"8","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/frameworks/reducers.js":"9","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx":"10","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx":"11","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/frameworks/actions.js":"12","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/UserRegister.js":"13","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/UserLogin.js":"14","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/CheckUser.js":"15","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js":"16","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx":"17","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx":"18","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js":"19","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterial.js":"20","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js":"21","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/excelMaterialsReports.js":"22","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/excelProductsReports.js":"23","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteProduct.js":"24","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditMaterials.jsx":"25","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddMaterials.jsx":"26","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js":"27","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editMaterial.js":"28","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getProducts.js":"29","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/exelSalesReports.js":"30","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js":"31","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js":"32","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx":"33","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditProduct.jsx":"34","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx":"35","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx":"36","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editProduct.js":"37","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editWholesale.js":"38","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js":"39","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterialItem.js":"40","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterialItem.js":"41","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getProductByID.js":"42","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addProduct.js":"43","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js":"44"},{"size":2290,"mtime":1609905757124,"results":"45","hashOfConfig":"46"},{"size":3157,"mtime":1609891588880,"results":"47","hashOfConfig":"46"},{"size":362,"mtime":1608663578970,"results":"48","hashOfConfig":"46"},{"size":498,"mtime":1609773617291,"results":"49","hashOfConfig":"46"},{"size":2483,"mtime":1609901660763,"results":"50","hashOfConfig":"46"},{"size":11731,"mtime":1609905980091,"results":"51","hashOfConfig":"46"},{"size":437,"mtime":1609779328159,"results":"52","hashOfConfig":"46"},{"size":152,"mtime":1608758589064,"results":"53","hashOfConfig":"46"},{"size":693,"mtime":1609779328157,"results":"54","hashOfConfig":"46"},{"size":7650,"mtime":1609865490603,"results":"55","hashOfConfig":"46"},{"size":5070,"mtime":1609779328154,"results":"56","hashOfConfig":"46"},{"size":265,"mtime":1609779328156,"results":"57","hashOfConfig":"46"},{"size":740,"mtime":1609779328159,"results":"58","hashOfConfig":"46"},{"size":1044,"mtime":1609779328158,"results":"59","hashOfConfig":"46"},{"size":815,"mtime":1609779328158,"results":"60","hashOfConfig":"46"},{"size":5787,"mtime":1609865539655,"results":"61","hashOfConfig":"46"},{"size":10546,"mtime":1609888717027,"results":"62","hashOfConfig":"46"},{"size":6182,"mtime":1609865539659,"results":"63","hashOfConfig":"46"},{"size":743,"mtime":1608663578969,"results":"64","hashOfConfig":"46"},{"size":815,"mtime":1609773617295,"results":"65","hashOfConfig":"46"},{"size":798,"mtime":1609773617295,"results":"66","hashOfConfig":"46"},{"size":983,"mtime":1609774570563,"results":"67","hashOfConfig":"46"},{"size":1103,"mtime":1609774570563,"results":"68","hashOfConfig":"46"},{"size":803,"mtime":1608758589062,"results":"69","hashOfConfig":"46"},{"size":3355,"mtime":1609779328154,"results":"70","hashOfConfig":"46"},{"size":4325,"mtime":1609865539656,"results":"71","hashOfConfig":"46"},{"size":1131,"mtime":1609779328153,"results":"72","hashOfConfig":"46"},{"size":781,"mtime":1608758589062,"results":"73","hashOfConfig":"46"},{"size":734,"mtime":1608758589063,"results":"74","hashOfConfig":"46"},{"size":1298,"mtime":1609774570563,"results":"75","hashOfConfig":"46"},{"size":817,"mtime":1608758589062,"results":"76","hashOfConfig":"46"},{"size":763,"mtime":1609446712242,"results":"77","hashOfConfig":"46"},{"size":18207,"mtime":1609865539657,"results":"78","hashOfConfig":"46"},{"size":13186,"mtime":1609865539658,"results":"79","hashOfConfig":"46"},{"size":6204,"mtime":1609865539658,"results":"80","hashOfConfig":"46"},{"size":7197,"mtime":1609865539657,"results":"81","hashOfConfig":"46"},{"size":792,"mtime":1609774570588,"results":"82","hashOfConfig":"46"},{"size":798,"mtime":1609774570562,"results":"83","hashOfConfig":"46"},{"size":777,"mtime":1608678547444,"results":"84","hashOfConfig":"46"},{"size":524,"mtime":1609774570561,"results":"85","hashOfConfig":"46"},{"size":496,"mtime":1609774570562,"results":"86","hashOfConfig":"46"},{"size":718,"mtime":1609774570564,"results":"87","hashOfConfig":"46"},{"size":767,"mtime":1609779328155,"results":"88","hashOfConfig":"46"},{"size":1526,"mtime":1609865539659,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hi2d1u",{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"95"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"95"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"95"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"95"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"95"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"95"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"95"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"95"},"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/index.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/App.js",["193","194"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from \"react-redux\"\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n// import './App.css';\n\n\n// Pages\nimport MaterialsTable from './data-tables/ui/MaterialsTable'\nimport SalesTable from './data-tables/ui/SalesTable'\nimport ProductsTable from './data-tables/ui/ProductsTable'\nimport Dashboard from './data-tables/ui/Dashboard'\nimport Login from './login/ui/login';\nimport Logout from './login/ui/logout';\n\nimport {UserSignout} from './login/use-cases/UserSignOut'\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`nav-tabpanel-${index}`}\n      aria-labelledby={`nav-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `nav-tab-${index}`,\n    'aria-controls': `nav-tabpanel-${index}`,\n  };\n}\n\nfunction LinkTab(props) {\n  return (\n    <Tab\n      component=\"a\"\n      onClick={(event) => {\n        event.preventDefault();\n      }}\n      {...props}\n    />\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst NavTabs = ({onUserSignOut})=> {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs\n          variant=\"fullWidth\"\n          value={value}\n          onChange={handleChange}\n          aria-label=\"nav tabs example\"\n        >\n          <LinkTab label=\"Dashboard\" href=\"/dashboard\" {...a11yProps(0)} />\n          <LinkTab label=\"Materials\" href=\"/materials\" {...a11yProps(1)} />\n          <LinkTab label=\"Products\" href=\"/products\" {...a11yProps(2)} />\n          <LinkTab label=\"Sales\" href=\"/sales\" {...a11yProps(3)} />\n          <LinkTab label=\"Logout\" href=\"/login\" onClick = {()=>{onUserSignOut()}} {...a11yProps(4)} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <Dashboard />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <MaterialsTable />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <ProductsTable />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <SalesTable />\n      </TabPanel>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  login: state.login.currentUser\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onUserSignOut: UserSignout(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavTabs)\n",["195","196"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/reportWebVitals.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/common/redux/store.js",["197","198"],"import { combineReducers, createStore } from \"redux\"\nimport { configureStore } from '@reduxjs/toolkit'\nimport materials from \"../../data-tables/framework/reducers\"\nimport sales from \"../../data-tables/framework/reducers\"\nimport products from \"../../data-tables/framework/reducers\"\nimport login from \"../../login/frameworks/reducers\"\n\nconst reducers = {\n    ...materials,\n    ...sales,\n    ...products,\n    ...login,\n\n}\n\nconst store = configureStore({\n    reducer: reducers,\n})\n\nexport default store","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/register.jsx",["199","200","201"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/login.jsx",["202","203","204"],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/UserSignOut.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/ui/logout.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/frameworks/reducers.js",["205"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onLogin,\n    getLoggedUser,\n    onUserSignout\n} from \"./actions\"\n\nexport const login = createReducer (\n    {\n        currentUser: {}\n    },\n    {\n        [onLogin.type]: (state, {payload: user}) => {\n            if (user === null) {\n                return state\n            }\n            state.currentUser = user\n        },\n\n        [getLoggedUser.type]: (state, {payload: user}) => {\n            if (user === null) {\n                return state\n            }\n            state.currentUser = user\n        },\n\n        [onUserSignout.type]: (state) => {\n            state.currentUser = {}\n        },\n    }\n)\n\nexport default {login}","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/Dashboard.jsx",["206","207","208","209","210"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { VictoryPie, VictoryChart, VictoryLegend, VictoryLabel } from 'victory';\n\nconst data = [\n    { x: 1, y: 2 },\n    { x: 2, y: 2 },\n    { x: 3, y: 3 }\n  ];\n  const legendData = [{ name: \"Necklaces\" }, { name: \"Bracelets\" }, { name: \"Rings\" }];\n\n\nconst Dashboard = () => {\n    return (\n      <div>\n        <h1>Silverthread Products Sold</h1>\n        <svg color={\"white\"} width={500} height={400} style={{ border: \"1px solid #ccc\", backgroundColor: \"white\" }}>\n        {/* <h1>Silverthread Prodcuts Sold</h1> */}\n        {/* <div> */}\n        {/* <p>Silverthread Prodcuts Sold</p> */}\n          <VictoryLegend\n            standalone={false}\n            colorScale={[\"#78bfb5\", \"#f06292\", \"#b71c1c\"]}\n            x={20}\n            y={40}\n            gutter={20}\n            title=\"Legend\"\n            centerTitle\n            style={{ border: { stroke: \"black\" } }}\n            data={legendData}\n          />\n          <VictoryPie\n        //   titleComponent={\"Silverthread Prodcuts Sold\"}\n            // title=\"Silverthread Prodcuts Sold\"\n            // name=\"Silverthread Prodcuts Sold\"\n            standalone={false}\n            width={400}\n            height={300}\n            padding={{\n              left: 200,\n              bottom: 20,\n              top: 100\n            }}\n            colorScale={[\"#78bfb5\", \"#f06292\", \"#b71c1c\"]}\n            data={data}\n            labels={() => null}\n          />\n          {/* </div> */}\n        </svg>\n        </div>\n      );\n//     return (\n//         <div>\n// <VictoryChart>\n// <VictoryPie\n//   data={[\n//     { x: \"Necklaces\", y: 35, yourAttribute: \"#78bfb5\" },\n//     { x: \"Bracelets\", y: 40, yourAttribute: \"#f06292\" },\n//     { x: \"Earrings\", y: 55, yourAttribute: \"#b71c1c\" }\n//   ]}\n//   style={{\n//     data: {\n//       fill: (d) => d.slice.data.yourAttribute\n//     }\n//   }}\n// />\n// </VictoryChart>\n            {/* <VictoryPie\n  colorScale={[\"#78bfb5\", \"#f06292\", \"#01579b\", \"#b71c1c\", \"navy\" ]}\n  data={[\n    { x: \"Earrings\", y: 20 },\n    { x: \"Necklaces\", y: 22 },\n    { x: \"Bracelets\", y: 15 },\n    { x: \"Rings\", y: 10 },\n    { x: \"Other\", y: 20 },\n    { x: \"Mezuzzahs\", y: 2 },\n    { x: \"Brooches\", y: 1 },\n    { x: \"Chains\", y: 10 }\n  ]}\n/> */}\n    //     </div>\n    // )\n}\n\nexport default Dashboard\n\n\n// import * as React from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import {\n//   Chart,\n//   PieSeries,\n// } from '@devexpress/dx-react-chart-material-ui';\n// import { withStyles } from '@material-ui/core/styles';\n// import Typography from '@material-ui/core/Typography';\n// import NativeSelect from '@material-ui/core/NativeSelect';\n// import FormControl from '@material-ui/core/FormControl';\n// import {\n//   schemeCategory10,\n//   schemeAccent,\n//   schemeDark2,\n//   schemePaired,\n//   schemePastel1,\n//   schemePastel2,\n//   schemeSet1,\n//   schemeSet2,\n//   schemeSet3,\n// } from 'd3-scale-chromatic';\n\n// import { Palette } from '@devexpress/dx-react-chart';\n\n// const schemeCollection = [\n//   schemeCategory10,\n//   schemeAccent,\n//   schemeDark2,\n//   schemePaired,\n//   schemePastel1,\n//   schemePastel2,\n//   schemeSet1,\n//   schemeSet2,\n//   schemeSet3,\n// ];\n\n// const demoStyles = theme => ({\n//   typography: {\n//     marginTop: 0,\n//     marginBottom: theme.spacing(1),\n//   },\n//   div: {\n//     width: '200px',\n//     marginLeft: '50px',\n//     paddingBottom: '30px',\n//   },\n//   item: {\n//     width: '40px',\n//     height: '40px',\n//   },\n//   schemeConteiner: {\n//     display: 'flex',\n//     justifyContent: 'center',\n//     marginTop: theme.spacing(1),\n//   },\n// });\n\n// const data = [];\n// for (let i = 0; i < 15; i += 1) {\n//   data.push({ category: `item${i}`, val: 1 });\n// }\n\n// class Demo extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       data,\n//       scheme: schemeCollection[0],\n//     };\n\n//     this.changeScheme = this.changeScheme.bind(this);\n//   }\n\n//   changeScheme(e) {\n//     this.setState({ scheme: schemeCollection[e.target.value] });\n//   }\n\n//   render() {\n//     const { data: chartData, scheme } = this.state;\n//     const { classes } = this.props;\n\n//     return (\n//       <Paper>\n//         <Chart\n//           data={chartData}\n//         >\n//           <Palette scheme={scheme} />\n//           <PieSeries\n//             valueField=\"val\"\n//             argumentField=\"category\"\n//           />\n//         </Chart>\n//         <div className={classes.schemeConteiner}>\n//           {scheme.map(color => (\n//             <div\n//               key={color}\n//               className={classes.item}\n//               style={{ backgroundColor: color }}\n//             />\n//           ))}\n//         </div>\n//         <div className={classes.div}>\n//           <Typography component=\"h5\" variant=\"h5\" className={classes.typography}>Scheme</Typography>\n//           <FormControl>\n//             <NativeSelect onChange={this.changeScheme} defaultValue={0}>\n//               <option value={0}>schemeCategory10</option>\n//               <option value={1}>schemeAccent</option>\n//               <option value={2}>schemeDark2</option>\n//               <option value={3}>schemePaired</option>\n//               <option value={4}>schemePastel1</option>\n//               <option value={5}>schemePastel2</option>\n//               <option value={6}>schemeSet1</option>\n//               <option value={7}>schemeSet2</option>\n//               <option value={8}>schemeSet3</option>\n//             </NativeSelect>\n//           </FormControl>\n//         </div>\n//       </Paper>\n//     );\n//   }\n// }\n\n// export default withStyles(demoStyles, { name: 'Demo' })(Demo);\n\n\n// import * as React from 'react';\n// import Paper from '@material-ui/core/Paper';\n// import {\n//   Chart,\n//   PieSeries,\n// } from '@devexpress/dx-react-chart-material-ui';\n// import { Palette } from '@devexpress/dx-react-chart';\n// import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\n\n// const theme = createMuiTheme({\n//     palette: {\n//       background: {\n//         paper: \"#FFFFFF\"\n//         // paper: \"#bdbdbd\"\n//         // paper: \"#616161\" // gray\n//       },\n//        primary: {\n//         //  main: \"#4db6ac\" //turquoise\n//          main: \"#78bfb5\", //other turquoise\n//          contrastText: \"#FFFFFF\"\n//         //  main: \"#f06292\" //pink\n//                  },\n//        secondary: {\n//          main: \"#f06292\" //pink\n//           // main: \"#01579b\" //blue\n//           // main: \"#b71c1c\" //red\n//           // main: \"#f50057\" //dark pink\n//                   },\n//              },\n//   // fontFamily: font // as an aside, highly recommend importing roboto font for Material UI projects! Looks really nice\n//   });\n\n// const data = [\n//   { country: 'Necklaces', area: 12 },\n//   { country: 'Rings', area: 7 },\n//   { country: 'Earrings', area: 7 },\n//   { country: 'Bracelettes', area: 7 },\n//   { country: 'Brazil', area: 6 },\n//   { country: 'Australia', area: 5 },\n//   { country: 'India', area: 2 },\n//   { country: 'Others', area: 55 },\n// ];\n// export default class Demo extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       data,\n//     };\n//   }\n\n//   render() {\n//     const { data: chartData } = this.state;\n\n//     return (\n//         <ThemeProvider theme={theme}>\n//       <Paper>\n//         <Chart\n//           data={chartData}\n//         >\n//           <PieSeries\n//             valueField=\"area\"\n//             argumentField=\"country\"\n//           />\n//         </Chart>\n//       </Paper>\n//       </ThemeProvider>\n//     );\n//   }\n// }","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/MaterialsTable.jsx",["211"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from \"react-redux\"\nimport './MaterialsTable.css'\nimport \"./AddMaterialModal.css\"\nimport AddMaterials from './AddMaterials'\nimport EditMaterials from './EditMaterials'\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { DeleteMaterial } from \"../use-cases/deleteMaterial\"\nimport {AddMaterial} from \"../use-cases/addMaterial\";\nimport Popover from '@material-ui/core/Popover';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport IconButton from '@material-ui/core/IconButton';\nimport {exportCsv } from '../use-cases/excelMaterialsReports'\n\nconst AddMaterialModal = ({closeModal }) => {\n\n    return(\n        <div className = \"add-material-container\">\n           <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeModal()} ><HighlightOffIcon /></IconButton>\n            </div>\n            <AddMaterials closeModal = {closeModal}/>      \n        </div>\n     \n    )\n}\n\nconst EditMaterialModal = ({closeEditModal, rowData }) => {\n     \n  return(\n      <div className = \"edit-material-container\">\n         <div className='closeIconButton'>\n              <IconButton variant=\"contained\" onClick={() => closeEditModal()} ><HighlightOffIcon /></IconButton>\n          </div>\n          <EditMaterials materialData={rowData} closeEditModal = {closeEditModal}/>      \n      </div>\n   \n  )\n}\n\n\nconst MaterialsTable = ({ onGetMaterials, materials, onDeleteMaterial, materialsEdit, materialsDelete, materialsAdd}) => {\n  const [open, setOpen] = useState(false)\n  const [openEdit, setOpenEdit] = useState(false)\n  const [rowData, setRowData] = useState()\n  \n  const closeModal = () => {\n    setOpen(false)\n  }\n\n  const closeEditModal = () => {\n    setOpenEdit(false)\n  }\n\n  useEffect(() => {  \n    onGetMaterials()\n  }, [materialsEdit, materialsDelete, materialsAdd])\n\n  let tableData = materials.map(data => ({\n    ...data\n  }))\n\n  const columns = [\n    { title: 'id', field: 'id', hidden: true },\n    { title: 'Material', field: 'material_name', align: 'left' }, \n    { title: 'Unit of Measure', field: 'unit', align: 'left'  }, \n    { title: 'Price per Unit', field: 'unit_price', align: 'left', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n    { title: 'Vendor', field: 'vendor', align: 'left'  },\n    { title: 'Product Number', field: 'vendor_material_id', align: 'left' },\n    { title: 'Category', field: 'category', align: 'left' },\n  ]\n\n  return (\n    <div className='materialsContainer'>\n      <h1>Silverthread Materials </h1>\n      <Popover\n        open={open}\n        anchorOrigin={{\n          vertical: 'center',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <AddMaterialModal className = \"modal\" closeModal = {closeModal}/>\n      </Popover>\n\n      <Popover\n            open={openEdit}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n        >\n          <EditMaterialModal rowData={rowData} closeEditModal = {closeEditModal} />\n          </Popover>\n        \n      <MaterialTable\n        style={{backgroundColor:'#FFFFFF'}}\n        title=\"Silverthread Materials\"\n        columns={columns}\n        data={tableData}\n        options={{\n          search: false,\n          showTitle: false,\n          filtering: true,\n          exportButton: true,        \n          exportCsv,\n          headerStyle: {\n            backgroundColor: '#01579b',          \n            color: '#FFFFFF'\n          }\n        }}\n\n        actions={[\n          {\n            icon: 'add',\n            tooltip: 'Add Material',\n            isFreeAction: true,\n            onClick: (event) => setOpen(true)\n          },\n          {\n            icon: 'edit',\n            tooltip: 'Edit Row',\n            onClick: (event, rowData) => {           \n              setRowData(rowData)\n              setOpenEdit(true)\n            }\n          }\n        ]}\n\n        editable={{\n          onRowDelete: oldData =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const id = oldData.id;              \n                onDeleteMaterial(id)\n                resolve()\n              }, 1500)\n            }),\n        }}\n\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = (state, {materials}) => ({\n  materials: state.materials.materialsList,\n  materialsDelete: state.materials.materialID,\n  materialsAdd: state.materials.materialAdd,\n  materialsEdit: state.materials.materialEdit\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetMaterials: GetMaterials(dispatch),\n  onAddMaterial: AddMaterial(dispatch),\n  onDeleteMaterial: DeleteMaterial(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MaterialsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/frameworks/actions.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/UserRegister.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/UserLogin.js",["212"],"import { onLogin } from \"../frameworks/actions\"\n\nexport const UserLogin = (dispatch) => async(\n    user\n) => {\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   \n      const response = await fetch(`http://localhost:8000/login`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(user),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      const localUser = {\n          auth: success.auth, \n          token: success.token, \n          userId: success.user.id, \n          username: success.user.username, \n          firstname: success.user.first_name, \n          lastname: success.user.last_name}\n\n      localStorage.setItem(\"token\", success.token)\n      console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onLogin(success))\n}\n\nexport default UserLogin","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/login/use-cases/CheckUser.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/reducers.js",["213"],"import { createReducer } from \"@reduxjs/toolkit\"\n\nimport {\n    onGetMaterials,\n    onAddMaterial,\n    onDeleteMaterial,\n    onEditMaterial,\n    \n    onGetSales,\n    onDeleteSale,\n    onAddSale,\n    onEditSale,\n\n    onAddProduct,\n    onGetProducts,\n    onDeleteProduct,\n    onEditProduct,\n    onGetProductByID,\n    \n    onDeleteMaterialItem,\n    onAddNewMaterial,\n    onUpdateWholesale\n\n} from \"./actions\"\n\nexport const materials = createReducer(\n    {\n        materialsList: [],\n        byId: {},\n        materialID: '',\n        materialAdd: '',\n        materialEdit: '',\n    },\n    {\n        [onGetMaterials.type]: (state, { payload: material }) => {\n            if (material === null) {\n                return state\n            }\n            state.materialsList = material\n            material.forEach((item) => {\n                state.byId[item.id] = item\n            })\n        },\n\n        [onAddMaterial.type]: (state,{payload: material}) => {\n            if (material === null){\n                return state\n            } \n            state.materialsList = [...state.materialsList, material]\n            state.byId[material.id] = material\n            \n        }, \n\n        [onDeleteMaterial.type]:(state, {payload: materialid}) => {\n            if (materialid === null) {\n                return state\n            }\n            state.materialID = materialid\n            delete state.byId[materialid.deletedMaterial]\n\n        },\n        /*\n        [onAddMaterial.type]: (state, {payload: materialDetails }) => {\n            if (materialDetails === null) {\n                return state\n            }\n            state.materialAdd = materialDetails\n        },*/\n        [onEditMaterial.type]: (state, {payload: materialEdits}) => {\n            if (materialEdits ===  null) {\n                return state\n            }\n            state.materialEdit = materialEdits\n        }\n    }\n)\n\nexport const sales = createReducer(\n    {\n       salesList: [],\n       byId: {},\n       saleID: '',      \n       saleEdits: {} \n    }, \n    {\n        [onAddSale.type]: (state,{payload: sale}) => {\n            if (sale === null){\n                return state\n            } \n            state.salesList = [...state.salesList, sale]\n            state.byId[sale.id] = sale\n            \n        }, \n\n        [onGetSales.type]: (state, {payload: salesList}) => {\n            if (sales === null) {\n                return state\n            }\n            /*    sales.forEach((sale) => {\n                state.byId[sale.id] = sale\n            })*/\n            return { ...state, salesList }\n        },\n        [onDeleteSale.type]: (state, { payload: saleid }) => {\n            if (saleid === null) {\n                console.log(null)\n                return state\n            }\n            console.log(saleid)\n            state.saleID = saleid\n        },\n        [onAddSale.type]: (state, { payload: newSaleId }) => {\n            if (newSaleId === null) {\n                return state\n            }\n            state.newSaleId = newSaleId\n        },\n        [onEditSale.type]: (state, { payload: saleDetails }) => {\n            if (saleDetails === null) {\n                return state\n            }\n            state.saleEdits = saleDetails\n        }\n    }\n)\n\nexport const products = createReducer(\n    {\n        productsList: [],\n        byCategories:{},\n        byId: {},\n        productsDelete: '',\n        newProduct: {},\n        productListing: {},\n    },\n    {\n        [onGetProducts.type]: (state, { payload: products }) => {\n          if (products === null) {\n            return state;\n          }\n          state.productsList = products;\n          products.forEach((product)=>{\n            state.byId[product.id] = product\n            if (!state.byCategories[product.category]) {\n                state.byCategories[product.category] = [product]\n            }\n            else{\n                state.byCategories[product.category] = [...state.byCategories[product.category], product]\n            }\n          })\n\n\n        },\n    \n        [onDeleteProduct.type]: (state, { payload: productid }) => {\n            if (productid === null) {\n                return state\n            }\n            state.productsDelete = productid\n        },\n        [onAddProduct.type]: (state, { payload: newProduct }) => {\n            if (newProduct === null) {\n                return state\n            } else {\n                state.newProduct = newProduct\n            }\n\n        },\n        [onEditProduct.type]: (state, { payload: editedProduct }) => {\n            if (editedProduct === null) {\n                return state\n            } else {\n                state.editedProduct = editedProduct\n            }\n        },\n        [onGetProductByID.type]: (state, { payload: productListing }) => {\n            if (productListing === null) {\n                return state\n            } else {\n                state.productListing = productListing\n            }\n\n        },\n        [onUpdateWholesale.type]: (state, {payload: productDetails}) => {\n            if (productDetails === null) {\n                return state\n            } else {\n                state.editedProduct = productDetails\n            }\n\n        }\n    }\n)\n\nexport const materialByProduct = createReducer(\n    {\n        materialItem: {},\n        newMaterial: []\n    },\n    {\n    [onDeleteMaterialItem.type]: (state, { payload: materialID }) => {\n        if (materialID === null) {\n            return state\n        } else {\n            state.materialItem = materialID\n        }\n    },\n    [onAddNewMaterial.type]: (state, {payload: newMaterial}) => {\n        if (newMaterial === null) {\n            return state\n        } else {\n            state.newMaterial = newMaterial\n        }\n    }\n\n})\n\nexport default { materials, sales, products, materialByProduct }","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/SalesTable.jsx",["214","215","216","217"],"import MaterialTable from \"material-table\"\nimport { useEffect, useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { setAutoFreeze } from \"immer\"\n\nimport \"date-fns\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport Popover from \"@material-ui/core/Popover\"\nimport {\n   MuiPickersUtilsProvider,\n   KeyboardDatePicker,\n} from \"@material-ui/pickers\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\"\nimport IconButton from \"@material-ui/core/IconButton\"\n\nimport \"./SalesTable.css\"\nimport AddSales from \"./AddSales\"\nimport EditSales from \"./EditSales\"\nimport { GetSales } from \"../use-cases/getSales\"\nimport { DeleteSale } from \"../use-cases/deleteSale\"\nimport { exportCsv } from \"../use-cases/exelSalesReports\"\nimport AddMaterial from \"../use-cases/addMaterial\"\n\nconst useStyles = makeStyles((theme) => ({\n   root: {\n      \"& > *\": {\n         margin: theme.spacing(1),\n      },\n   },\n}))\n\nconst SalesTable = ({\n   onGetSales,\n   sales,\n   onDeleteSale,\n   salesAdd,\n   salesEdit,\n   salesDelete,\n}) => {\n   const classes = useStyles()\n\n   //set date for date-pickers on load\n   const getStartDate = () => {\n      let d = new Date()\n      d.setDate(d.getDate() - 30)\n      return d\n   }\n   let end_date = new Date()\n   let start_date = getStartDate()\n\n   const [selectedDate, setSelectedDate] = useState({\n      start: start_date,\n      end: end_date,\n   })\n   const [open, setOpen] = useState(false)\n   const [openEdit, setOpenEdit] = useState(false)\n   const [openAdd, setOpenAdd] = useState(false)\n   const [rowData, setRowData] = useState()\n\n   var tableData\n\n   //get sales from db\n   useEffect(() => {\n      onGetSales(selectedDate)\n   }, [salesAdd, salesEdit, salesDelete])\n\n   tableData = sales.map((data) => ({\n      ...data,\n   }))\n\n   //changes the start date of the reports\n   const handleStartDateChange = (date) => {\n      setSelectedDate({\n         ...selectedDate,\n         start: date,\n      })\n   }\n\n   //changes the end date of the reports\n   const handleEndDateChange = (date) => {\n      setSelectedDate({\n         ...selectedDate,\n         end: date,\n      })\n   }\n\n   //onclick function that runs new sales report based on input dates\n   const handleRunSalesReport = (dates) => {\n      if (dates.start === null || dates.end === null) {\n         alert(\"Please enter a start and end date for your report\")\n      } else if (dates.start > dates.end) {\n         alert(\"The start date must be before the end date\")\n      } else {\n         onGetSales(dates)\n      }\n   }\n\n   const EditSalesModal = ({ closeEditModal }) => {\n      return (\n         <div className=\"editSalesModal\">\n            <div className=\"closeIconButton\">\n               <IconButton variant=\"contained\" onClick={() => closeEditModal()}>\n                  <HighlightOffIcon />\n               </IconButton>\n            </div>\n            <EditSales saleData={rowData} closeEditModal={closeEditModal} />\n         </div>\n      )\n   }\n\n   const AddSalesModal = ({ closeAddModal }) => {\n      return (\n         <div className=\"editSalesModal\">\n            <div className=\"closeIconButton\">\n               <IconButton variant=\"contained\" onClick={() => closeAddModal()}>\n                  <HighlightOffIcon />\n               </IconButton>\n            </div>\n            <AddSales saleData={rowData} closeAddModal={closeAddModal} />\n         </div>\n      )\n   }\n\n   const closeEditModal = () => {\n      setOpenEdit(false)\n   }\n\n   const closeAddModal = () => {\n      setOpenAdd(false)\n   }\n\n   //sets column headers\n   const columns = [\n      { title: \"id\", field: \"id\", hidden: true },\n      { title: \"Product ID\", field: \"product_id\", hidden: true },\n      { title: \"Date\", field: \"date_sold\", defaultSort: \"desc\", align: \"left\" },\n      {\n         title: \"Product Number\",\n         field: \"product_number\",\n         align: \"left\",\n         hidden: true,\n      },\n      { title: \"Product Name\", field: \"product_name\", align: \"left\" },\n      { title: \"Quantity\", field: \"quantity\", align: \"left\" },\n      {\n         title: \"Price per Unit\",\n         field: \"price_per_unit\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      { title: \"Discount\", field: \"discount\", align: \"left\" },\n      {\n         title: \"Total Sales Price\",\n         field: \"total_price\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      {\n         title: \"Tax\",\n         field: \"tax\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      {\n         title: \"Shipping\",\n         field: \"shipping\",\n         align: \"left\",\n         type: \"currency\",\n         currencySetting: {\n            currencyCode: \"USD\",\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n         },\n      },\n      {\n         title: \"Category\",\n         field: \"product_category\",\n         align: \"left\",\n         hidden: true,\n      },\n      { title: \"Purchased By\", field: \"sold_to\", align: \"left\" },\n   ]\n\n   return (\n      <div className=\"salesContainer\">\n         <h1>Silverthread Sales </h1>\n         <div className=\"datePickerContainer\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n               {/* <Grid container justify=\"space-around\" style={{backgroundColor:'#FFFFFF'}}> */}\n               <Grid\n                  container\n                  justify=\"space-evenly\"\n                  alignItems=\"center\"\n                  style={{ backgroundColor: \"#FFFFFF\" }}\n               >\n                  <KeyboardDatePicker\n                     style={{ backgroundColor: \"#FFFFFF\" }}\n                     margin=\"normal\"\n                     name=\"start\"\n                     id=\"date-picker-dialog\"\n                     label=\"Start Date\"\n                     format=\"MM/dd/yyyy\"\n                     value={selectedDate.start}\n                     onChange={handleStartDateChange}\n                     KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                     }}\n                  />\n\n                  <KeyboardDatePicker\n                     margin=\"normal\"\n                     name=\"end\"\n                     id=\"date-picker-dialog\"\n                     label=\"End Date\"\n                     format=\"MM/dd/yyyy\"\n                     value={selectedDate.end}\n                     onChange={handleEndDateChange}\n                     KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                     }}\n                  />\n\n                  <div\n                     className={classes.root}\n                     style={{ backgroundColor: \"#FFFFFF\" }}\n                  >\n                     <Button\n                        onClick={() => handleRunSalesReport(selectedDate)}\n                        variant=\"contained\"\n                        color=\"secondary\"\n                     >\n                        Run Report\n                     </Button>\n                  </div>\n               </Grid>\n            </MuiPickersUtilsProvider>\n         </div>\n\n         <Popover\n            open={openAdd}\n            anchorOrigin={{\n               vertical: \"center\",\n               horizontal: \"center\",\n            }}\n            transformOrigin={{\n               vertical: \"top\",\n               horizontal: \"center\",\n            }}\n         >\n            <AddSalesModal className=\"modal\" closeAddModal={closeAddModal} />\n         </Popover>\n\n         <Popover\n            open={openEdit}\n            anchorOrigin={{\n               vertical: \"center\",\n               horizontal: \"center\",\n            }}\n            transformOrigin={{\n               vertical: \"top\",\n               horizontal: \"center\",\n            }}\n         >\n            <EditSalesModal className=\"modal\" closeEditModal={closeEditModal} />\n         </Popover>\n\n         {sales === [] ? (\n            <div>Loading Data....</div>\n         ) : (\n            <div className=\"salesMaterialTable\">\n               <MaterialTable\n                  style={{ backgroundColor: \"#FFFFFF\" }}\n                  title=\"Silverthread Sales\"\n                  columns={columns}\n                  data={tableData}\n                  options={{\n                     search: false,\n                     showTitle: false,\n                     filtering: true,\n                     exportButton: true,\n                     exportCsv,\n                     headerStyle: {\n                        backgroundColor: \"#b71c1c\",\n                        color: \"#FFFFFF\",\n                     },\n                  }}\n                  actions={[\n                     {\n                        icon: \"add\",\n                        tooltip: \"Add Sale\",\n                        isFreeAction: true,\n                        onClick: (event) => setOpenAdd(true),\n                     },\n                     {\n                        icon: \"edit\",\n                        tooltip: \"Edit Row\",\n                        onClick: (event, rowData) => {\n                           setRowData(rowData)\n                           setOpenEdit(true)\n                        },\n                     },\n                  ]}\n                  editable={{\n                     onRowDelete: (oldData) =>\n                        new Promise((resolve, reject) => {\n                           setTimeout(() => {\n                              const id = oldData.id\n                              onDeleteSale(id)\n                              resolve()\n                           }, 1000)\n                        }),\n                  }}\n               />\n            </div>\n         )}\n      </div>\n   )\n}\n\nconst mapStateToProps = (state, {sales}) => ({\n   sales: state.sales.salesList,\n   salesAdd: state.sales.newSaleId,\n   salesEdit: state.sales.saleEdits,\n   salesDelete: state.sales.saleID,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n   onGetSales: GetSales(dispatch),\n   onDeleteSale: DeleteSale(dispatch),\n   onAddMaterial: AddMaterial(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SalesTable)\n","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/ProductsTable.jsx",["218","219"],"import MaterialTable from 'material-table';\nimport { useEffect, useState } from 'react';\nimport { connect } from 'react-redux'\nimport './ProductsTable.css'\n\nimport Popover from '@material-ui/core/Popover';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport EditProduct from './EditProduct'\nimport AddProducts from './AddProducts'\nimport { GetProducts } from '../use-cases/getProducts'\nimport { DeleteProduct } from '../use-cases/deleteProduct'\nimport { exportCsv} from '../use-cases/excelProductsReports'\n\n\nconst AddProductModal = ({ closeModal }) => {\n    return (\n        <div className=\"addProductModal\">\n            <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeModal()}><HighlightOffIcon /></IconButton>\n            </div>\n            <AddProducts />\n        </div>\n    )\n}\n\nconst EditProductModal = ({ closeEditModal, rowData }) => {\n    return (\n        <div className=\"addProductModal\">\n            <div className='closeIconButton'>\n                <IconButton variant=\"contained\" onClick={() => closeEditModal()}><HighlightOffIcon /></IconButton>\n            </div>\n            <EditProduct productData={rowData} closeEditModal={closeEditModal}/>\n        </div>\n    )\n}\n\n\nconst ProductsTable = ({ onGetProducts, products, onDeleteProduct, productDelete, productAdd, productEdit }) => {\n\n    const [open, setOpen] = useState(false)\n    const [openEdit, setOpenEdit] = useState(false)\n    const [rowData, setRowData] = useState('')\n\n    var tableData\n\n    //get products from db\n    useEffect(() => {\n        onGetProducts()\n    }, [productDelete, productAdd, productEdit])\n\n    tableData = products.map(data => ({\n        ...data\n    }))\n\n\n    //sets column headers\n    const columns = [\n        { title: 'id', field: 'id', hidden: true },\n        { title: 'labor', field: 'labor', hidden: true, align: 'left' },\n        { title: 'Product Number', field: 'product_num', align: 'left' },\n        { title: 'Product Name', field: 'product_name', align: 'left' },\n        { title: 'Wholesale Price', field: 'wholesale', align: 'left', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n        { title: 'Retail Price', field: 'retail_price', align: 'left', type:'currency', currencySetting:{ currencyCode:'USD', minimumFractionDigits:2, maximumFractionDigits:2} },\n        { title: 'Category', field: 'category', align: 'left' },\n        { title: 'Inventory - Onsite', field: 'quantity', align: 'left' },\n        { title: 'Inventory - PTM', field: 'quantity_painted_tree', align: 'left' },\n    ]\n\n    const closeModal = () => {\n        setOpen(false)\n    }\n\n    const closeEditModal = () => {\n        setOpenEdit(false)\n    }\n\n    return (\n        <div className='productsContainer'>\n            <h1>Silverthread Products </h1>\n            <Popover\n                open={open}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <AddProductModal className=\"modal\" closeModal={closeModal} />\n            </Popover>\n\n            <Popover\n                open={openEdit}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <EditProductModal className=\"modal\" closeEditModal={closeEditModal} rowData={rowData} />\n            </Popover>\n\n            <div className='productsMaterialTable'>\n                <MaterialTable\n                    style={{ backgroundColor: '#FFFFFF' }}\n                    title=\"Silverthread Products\"\n                    columns={columns}\n                    data={tableData}\n\n                    options={{\n                        search: false,\n                        showTitle: false,\n                        filtering: true,\n                        exportButton: true,                        \n                        exportCsv,\n                        headerStyle: {\n                            backgroundColor: '#f06292',\n                            color: '#FFFFFF'\n                        },\n                    }}\n                    actions={[\n                        {\n                            icon: 'add',\n                            tooltip: 'Add Product',\n                            isFreeAction: true,\n                            onClick: (event) => setOpen(true)\n                        },\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit Row',\n                            onClick: (event, rowData) => {                        \n                                setRowData(rowData)\n                                setOpenEdit(true)                                \n                            }\n                        }\n                    ]}\n                    editable={{\n                        onRowDelete: oldData =>\n                            new Promise((resolve, reject) => {\n                                setTimeout(() => {\n                                    const id = oldData.id;\n                                    onDeleteProduct(id)\n                                    resolve()\n                                }, 1000)\n                            }),\n                    }}\n                />\n            </div>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state, { }) => ({\n    products: state.products.productsList,\n    productDelete: state.products.productsDelete,\n    productAdd: state.products.newProduct,\n    productEdit: state.products.editedProduct\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetProducts: GetProducts(dispatch),\n    onDeleteProduct: DeleteProduct(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsTable)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getMaterials.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/excelMaterialsReports.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/excelProductsReports.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteProduct.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditMaterials.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddMaterials.jsx",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/framework/actions.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editMaterial.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getProducts.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/exelSalesReports.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getSales.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddProducts.jsx",["220","221","222","223","224","225","226"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport './AddProducts.css'\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport { GetMaterials } from \"../use-cases/getMaterials\"\nimport { AddProduct } from \"../use-cases/addProduct\"\nimport EditProductDetails from '../use-cases/editProduct';\n\n//for material ui components\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nconst AddProducts = ({ onGetMaterials, materials, newReturnedProduct, onAddProduct, onAddRetail, }) => {\n\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const [newProduct, setNewProduct] = useState({ 'product_name': '', 'product_num': '', 'category': '', 'labor': '' })\n    const [returnedProduct, setReturnedProduct] = useState({})\n    const [materialToAdd, setMaterialToAdd] = useState({ 'material_unit_amount': '' })\n    const [addedMaterialsList, setAddedMaterialsList] = useState([])\n\n    const steps = getSteps();\n\n    //gets materials for selector in add materials step on load\n    useEffect(() => {\n        onGetMaterials()\n    }, [])\n\n    //updates returned product, resets new product, and moves stepper forward when returned product is received\n    useEffect(() => {\n        setReturnedProduct(newReturnedProduct)\n        if (activeStep > 0) {\n            setNewProduct({ 'product_name': '', 'product_num': '', 'category': '', 'labor': '' })\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    }, [newReturnedProduct])\n\n\n    //these are the steps shown at the top of the stepper\n    function getSteps() {\n        return ['Enter Product', 'Add Materials', 'Set Pricing'];\n    }\n\n    function getStepContent(step) {\n\n        switch (step) {\n            //Input product name, product number, categorgy, labor time\n            case 0:\n                //list of jewelry categories to choose from\n                const category = [{ title: 'Earrings' }, { title: 'Necklaces' }, { title: 'Bracelets' }, { title: 'Rings' }, { title: 'Mezuzzahs' }, { title: 'Brooches' }, { title: 'Chains' }, { title: 'Other' }]\n\n                //handles the input of the product name and number\n                const handleProductInput = (e) => {\n                    setNewProduct({\n                        ...newProduct,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return (\n                    <div className=\"productDetailContainer\">\n\n                        <h4>Enter Product Details</h4>\n                        <div className=\"textField\">\n                            <TextField name=\"product_name\" onChange={handleProductInput} value={newProduct.product_name} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className=\"textField\">\n                            <TextField name=\"product_num\" onChange={handleProductInput} value={newProduct.product_num} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className=\"textField\">\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={category.map((option) => option.title)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='category' onSelect={handleProductInput} value={newProduct.category} label=\"Category\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )} handleProductInput\n                            />\n                        </div>\n                        <div className=\"textField\">\n                            <TextField name=\"labor\" onChange={handleProductInput} value={newProduct.labor} id=\"outlined-basic\" label=\"Labor (minutes)\" variant=\"outlined\" fullWidth />\n                        </div>\n                    </div>\n                );\n\n            //Input materials and quantity into MaterialsList   \n            case 1:\n                //STEP 2 -handles selection on material from selection picker\n                const handleMaterialInput = (e) => {\n                    let materialItem = e.target.value\n\n                    let material = materials.find(item => {\n                        return item.material_name == materialItem\n                    })\n\n                    //sets into material to add array\n                    setMaterialToAdd({\n                        ...materialToAdd,\n                        material\n                    })\n                }\n\n                //inputs quantity of materials\n                const handleQuantityInput = (e) => {\n                    setMaterialToAdd({\n                        ...materialToAdd,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                //adds material in materialToAdd into the MaterialsArry\n                const addToMaterialList = (addMaterial) => {\n\n                    let quantity = +addMaterial.material_unit_amount\n\n                    if (!addMaterial.material) {\n                        alert('Please select a material')\n                    } else if (isNaN(quantity) || quantity == '') {\n                        alert('Please enter a quantity')\n                    } else {\n                        setAddedMaterialsList([...addedMaterialsList,\n                        {\n                            material_id: addMaterial.material.id,\n                            material_name: addMaterial.material.material_name,\n                            unit_price: addMaterial.material.unit_price.toFixed(2),\n                            material_unit_amount: addMaterial.material_unit_amount,                            \n                        }\n                        ])\n\n                        setMaterialToAdd({\n                            material: {},\n                            material_unit_amount: ''\n                        })\n                    }\n                }\n\n                //allows user to delete added materials before saving to db\n                const deleteMaterial = (id) => {\n                    let updatedMaterialList = addedMaterialsList.filter(item => item.material_id != id)\n                    setAddedMaterialsList(updatedMaterialList)\n                }\n\n                //map through materials in MaterialsList to show what has been added\n                const displayMaterialList = addedMaterialsList.map(item => {                   \n                    return <div key={item.material_id}>{item.material_name}: {item.material_unit_amount} @ ${item.unit_price} each <IconButton onClick={() => deleteMaterial(item.material_id)} aria-label=\"delete\"><DeleteIcon /></IconButton></div>\n                })\n\n\n                return (\n                    <div>\n                        <div className='textField'>\n                            <b>Select Materials:</b>\n                        </div>\n                        <div className='textField'>\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={materials.map((option) => option.material_name)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='material' onSelect={handleMaterialInput} label=\"Select Material\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )}\n                            />\n                        </div>\n                        <div className='textField'>\n                            <TextField name=\"material_unit_amount\" value={materialToAdd.material_unit_amount} onChange={handleQuantityInput} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className='textField'>\n                            <Button onClick={() => addToMaterialList(materialToAdd)} variant=\"contained\" color=\"primary\" className={classes.button} >\n                                Add Material\n                            </Button>\n                        </div>\n                        {addedMaterialsList.length >= 1 ? <div className=\"addedMaterials\">\n                            <b>Added Materials: </b>\n                            {displayMaterialList}\n                        </div> : null}\n\n                    </div>\n                );\n\n\n            // list all product details and add retail price and inventory    \n            case 2:\n                const handleSetPricing = (e) => {\n                    setReturnedProduct({\n                        ...returnedProduct,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return <div className=\"pricingContainer\">\n                    <h4>Set Pricing and Inventory</h4>\n                    <label><b>Name:</b> {returnedProduct.product_name}</label>\n                    <label><b>Product number:</b> {returnedProduct.product_num}</label>\n                    <label><b>Category:</b> {returnedProduct.category}</label>\n                    <label><b>Wholesale Price:</b> ${returnedProduct.wholesale.toFixed(2)}</label>\n                    \n                    <div className='pricingInputs'>\n                        <h3>Add Retail Price:</h3>\n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                            <TextField name='retail_price' onChange={handleSetPricing} id=\"outlined-basic\" label=\"Retai Price\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </form>\n                    </div>\n                    <div className='pricingInputs'>\n                        <h3>Add Inventory - Onsite:</h3>                    \n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                            <TextField name='quantity' onChange={handleSetPricing} id=\"outlined-basic\" label=\"Inventory (Onsite)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </form>\n                    </div>\n                    <div className='pricingInputs'>\n                    <h3>Add Inventory - Painted Tree:</h3>                      \n                        <form className={classes.root} noValidate autoComplete=\"off\">\n                            <TextField name='quantity_painted_tree' onChange={handleSetPricing} id=\"outlined-basic\" label=\"Inventory (PTM)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </form>\n                    \n                    </div>\n                </div>\n            default:\n                return 'Unknown step';\n        }\n    }\n\n    // OnClick Functions For Stepper:\n\n    //handles adding newProduct and materials to db from on click\n    const addProductToDB = async (product, listMaterials) => {\n\n        const addProduct = {\n            product_name: product.product_name,\n            product_num: product.product_num,\n            product_id: product.product_id,\n            category: product.category,\n            labor: product.labor,\n            materials: listMaterials\n        }\n        //call function here pass in addProduct\n        onAddProduct(addProduct)\n    }\n\n    //from onclick in last step add retail price and inventory to the db\n    const addRetailPriceToDB = async (finalProduct) => {\n\n        //check to make sure retail price is currency\n        var regex = /^\\d+(?:\\.\\d{0,2})$/;\n        let retail = finalProduct.retail_price\n\n        //check to make sure inventory is a number\n        let quantity = +finalProduct.quantity\n\n        if (!finalProduct.retail_price || (!regex.test(retail))) {\n            alert('The retail price must be entered in the format X.XX')\n\n        } else if (!finalProduct.quantity || isNaN(quantity)) {\n            alert('Inventory must be entered as a whole number')\n\n        } else {\n            onAddRetail(finalProduct)\n            setReturnedProduct({})\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    }\n\n\n    //handle back, next and close handle the nav buttons at the bottom of the screen\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    //takes user from entering details to enterin materials - check to make sure all fields are filled in\n    const handleNext = () => {\n        //check to make sure labor is a number\n        let labor = +newProduct.labor\n\n        if (newProduct.product_name == '') {\n            alert('Please enter a product name')\n        } else if (newProduct.category == '') {\n            alert('Please enter a category')\n        } else if (isNaN(labor) || labor === '') {\n            alert('Please enter the number of minutes required')\n        } else {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    };\n\n    return (\n        <div className=\"addProductsContainer\">\n            <h2>Add New Product</h2>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n\n                        );\n                    })}\n\n                </Stepper>\n                <div>\n                    {activeStep === steps.length ? (\n                        <div>\n                            <Typography className={classes.instructions}>\n                                All steps completed. Your product is now live.\n                            </Typography>\n                        </div>\n                    ) : (\n                            <div>\n                                <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                                <div>\n                                    <Button disabled={activeStep === 0 || activeStep === 2} onClick={handleBack} className={classes.button}>\n                                        Back\n                                </Button>\n\n                                    {/* this button shows on the first step and takes the input for the product details */}\n                                    {activeStep === 0 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={handleNext}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                        : null}\n\n\n                                    {/* This button shows on the second step and sends all product info to the db */}\n                                    {activeStep === 1 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            //addProductsTODB - line 45\n                                            onClick={() => addProductToDB(newProduct, addedMaterialsList)}\n                                            className={classes.button}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                        </Button>\n                                        : null}\n\n                                    {/* This button shows on the final step and handles taking the input for retail pricing and inventory and sends to the db */}\n                                    {activeStep === 2 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => addRetailPriceToDB(returnedProduct)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Save' : 'Next'}\n                                        </Button>\n                                        : null}\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, { materials }) => ({\n    materials: state.materials.materialsList,\n    newReturnedProduct: state.products.newProduct,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetMaterials: GetMaterials(dispatch),\n    onAddProduct: AddProduct(dispatch),\n    onAddRetail: EditProductDetails(dispatch)\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProducts)\n","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditProduct.jsx",["227","228","229","230"],"import './EditProduct.css'\nimport { connect } from 'react-redux'\nimport { useEffect, useState } from 'react'\nimport { GetProductByID } from '../use-cases/getProductByID'\nimport { GetMaterials } from '../use-cases/getMaterials'\nimport { EditProductDetails } from '../use-cases/editProduct'\nimport { DeleteMaterialItem } from '../use-cases/deleteMaterialItem'\nimport { AddNewMaterial } from '../use-cases/addMaterialItem'\nimport { UpdateWholesale } from '../use-cases/editWholesale'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button'\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Typography from '@material-ui/core/Typography';\n\n\n\n//for material ui components\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n\nconst EditProduct = ({ productData, onGetProductByID, productListing, onGetMaterials, materials, onEditProduct, onDeleteMaterialItem, materialDelete, onAddNewMaterial, newMaterialItem, onUpdateWholesale, closeEditModal, editProduct }) => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = useState(0);\n\n    const [productDetails, setProductDetails] = useState({})\n    const [newMaterial, setNewMaterial] = useState({ product_id: productData.id, material_unit_amount: '', })\n    const [itemMaterialsList, setItemMaterialsList] = useState([])\n\n    const steps = getSteps();\n\n    useEffect(() => {\n        let id = productData.id\n        onGetProductByID(id)\n        onGetMaterials()\n    }, [materialDelete, newMaterialItem, editProduct])\n\n    useEffect(() => {\n        setProductDetails(productListing)\n\n        if (productListing.MaterialByProdNums) {\n            setItemMaterialsList(productListing.MaterialByProdNums)\n        } else {\n            setItemMaterialsList([])\n        }\n    }, [productListing])\n\n    //handles changes to product listing from textboxes\n    const handleOnChange = (e) => {\n        setProductDetails({\n            ...productDetails,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    let materialItem = itemMaterialsList.map(item => {\n        return <div className='materialItem' key={item.id}> {item.material_name}: {item.material_unit_amount} @ ${item.material_cost.toFixed(2)} each <IconButton onClick={() => onDeleteMaterialItem(item.id)} aria-label=\"delete\"><DeleteIcon /></IconButton></div>\n    })\n\n    //these are the steps shown at the top of the stepper\n    function getSteps() {\n        return ['Edit Product Details', 'Edit Wholesale Price'];\n    }\n\n    function getStepContent(step) {\n\n        switch (step) {\n            case 0:\n                return (\n                    <div className=\"editProductContainer\">\n                        <div className='textInput'>\n                            <TextField name='product_name' value={productDetails.product_name} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='product_num' value={productDetails.product_num} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='wholesale' value={productDetails.wholesale} onChange={handleOnChange} id=\"outlined-basic\" label=\"Wholesale Price\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='retail_price' value={productDetails.retail_price} onChange={handleOnChange} id=\"outlined-basic\" label=\"Retail Price\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='quantity' value={productDetails.quantity} onChange={handleOnChange} id=\"outlined-basic\" label=\"Inventory (Home)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <TextField name='quantity_painted_tree' value={productDetails.quantity_painted_tree} onChange={handleOnChange} id=\"outlined-basic\" label=\"Inventory (PTM)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                        </div>\n                    </div>\n                );\n\n            //Input materials and quantity into MaterialsList   \n            case 1:\n                //STEP 2 -handles selection on material from selection picker\n                const handleMaterialInput = (e) => {\n                    let materialItem = e.target.value\n\n                    let material = materials.find(item => {\n                        return item.material_name == materialItem\n                    })\n\n                    setNewMaterial({\n                        ...newMaterial,\n                        material\n                    })\n                }\n\n                //inputs quantity of materials\n                const handleQuantityInput = (e) => {\n                    setNewMaterial({\n                        ...newMaterial,\n                        [e.target.name]: e.target.value\n                    })\n                }\n\n                return (\n                    <div>\n                        <div className='textInput'>\n                            <div><h2>Edit Materials</h2>\n                                <b>Current Materials List:</b>\n                                {materialItem}\n                            </div>\n                            <b>Add New Material:</b>\n                        </div>\n                        <div className='textInput'>\n                            <Autocomplete\n                                id=\"free-solo-demo\"\n                                freeSolo\n                                options={materials.map((option) => option.material_name)}\n                                renderInput={(params) => (\n                                    <TextField {...params} name='material' onSelect={handleMaterialInput} label=\"Select Material\" margin=\"normal\" variant=\"outlined\" fullWidth />\n                                )}\n                            />\n                        </div>\n                        <div className='textField'>\n                            <TextField name=\"material_unit_amount\" value={newMaterial.material_unit_amount} onChange={handleQuantityInput} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" fullWidth />\n                        </div>\n                        <div className='textInput'>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => onAddNewMaterial(newMaterial)} className={classes.button} fullWidth >\n                                Add Material\n                            </Button>\n                        </div>\n                        <div className='laborContainer'>\n                            <h2>Edit Labor</h2>\n                            <form className={classes.root} noValidate autoComplete=\"off\">\n                                <TextField name='labor' value={productDetails.labor} onChange={handleOnChange} id=\"outlined-basic\" label=\"Labor (Minutes)\" variant=\"outlined\" InputLabelProps={{ shrink: true, }} fullWidth />\n                            </form>\n                        </div>\n                    </div>\n                );\n        }\n    }\n    // OnClick Functions For Stepper:\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleNext = (product) => {\n        onEditProduct(product)\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleComplete = (product) => {\n        onEditProduct(product)\n        closeEditModal()\n    };\n\n    const handleWholesaleUpdate = (product) => {\n        onUpdateWholesale(product)\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    }\n\n    return (\n        <div className=\"addProductsContainer\">\n            <h2>Edit Product</h2>\n            <div className={classes.root}>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps = {};\n                        const labelProps = {};\n\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                    })}\n\n                </Stepper>\n                <div>\n                    {activeStep === steps.length ? (\n                        <div>\n                            <Typography className={classes.instructions}>\n                                All steps completed. Your product is now live.\n                                </Typography>\n                        </div>\n                    ) : (\n                            <div>\n                                <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n                                <div>\n                                    <Button disabled={activeStep === 0 || activeStep === 2} onClick={handleBack} className={classes.button}>\n                                        Back\n                                    </Button>\n\n                                    {/* this button shows on the first step and takes the input for the product details */}\n                                    {activeStep === 0 ? <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={() => handleNext(productDetails)}\n                                        className={classes.button}\n                                    >\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                    </Button>\n                                        : null}\n\n                                    {activeStep === 0 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => handleComplete(productDetails)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Finish' : 'Save'}\n                                        </Button>\n\n                                        : null}\n\n                                    {/* This button shows on the wholesale pricing step */}\n                                    {activeStep === 1 ?\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={() => handleWholesaleUpdate(productDetails)}\n                                            className={classes.button}\n                                            startIcon={<SaveIcon />}\n                                        >\n                                            {activeStep === steps.length - 1 ? 'Save' : 'Save'}\n                                        </Button>\n                                        : null}\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nconst mapStateToProps = (state, { }) => ({\n    productListing: state.products.productListing,\n    materials: state.materials.materialsList,\n    materialDelete: state.materialByProduct.materialItem,\n    newMaterialItem: state.materialByProduct.newMaterial,\n    editProduct: state.products.editedProduct\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetProductByID: GetProductByID(dispatch),\n    onGetMaterials: GetMaterials(dispatch),\n    onEditProduct: EditProductDetails(dispatch),\n    onDeleteMaterialItem: DeleteMaterialItem(dispatch),\n    onAddNewMaterial: AddNewMaterial(dispatch),\n    onUpdateWholesale: UpdateWholesale(dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditProduct)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/EditSales.jsx",["231","232","233","234","235","236"],"import { useState } from 'react'\nimport { connect } from 'react-redux' \nimport { EditSale } from '../use-cases/editSale'\nimport './EditSales.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport React from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from \"@material-ui/icons/Save\"\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst EditSales = (props, {onEditSale}) => {\n    const classes = useStyles();\n\n    const [updatedSalesData, setUpdatedSalesData] = useState(props.saleData)\n\n    const handleOnChange = (e) => {\n        setUpdatedSalesData({\n            ...updatedSalesData,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleDateChange = (date) => {\n        setUpdatedSalesData({\n            ...updatedSalesData,\n            createdAt: date\n        })\n    };\n\n    const handleOnClick = (data) => {        \n        //check to make sure quantity is a number\n        const quantity = +data.quantity\n        const price_per_unit = +data.price_per_unit\n        const total_price = +data.total_price\n\n        if (data.product_name == '') {\n            alert('Please enter the name of the product you sold')\n        } else if (data.product_category == '') {\n            alert('Please enter the category of the product you sold')\n        } else if (quantity == '' || isNaN(quantity)) {\n            alert('Please enter the quantity sold')\n        } else if (price_per_unit == '' || isNaN(price_per_unit) ) {\n            alert('Please enter the price per unit in the format X.XX')\n        } else if (total_price == '' || isNaN(total_price) ) {\n            alert('Please enter the total price in the format X.XX')\n        } else if (data.sold_to == '') {\n            alert('Please enter the name of the buyer')\n        } else {\n            props.onEditSale(data)\n            props.closeEditModal()   \n        }\n            \n    }\n \n    return (\n        <div className='editSalesContainer'>\n            <h2>Edit Sale</h2>\n            <div>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_number' value={updatedSalesData.product_number} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Number\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_name' value={updatedSalesData.product_name} onChange={handleOnChange} id=\"outlined-basic\" label=\"Product Name\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='quantity' value={updatedSalesData.quantity} onChange={handleOnChange} id=\"outlined-basic\" label=\"Quantity\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='price_per_unit' value={updatedSalesData.price_per_unit} onChange={handleOnChange} id=\"outlined-basic\" label=\"Price Per Unit\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='discount' value={updatedSalesData.discount} onChange={handleOnChange} id=\"outlined-basic\" label=\"Discount\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='tax' value={updatedSalesData.tax} onChange={handleOnChange} id=\"outlined-basic\" label=\"Total Tax Amount\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='shipping' value={updatedSalesData.shipping} onChange={handleOnChange} id=\"outlined-basic\" label=\"Shipping Amount\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='total_price' value={updatedSalesData.total_price} onChange={handleOnChange} id=\"outlined-basic\" label=\"Total Sales Price\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='product_category' value={updatedSalesData.product_category} onChange={handleOnChange} id=\"outlined-basic\" label=\"Category\" variant=\"outlined\" />\n                </form>\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <TextField name='sold_to' value={updatedSalesData.sold_to} onChange={handleOnChange} id=\"outlined-basic\" label=\"Sold To\" variant=\"outlined\" />\n                </form>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                    <KeyboardDatePicker\n                        margin=\"normal\"\n                        name=\"createdAt\"\n                        id=\"date-picker-dialog\"\n                        label=\"Sales Date\"\n                        format=\"MM/dd/yyyy\"\n                        value={updatedSalesData.createdAt}\n                        onChange={handleDateChange}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                        fullWidth\n                    />\n                </MuiPickersUtilsProvider>\n            </div>\n            <div>        \n                    <Button onClick={() => handleOnClick(updatedSalesData)} fullWidth startIcon={<SaveIcon />} variant=\"contained\" color=\"secondary\">\n                    Save\n                </Button>\n                \n            </div>\n        </div>\n    )\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    onEditSale: EditSale(dispatch),\n    \n  })\nexport default connect(null, mapDispatchToProps)(EditSales)","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/ui/AddSales.jsx",["237","238"],"import TextField from \"@material-ui/core/TextField\"\nimport SaveIcon from \"@material-ui/icons/Save\"\nimport Button from \"@material-ui/core/Button\"\nimport { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { AddSale } from \"../use-cases/addSale\"\nimport { GetProducts } from '../use-cases/getProducts'\nimport \"./AddMaterialModal.css\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport {\n   MuiPickersUtilsProvider,\n   KeyboardDatePicker,\n} from \"@material-ui/pickers\"\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst AddSales = ({ addSale, onGetProducts, products, closeAddModal }) => {\n   // putting empty fields object into local state\n   useEffect(() => {\n      onGetProducts()\n   }, [])\n\n   const [fields, setFields] = useState({ 'tax': 8.25, date_sold: new Date(), shipping: 0, quantity: 0, discount: 0 })\n\n   const setField = (evt) =>\n      setFields({\n         ...fields,\n         [evt.target.name]: evt.target.value,\n      })\n\n   const handleDateChange = (date) => {\n      setFields({\n         ...fields,\n         date_sold: date\n      })\n   };\n\n   const getProductDetails = (e) => {\n      let selected_product = e.target.value\n\n      let productDetails = products.find(item => {\n         return item.product_name == selected_product\n      })\n\n      setFields({\n         ...fields,\n         productDetails\n      })\n   }\n\n   return (\n      <div className=\"addMaterialTBContainer\">\n         <h2>Add Sale</h2>\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Product Number\"\n               name=\"product_number\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}\n\n         <div className=\"inputContainer\">\n            {/* <TextField\n               className=\"outlined\"\n               label=\"Product Name\"\n               name=\"product_name\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            /> */}\n\n            {/* Selector for products */}\n            <Autocomplete\n               id=\"free-solo-demo\"\n               freeSolo\n               options={products.map((option) => option.product_name)}\n               renderInput={(params) => (\n                  <TextField {...params} name='product_name' onSelect={getProductDetails} value=\"\" label=\"Product\" margin=\"normal\" variant=\"outlined\" fullWidth />\n               )} handleProductInput\n            />\n         </div>\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Quantity\"\n               name=\"quantity\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Price per Unit\"\n               name=\"price_per_unit\"               \n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Discount\"\n               name=\"discount\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Total Sales Price\"\n               name=\"total_price\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Tax\"\n               name=\"tax\"\n               value={fields.tax}\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Shipping\"\n               name=\"shipping\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         {/* <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Category\"\n               name=\"product_category\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div> */}        \n\n         <div className=\"inputContainer\">\n            <TextField\n               className=\"outlined\"\n               label=\"Purchased By\"\n               name=\"sold_to\"\n               onChange={setField}\n               InputLabelProps={{\n                  shrink: true,\n               }}\n               variant=\"outlined\"\n               fullWidth\n            />\n         </div>\n\n         <div className=\"inputContainer\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n               <KeyboardDatePicker\n                  margin=\"normal\"\n                  name=\"date_sold\"\n                  id=\"date-picker-dialog\"\n                  label=\"Date Sold\"\n                  format=\"MM/dd/yyyy\"\n                  value={fields.date_sold}\n                  onChange={handleDateChange}\n                  KeyboardButtonProps={{\n                     'aria-label': 'change date',\n                  }}\n                  fullWidth\n               />\n            </MuiPickersUtilsProvider>\n         </div>\n\n         <div>\n            <Button\n               onClick={() => {\n                  console.log(fields)\n                  addSale(fields)\n                  closeAddModal()\n               }}\n               variant=\"contained\"\n               color=\"secondary\"\n               size=\"large\"\n               className=\"addSalesBtn\"\n               startIcon={<SaveIcon />}\n               fullWidth\n            >\n               Save\n            </Button>\n         </div>\n      </div>\n   )\n}\n\nconst mapStateToProps = (state) => ({\n   products: state.products.productsList,\n})\n\n// CRUD operation\nconst mapDispatchToProps = (dispatch) => ({\n   addSale: AddSale(dispatch),\n   onGetProducts: GetProducts(dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSales)\n","/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editProduct.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editWholesale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/editSale.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addMaterialItem.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/deleteMaterialItem.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/getProductByID.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addProduct.js",[],"/Users/shannelphilp/Desktop/Repositories/silver-thread-client/src/data-tables/use-cases/addSale.js",["239"],"import { onAddSale } from \"../framework/actions\"\nimport { Popover } from '@material-ui/core';\n\n//This is a usecase for getting the list of sales\nexport const AddSale = (dispatch) => async (fields) => {\n   \n   // const newSale = {\n   //    product_id: fields.productDetails.id,      \n   //    product_number: fields.productDetails.product_num,\n   //    product_name: fields.productDetails.product_name,\n   //    product_category: fields.productDetails.category,\n   //    price_per_unit: fields.productDetails.retail_price,\n   //    quantity: fields.quantity,\n   //    total_price: fields.total_price,\n   //    sold_to: fields.sold_to,\n   //    date_sold: fields.date_sold,\n   //    shipping: fields.shipping,\n   //    tax: fields.tax,\n   //    discount_rate: fields.discount\n   // }\n   \n\n   // first we call a fetch request to update our backend because the backend is the source of truth for our global state\n   try {\n      // console.log(newSale)\n      const response = await fetch(`http://localhost:8000/sales/addNewSale`, {\n         method: \"POST\",\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         body: JSON.stringify(fields),\n      })\n\n      //need to await on parsing response to javascript objects from json\n      const success = await response.json()\n      // console.log(success)\n\n      //pass into our action as a payload and we dispatch it\n      return dispatch(onAddSale(success))\n   } catch (e) {\n      console.log(\"CAUGHT ERROR IN PROMISE\")\n   }\n}\n\nexport default AddSale\n",{"ruleId":"240","severity":1,"message":"241","line":18,"column":8,"nodeType":"242","messageId":"243","endLine":18,"endColumn":13},{"ruleId":"240","severity":1,"message":"244","line":19,"column":8,"nodeType":"242","messageId":"243","endLine":19,"endColumn":14},{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"240","severity":1,"message":"249","line":1,"column":10,"nodeType":"242","messageId":"243","endLine":1,"endColumn":25},{"ruleId":"240","severity":1,"message":"250","line":1,"column":27,"nodeType":"242","messageId":"243","endLine":1,"endColumn":38},{"ruleId":"240","severity":1,"message":"251","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"252","line":10,"column":10,"nodeType":"242","messageId":"243","endLine":10,"endColumn":17},{"ruleId":"240","severity":1,"message":"253","line":11,"column":10,"nodeType":"242","messageId":"243","endLine":11,"endColumn":19},{"ruleId":"240","severity":1,"message":"252","line":17,"column":10,"nodeType":"242","messageId":"243","endLine":17,"endColumn":17},{"ruleId":"254","severity":1,"message":"255","line":116,"column":7,"nodeType":"256","endLine":116,"endColumn":9,"suggestions":"257"},{"ruleId":"258","severity":1,"message":"259","line":175,"column":103,"nodeType":"260","endLine":175,"endColumn":119},{"ruleId":"261","severity":1,"message":"262","line":34,"column":1,"nodeType":"263","endLine":34,"endColumn":23},{"ruleId":"240","severity":1,"message":"264","line":2,"column":8,"nodeType":"242","messageId":"243","endLine":2,"endColumn":16},{"ruleId":"240","severity":1,"message":"265","line":3,"column":22,"nodeType":"242","messageId":"243","endLine":3,"endColumn":34},{"ruleId":"240","severity":1,"message":"266","line":3,"column":51,"nodeType":"242","messageId":"243","endLine":3,"endColumn":63},{"ruleId":"267","severity":1,"message":"268","line":68,"column":13,"nodeType":"269","messageId":"270","endLine":80,"endColumn":7},{"ruleId":"271","severity":1,"message":"272","line":68,"column":13,"nodeType":"269","messageId":"273","endLine":80,"endColumn":7},{"ruleId":"254","severity":1,"message":"274","line":58,"column":6,"nodeType":"256","endLine":58,"endColumn":52,"suggestions":"275"},{"ruleId":"240","severity":1,"message":"276","line":18,"column":13,"nodeType":"242","messageId":"243","endLine":18,"endColumn":22},{"ruleId":"261","severity":1,"message":"262","line":218,"column":1,"nodeType":"263","endLine":218,"endColumn":65},{"ruleId":"240","severity":1,"message":"277","line":4,"column":10,"nodeType":"242","messageId":"243","endLine":4,"endColumn":23},{"ruleId":"240","severity":1,"message":"278","line":58,"column":11,"nodeType":"242","messageId":"243","endLine":58,"endColumn":15},{"ruleId":"240","severity":1,"message":"279","line":58,"column":17,"nodeType":"242","messageId":"243","endLine":58,"endColumn":24},{"ruleId":"254","severity":1,"message":"280","line":68,"column":7,"nodeType":"256","endLine":68,"endColumn":41,"suggestions":"281"},{"ruleId":"254","severity":1,"message":"282","line":51,"column":8,"nodeType":"256","endLine":51,"endColumn":48,"suggestions":"283"},{"ruleId":"284","severity":1,"message":"285","line":160,"column":33,"nodeType":"286","messageId":"287","endLine":160,"endColumn":36},{"ruleId":"254","severity":1,"message":"274","line":48,"column":8,"nodeType":"256","endLine":48,"endColumn":10,"suggestions":"288"},{"ruleId":"254","severity":1,"message":"289","line":57,"column":8,"nodeType":"256","endLine":57,"endColumn":28,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":114,"column":51,"nodeType":"293","messageId":"287","endLine":114,"endColumn":53},{"ruleId":"291","severity":1,"message":"292","line":139,"column":60,"nodeType":"293","messageId":"287","endLine":139,"endColumn":62},{"ruleId":"291","severity":1,"message":"294","line":160,"column":98,"nodeType":"293","messageId":"287","endLine":160,"endColumn":100},{"ruleId":"291","severity":1,"message":"292","line":294,"column":37,"nodeType":"293","messageId":"287","endLine":294,"endColumn":39},{"ruleId":"291","severity":1,"message":"292","line":296,"column":40,"nodeType":"293","messageId":"287","endLine":296,"endColumn":42},{"ruleId":"254","severity":1,"message":"295","line":55,"column":8,"nodeType":"256","endLine":55,"endColumn":54,"suggestions":"296"},{"ruleId":"297","severity":1,"message":"298","line":86,"column":9,"nodeType":"299","messageId":"300","endLine":170,"endColumn":10},{"ruleId":"291","severity":1,"message":"292","line":118,"column":51,"nodeType":"293","messageId":"287","endLine":118,"endColumn":53},{"ruleId":"284","severity":1,"message":"285","line":271,"column":33,"nodeType":"286","messageId":"287","endLine":271,"endColumn":36},{"ruleId":"291","severity":1,"message":"292","line":49,"column":31,"nodeType":"293","messageId":"287","endLine":49,"endColumn":33},{"ruleId":"291","severity":1,"message":"292","line":51,"column":42,"nodeType":"293","messageId":"287","endLine":51,"endColumn":44},{"ruleId":"291","severity":1,"message":"292","line":53,"column":29,"nodeType":"293","messageId":"287","endLine":53,"endColumn":31},{"ruleId":"291","severity":1,"message":"292","line":55,"column":35,"nodeType":"293","messageId":"287","endLine":55,"endColumn":37},{"ruleId":"291","severity":1,"message":"292","line":57,"column":32,"nodeType":"293","messageId":"287","endLine":57,"endColumn":34},{"ruleId":"291","severity":1,"message":"292","line":59,"column":33,"nodeType":"293","messageId":"287","endLine":59,"endColumn":35},{"ruleId":"254","severity":1,"message":"282","line":20,"column":7,"nodeType":"256","endLine":20,"endColumn":9,"suggestions":"301"},{"ruleId":"291","severity":1,"message":"292","line":41,"column":35,"nodeType":"293","messageId":"287","endLine":41,"endColumn":37},{"ruleId":"240","severity":1,"message":"302","line":2,"column":10,"nodeType":"242","messageId":"243","endLine":2,"endColumn":17},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'Logout' is defined but never used.","no-native-reassign",["303"],"no-negated-in-lhs",["304"],"'combineReducers' is defined but never used.","'createStore' is defined but never used.","'useEffect' is defined but never used.","'onLogin' is defined but never used.","'UserLogin' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLoggedUser'. Either include it or remove the dependency array. If 'getLoggedUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["305"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ReactDOM' is defined but never used.","'VictoryChart' is defined but never used.","'VictoryLabel' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","React Hook useEffect has a missing dependency: 'onGetMaterials'. Either include it or remove the dependency array. If 'onGetMaterials' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["306"],"'localUser' is assigned a value but never used.","'setAutoFreeze' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onGetSales' and 'selectedDate'. Either include them or remove the dependency array. If 'onGetSales' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["307"],"React Hook useEffect has a missing dependency: 'onGetProducts'. Either include it or remove the dependency array. If 'onGetProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["308"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["309"],"React Hook useEffect has a missing dependency: 'activeStep'. Either include it or remove the dependency array.",["310"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'onGetMaterials', 'onGetProductByID', and 'productData.id'. Either include them or remove the dependency array. If 'onGetProductByID' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["311"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["312"],"'Popover' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},"Update the dependencies array to be: [getLoggedUser]",{"range":"329","text":"330"},"Update the dependencies array to be: [materialsEdit, materialsDelete, materialsAdd, onGetMaterials]",{"range":"331","text":"332"},"Update the dependencies array to be: [salesAdd, salesEdit, salesDelete, onGetSales, selectedDate]",{"range":"333","text":"334"},"Update the dependencies array to be: [productDelete, productAdd, productEdit, onGetProducts]",{"range":"335","text":"336"},"Update the dependencies array to be: [onGetMaterials]",{"range":"337","text":"338"},"Update the dependencies array to be: [activeStep, newReturnedProduct]",{"range":"339","text":"340"},"Update the dependencies array to be: [materialDelete, newMaterialItem, editProduct, productData.id, onGetProductByID, onGetMaterials]",{"range":"341","text":"342"},"Update the dependencies array to be: [onGetProducts]",{"range":"343","text":"344"},[3292,3294],"[getLoggedUser]",[1892,1938],"[materialsEdit, materialsDelete, materialsAdd, onGetMaterials]",[1814,1848],"[salesAdd, salesEdit, salesDelete, onGetSales, selectedDate]",[1671,1711],"[productDelete, productAdd, productEdit, onGetProducts]",[1827,1829],"[onGetMaterials]",[2225,2245],"[activeStep, newReturnedProduct]",[2049,2095],"[materialDelete, newMaterialItem, editProduct, productData.id, onGetProductByID, onGetMaterials]",[731,733],"[onGetProducts]"]